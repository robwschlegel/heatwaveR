[{"path":[]},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/CITATIONS.html","id":"id_2022","dir":"","previous_headings":"","what":"2022","title":"Scientific literature","text":"Arafeh Dalmau, N. (2022). Impacts marine heatwaves kelp forests climate-smart conservation. Barkhordarian, ., Nielsen, D. M., & Baehr, J. (2022). Greenhouse Gas Forcing Necessary Causation Marine Heatwaves Northeast Pacific Warming Pool. Becker, F. N., Fink, . H., Bissolli, P., & Pinto, J. G. (2022). Towards comprehensive assessment intensity historical European heat waves (1979–2019). Atmospheric Science Letters, 23(11), e1120. Bennett, S., Alcoverro, T., Kletou, D., Antoniou, C., Boada, J., Buñuel, X., … & Marbà, N. (2022). Resilience seagrass populations thermal stress reflect regional differences ocean climate. New Phytologist, 233(4), 1657-1666. Bernal-Ibáñez, ., Gestoso, ., Ramalhosa, P., Campanati, C., & Cacabelos, E. (2022). Interaction marine heatwaves grazing two canopy-forming algae. Journal Experimental Marine Biology Ecology, 556, 151795. Bove, C. B., Mudge, L., & Bruno, J. F. (2022). century warming Caribbean reefs. PLOS Climate, 1(3), e0000002. Chatterjee, ., Anil, G., & Shenoy, L. R. (2022). Marine heatwaves Arabian Sea. Ocean Science, 18(3), 639-657. Choi, W., Bang, M., Joh, Y., Ham, Y. G., Kang, N., & Jang, C. J. (2022). Characteristics Mechanisms Marine Heatwaves East Asian Marginal Seas: Regional Seasonal Differences. Remote Sensing, 14(15), 3522. Clare, X. S., Kui, L., & Hofmann, G. E. (2022). Larval Thermal Tolerance Kellet’s Whelk (Kelletia kelletii) Window Resilience Wild Shellfishery Marine Heatwaves. Journal Shellfish Research, 41(2), 283-290. De Leij, R. (2022). Functional response antarctic sea urchin, sterechinus neumayeri, environmental change extreme events context warming climate (Doctoral dissertation, University Southampton). De Leij, R., Grange, L. J., & Peck, L. S. (2022). Functional thermal limits determined rate warming simulated marine heatwaves. Marine Ecology Progress Series, 685, 183-196. Duarte, B., Repolho, T., Paula, J. R., Caçador, ., Matos, . R., & Rosa, R. (2022). Ocean Acidification Alleviates Dwarf Eelgrass (Zostera noltii) Lipid Landscape Remodeling Warming Stress. Biology, 11(5), 780. Favoretto, F., Sánchez, C., & Aburto-Oropeza, O. (2022). Warming marine heatwaves tropicalize rocky reefs communities Gulf California. Progress Oceanography, 206, 102838. Feng, Y., Bethel, B. J., Dong, C., Zhao, H., Yao, Y., & Yu, Y. (2022). Marine heatwave events near Weizhou Island, Beibu Gulf 2020 possible relations coral bleaching. Science Total Environment, 823, 153414. García Molinos, J., Hunt, H. L., Green, M. E., Champion, C., Hartog, J. R., & Pecl, G. T. (2022). Climate, currents species traits contribute early stages marine species redistribution. Communications Biology, 5(1), 1-10. Garrabou, J., Gómez‐Gras, D., Medrano, ., Cerrano, C., Ponti, M., Schlegel, R., … & Harmelin, J. G. (2022). Marine heatwaves drive recurrent mass mortalities Mediterranean Sea. Global Change Biology, 28(19), 5708-5725. Goebeler, N., Norkko, ., & Norkko, J. (2022). Ninety years coastal monitoring reveals baseline extreme ocean temperatures increasing Finnish coast. Communications earth & environment, 3(1), 1-11. Ilarri, M., Souza, . T., Dias, E., & Antunes, C. (2022). Influence climate change extreme weather events estuarine fish community. Science Total Environment, 827, 154190. Izquierdo, P., Rico, J. M., Taboada, F. G., González-Gil, R., & Arrontes, J. (2022). Characterization marine heatwaves Cantabrian Sea, SW Bay Biscay. Estuarine, Coastal Shelf Science, 107923. Izquierdo, P., Taboada, F. G., González-Gil, R., Arrontes, J., & Rico, J. M. (2022). Alongshore upwelling modulates intensity marine heatwaves temperate coastal sea. Science Total Environment, 835, 155478. Kapwata, T., Gebreslasie, M. T., & Wright, C. Y. (2022). analysis past future heatwaves based heat-associated mortality threshold: towards heat health warning system. Environmental health, 21(1), 1-12. Kashkooli, O. B., Karimian, S., & Modarres, R. (2022). Spatiotemporal variability Persian Gulf Oman Sea marine heatwaves 1982–2020. Marine Pollution Bulletin, 184, 114174. Klingbeil III, W. H., Montecinos, G. J., & Alberto, F. (2022). Giant kelp genetic monitoring disturbance reveals stable genetic diversity Southern California. Frontiers Marine Science, 1715. Li, Y., Ren, G., Wang, Q., Mu, L., & Niu, Q. (2022). Marine Heatwaves South China Sea: Tempo-Spatial Pattern Association Large-Scale Circulation. Remote Sensing, 14(22), 5829. Magel, C. L., Chan, F., Hessing-Lewis, M., & Hacker, S. D. (2022). Differential Responses Eelgrass Macroalgae Pacific Northwest Estuaries Following Unprecedented NE Pacific Ocean Marine Heatwave. Front. Mar. Sci, 9, 838967. Marochi, M. Z., De Grande, F. R., Pardo, J. C. F., Montenegro, Á., & Costa, T. M. (2022). Marine heatwave impacts newly-hatched planktonic larvae estuarine crab. Estuarine, Coastal Shelf Science, 278, 108122. Martinez-Baroja, L., Rey-Benayas, J. M., Perez-Camacho, L., & Villar-Salvador, P. (2022). Drivers oak establishment Mediterranean old fields 25-year-old woodland islets planted assist natural regeneration. European Journal Forest Research, 141(1), 17-30. Mercado, J. M., Gómez-Jakobsen, F., Korbee, N., Aviles, ., Bonomi-Barufi, J., Muñoz, M., … & Figueroa, F. L. (2022). Analyzing environmental factors favor growth invasive brown macroalga Rugulopteryx okamurae (Ochrophyta): probable role nutrient excess. Marine Pollution Bulletin, 174, 113315. Mo, S., Chen, T., Chen, Z., Zhang, W., & Li, S. (2022). Marine heatwaves impair thermal refugia potential marginal reefs northern South China Sea. Science Total Environment, 825, 154100. Mora‐Soto, ., Aguirre, C., Iriarte, J. L., Palacios, M., Macaya, E. C., & Macias‐Fauria, M. (2022). Song Wind Ice: Increased Frequency Marine Cold‐Spells Southwestern Patagonia Possible Effects Giant Kelp Forests. Journal Geophysical Research: Oceans, 127(6), e2021JC017801. Murray, C. S., & Klinger, T. (2022). High P CO2 alter thermal plasticity developing Pacific herring embryos marine heatwave. Journal Experimental Biology, 225(5), jeb243501. Pappert, D., Barriendos, M., Brugnara, Y., Imfeld, N., Jourdain, S., Przybylak, R., … & Brönnimann, S. (2022). Statistical reconstruction daily temperature sea level pressure Europe severe winter 1788/89. Climate Past, 18(12), 2545-2565. Pastor, F., & Khodayar, S. (2022). Marine heat waves: Characterizing major climate impact Mediterranean. Science Total Environment, 160621. Paton, E. (2022). Intermittency analysis dry spell magnitude timing using different spell definitions. Journal Hydrology, 608, 127645. Perkins, N. R., Monk, J., Soler, G., Gallagher, P., & Barrett, N. S. (2022). Bleaching sponges temperate mesophotic reefs observed following marine heatwave events. Climate Change Ecology, 3, 100046. Pinna, F., Caragnano, ., Piazzi, L., Ragazzola, F., Stipcich, P., Rindi, F., & Ceccherelli, G. (2022). Mediterranean bioconstructor Lithophyllum stictiforme shows adaptability future warming. Frontiers Marine Science, 9. Pujol, C., Pérez-Santos, ., Barth, ., & Alvera Azcarate, . (2022). Marine Heatwaves Offshore Central South Chile: Understanding Forcing Mechanisms Years 2016-2017. Frontiers Marine Science, 9. Resaikos, V., & Ceccherelli, G. (2022). Patrizia Stipcich1, Eugenia T. Apostolaki2, Niki Chartosia3, Pavlos Theofilos Efthymiadis2, Carlos E. Jimenez4, 5, Gabriella La Manna6, 7, Arianna Pansini1, Elena Principato8. Reyes, O., Manta, G., & Carrillo, L. (2022). Marine heatwaves marine cold-spells Yucatan Shelf-break upwelling region. Continental Shelf Research, 239, 104707. Smith, K. E., Burrows, M. T., Hobday, . J., King, N. G., Moore, P. J., Sen Gupta, ., … & Smale, D. . (2022). Biological Impacts Marine Heatwaves. Annual Review Marine Science, 15. Stipcich, P., Beca-Carretero, P., Álvarez-Salgado, X. ., Apostolaki, E. T., Chartosia, N., Efthymiadis, P. T., … & Ceccherelli, G. (2022). Effects high temperature marine heat waves seagrasses: warming affecting nutritional value Posidonia oceanica?. Marine Environmental Research, 105854. Stipcich, P., Marín-Guirao, L., Pansini, ., Pinna, F., Procaccini, G., Pusceddu, ., … & Ceccherelli, G. (2022). Effects Current Future Summer Marine Heat Waves Posidonia oceanica: Plant Origin Matters?. Front. Clim, 4, 844831. Stipcich, P., Pansini, ., Beca-Carretero, P., Stengel, D. B., & Ceccherelli, G. (2022). Field thermo acclimation increases resilience Posidonia oceanica seedlings marine heat waves. Marine Pollution Bulletin, 184, 114230. Tassone, S. J., Besterman, . F., Buelo, C. D., Ha, D. T., Walter, J. ., & Pace, M. L. (2022). Increasing heatwave frequency streams rivers United States. Limnology Oceanography Letters. Tassone, S. J., Besterman, . F., Buelo, C. D., Walter, J. ., & Pace, M. L. (2022). Co-occurrence Aquatic Heatwaves Atmospheric Heatwaves, Low Dissolved Oxygen, Low pH Events Estuarine Ecosystems. Estuaries Coasts, 45(3), 707-720. Thoral, F., Montie, S., Thomsen, M. S., Tait, L. W., Pinkerton, M. H., & Schiel, D. R. (2022). Unravelling seasonal trends coastal marine heatwave metrics across global biogeographical realms. Scientific reports, 12(1), 1-13. Wegscheider, B., Linnansaari, T., Monk, W. ., Ndong, M., Haralampides, K., St‐Hilaire, ., … & Curry, R. . (2022). Quantitative modelling fish habitat large regulated river changing climate. Ecohydrology, 15(5), e2318. Wethey, D. S., & Woodin, S. . (2022). Climate change Arenicola marina: Heat waves southern limit ecosystem engineer. Estuarine, Coastal Shelf Science, 276, 108015. Wolf, F., Seebass, K., & Pansch, C. (2022). role recovery phases mitigating negative impacts marine heatwaves sea star Asterias rubens. Frontiers Marine Science, 8, Art-Nr. Woolway, R. ., Albergel, C., Frölicher, T. L., & Perroud, M. (2022). Severe Lake Heatwaves Attributable Human‐Induced Global Warming. Geophysical Research Letters, 49(4), e2021GL097031. Zhang, M., Yang, X., Cleverly, J., Huete, ., Zhang, H., & Yu, Q. (2022). Heat wave tracker: multi-method, multi-source heat wave measurement toolkit based Google Earth Engine. Environmental Modelling & Software, 147, 105255.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/CITATIONS.html","id":"id_2021","dir":"","previous_headings":"","what":"2021","title":"Scientific literature","text":"Abrahams, ., Schlegel, R. W., & Smit, . J. (2021). novel approach quantify metrics upwelling intensity, frequency, duration. PLoS One, 16(7), e0254026. Abrahams, ., Schlegel, R. W., & Smit, . J. (2021). Variation change upwelling dynamics detected world’s eastern boundary upwelling systems. Frontiers Marine Science, 8, 626411. Arimitsu, M. L., Piatt, J. F., Hatch, S., Suryan, R. M., Batten, S., Bishop, M. ., … & von Biela, V. R. (2021). Heatwave‐induced synchrony within forage fish portfolio disrupts energy flow top pelagic predators. Global change biology, 27(9), 1859-1878. Beaudry, M. L. (2021). Analyses des vagues de chaleur survenues depuis le début du 20e siècle dans trois villes principales du sud-est du Canada (Doctoral dissertation, Université d’Ottawa/University Ottawa). Benedetti-Cecchi, L. (2021). Complex networks marine heatwaves reveal abrupt transitions global ocean. Scientific reports, 11(1), 1-11. Bove, C. B., Mudge, L., & Bruno, J. F. (2021). One Hundred Fifty Years Warming Caribbean Coral Reefs. BioRxiv. Clutton, E. ., Alurralde, G., & Repolho, T. (2021). Early developmental stages native populations Ciona intestinalis increased temperature affected local habitat history. Journal Experimental Biology. Feng, M., Caputi, N., Chandrapavan, ., Chen, M., Hart, ., & Kangas, M. (2021). Multi-year marine cold-spells west coast Australia effects fisheries. Journal Marine Systems, 214, 103473. Heim, K. C., Thorne, L. H., Warren, J. D., Link, J. S., & Nye, J. . (2021). Marine ecosystem indicators sensitive ecosystem boundaries spatial scale. Ecological Indicators, 125, 107522. Hu, L. (2021). global assessment coastal marine heatwaves relation coastal urban thermal changes. Geophysical Research Letters, 48(9), e2021GL093260. Kraufvelin, L. (2021). Identification marine heatwaves Archipelago Sea experimental testing impacts non-indigenous Harris mud crab. Minuti, J. J., Byrne, M., Hemraj, D. ., & Russell, B. D. (2021). Capacity ecologically key urchin recover extreme events: Physiological impacts heatwaves road recovery. Science Total Environment, 785, 147281. Pujol, C. (2021). Marine heatwaves offshore Central South Chile: global assessment case study year 2016. Reynaert, S., De Boeck, H. J., Verbruggen, E., Verlinden, M., Flowers, N., & Nijs, . (2021). Risk short‐term biodiversity loss persistent precipitation regimes. Global Change Biology, 27(8), 1614-1626. Santamaría, J., Golo, R., Cebrian, E., García, M., & Vergés, . (2021). Stressful Conditions Give Rise Novel Cryptic Filamentous Form Caulerpa cylindracea. Frontiers Marine Science, 8, 548679. Schlegel, R. W., Darmaraki, S., Benthuysen, J. ., Filbee-Dexter, K., & Oliver, E. C. (2021). Marine cold-spells. Progress Oceanography, 198, 102684. Schlegel, R. W., Oliver, E. C., & Chen, K. (2021). Drivers marine heatwaves Northwest Atlantic: role air–sea interaction onset decline. Frontiers Marine Science, 8, 627970. Smith, K. E., Burrows, M. T., Hobday, . J., Sen Gupta, ., Moore, P. J., Thomsen, M., … & Smale, D. . (2021). Socioeconomic impacts marine heatwaves: Global issues opportunities. Science, 374(6566), eabj3593. Sydeman, W. J., Schoeman, D. S., Thompson, S. ., Hoover, B. ., García-Reyes, M., Daunt, F., … & Watanuki, Y. (2021). Hemispheric asymmetry ocean change productivity ecosystem sentinels. Science, 372(6545), 980-983. Thomsen, M. S., Mondardini, L., Thoral, F., Gerber, D., Montie, S., South, P. M., … & Schiel, D. R. (2021). Cascading impacts earthquakes extreme heatwaves destroyed populations iconic marine foundation species. Diversity Distributions, 27(12), 2369-2383. Van Der Walt, K. ., Potts, W. M., Porri, F., Winkler, . C., Duncan, M. ., Skeeles, M. R., & James, N. C. (2021). Marine Heatwaves Exceed Cardiac Thermal Limits Adult Sparid Fish (Diplodus capensis, Smith 1884). Frontiers Marine Science, 8, 801. Verdura, J., Santamaría, J., Ballesteros, E., Smale, D., Cefalì, M. E., Golo, R., … & Cebrian, E. (2021). Local‐scale climatic refugia offer sanctuary habitat‐forming species marine heatwave. Journal Ecology. Woolway, R. ., Anderson, E. J., & Albergel, C. (2021). Rapidly expanding lake heatwaves climate change. Environmental Research Letters, 16(9), 094013. Woolway, R. ., Jennings, E., Shatwell, T., Golub, M., Pierson, D. C., & Maberly, S. C. (2021). Lake heatwaves climate change. Nature, 589(7842), 402-407. Woolway, R. ., Kraemer, B. M., Zscheischler, J., & Albergel, C. (2021). Compound hot temperature high chlorophyll extreme events global lakes. Environmental Research Letters, 16(12), 124066.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/CITATIONS.html","id":"id_2020","dir":"","previous_headings":"","what":"2020","title":"Scientific literature","text":"Abrahams, . (2020). Detecting patterns upwelling variability Eastern Boundary Upwelling Systems special emphasis Benguela region (Doctoral dissertation, University Western Cape). Fumo, J. T., Carter, M. L., Flick, R. E., Rasmussen, L. L., Rudnick, D. L., & Iacobellis, S. F. (2020). Contextualizing marine heatwaves Southern California bight anthropogenic climate change. Journal Geophysical Research: Oceans, 125(5), e2019JC015674. Magel, C. L. (2020). Ecosystem Functions Pacific Northwest Estuaries: Role Ocean Watershed Drivers Eelgrass Coho Salmon Dynamics. Pegado, M. R., Santos, C. P., Raffoul, D., Konieczna, M., Sampaio, E., Maulvault, . L., … & Rosa, R. (2020). Impact simulated marine heatwave hematological profile temperate shark (Scyliorhinus canicula). Ecological Indicators, 114, 106327. Reynaert, S., De Boeck, H. J., Verbruggen, E., Verlinden, M., Flowers, N., & Nijs, . (2020). Risk short‐term biodiversity loss persistent precipitation regimes. Global Change Biology. Wegscheider, B., Linnansaari, T., Monk, W., Ndong, M., Haralampides, K., St-Hilaire, ., … & Allen, R. (2020). Quantitative modelling fish habitat future regulated hydro-climatically driven flow regimes Saint John River (New Brunswick, Canada). Quantitative modelling existing future fish habitat Saint John River, NB, Canada, 184.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/CITATIONS.html","id":"id_2019","dir":"","previous_headings":"","what":"2019","title":"Scientific literature","text":"Schlegel, R. W., Oliver, E. C., Hobday, . J., & Smit, . J. (2019). Detecting marine heatwaves sub-optimal data. Frontiers Marine Science, 6, 737. Westover, M. L. (2019). Biogeographical implications climate change alpine mammal, American pika. Zhao, Z., & Marin, M. (2019). MATLAB toolbox detect analyze marine heatwaves. Journal Open Source Software, 4, 1124.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/CITATIONS.html","id":"id_2018","dir":"","previous_headings":"","what":"2018","title":"Scientific literature","text":"Barbeaux, S., Aydin, K., Fissel, B., Holsman, K., Laurel, B., Palsson, W., … & Zador, S. (2018). Assessment Pacific cod stock Gulf Alaska. Beebe, N. H. (2018). Complete Bibliography Publications Journal Open Source Software.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to heatwaveR","title":"Contributing to heatwaveR","text":"Please see guidelines contributions heatwaveR package.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/CONTRIBUTING.html","id":"typos-and-grammatical-errors","dir":"","previous_headings":"","what":"Typos and grammatical errors","title":"Contributing to heatwaveR","text":"Corrections typos grammatical errors may made directly GitHub web interface. changes made within .R source file R/ folder .Rd file man/ folder.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/CONTRIBUTING.html","id":"filing-an-issue","dir":"","previous_headings":"","what":"Filing an issue","title":"Contributing to heatwaveR","text":"one want propose change new feature, please file issue GitHub interface. Bug reports specifically may made . proposing change/new feature, reporting bug, please illustrate issue minimal reproducible example possible.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to heatwaveR","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 Robert William Schlegel Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/Download_SST_v2.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Download, Prepare, and Analyse NOAA OISST Data: Alternative Methods","text":"vignette shall look retrieving processing Reynolds Optimally Interpolated Sea Surface Temperature (Reynolds et al. 2007; OISST), global data set Advanced High Resolution Radiometer (AVHRR) derived SSTs daily resolution, starting 1 September 1981. source data Physical Oceanography Distributed Active Archive Centre (PODAAC). Several steps involved: Retrieving data using python script Using CDO combine daily files über netCDF Extracting giant netCDF using tidync Creating longitude slices Detecting MHWs slice parallel global, daily file around 8.3Mb, add large amount data time series least 30 years duration downloaded. time series least 30 years needed heatwave detection. Currently 13,216 global files, amounts ~108Gb total disk space. Since everyone need data, shall subset data using python script prior downloading .","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/Download_SST_v2.html","id":"subsetting-using-a-python-script","dir":"Articles","previous_headings":"","what":"Subsetting using a python script","title":"Download, Prepare, and Analyse NOAA OISST Data: Alternative Methods","text":"subsetting bring data local computer/server, need access python 2.7 numpy. Make sure installed system visible system PATH. Create folder server data received, , example, use /Users/ajsmit/spatial/test/netCDF. directory, copy python script, subset_dataset.py (link). Remember make file executable running chmod +x subset_dataset.py. use MacOS X (linux), ’m able provide instructions use Windows. terminal, change directory receive netCDF files, python script now lives. python system’s path, able execute following command terminal/command line prompt >: > ./subset_dataset.py -s 19810901 -f 20171014 -b 5 45 -50 -12 -x AVHRR_OI-NCEI-L4-GLOB-v2.0 Encapsulated command following parameters: long.min = 5 long.max = 45 lat.min = -50 lat.max = -12 start.date = 1981-09-01 (OISST dataset starts ) end.date = 2022-02-28 (daily, new data made available) short.name = AVHRR_OI-NCEI-L4-GLOB-v2.0 spatial extent region around southern Africa Benguela Agulhas Current ; select files starting 1981-09-01 going 2022-02-28. short name name mentioned Reynolds OISST data website—substituting name SST datasets website permit retrieval data sets (e.g. MUR data’s short name MUR-JPL-L4-GLOB-v4.1). website seems frequently, try couple times work first time. Adjust parameters taste order define spatial extent time period required study. everything works according plan, bunch data now downloaded. might take several hours. one netCDF file day study period. later steps shall combine one netCDF file, processing extract marine heatwaves.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/Download_SST_v2.html","id":"combine-daily-netcdfs-into-an-über-netcdf-using-cdo","dir":"Articles","previous_headings":"","what":"Combine daily netCDFs into an über netCDF using CDO","title":"Download, Prepare, and Analyse NOAA OISST Data: Alternative Methods","text":"approach taken sequentially slices combined über netCDF detects marine heatwaves parallel within ‘slice.’ make giant netCDF, use Climate Data Operators (CDO) command terminal: > cdo mergetime *.nc OISST_combined.nc can easily applied global data 1 Sept 1981 present. One can make function R call cdo everything within R script. new daily file can added über netCDF becomes available. advantage working big netCDF subsetting slicing much easier faster compared working individual files per longitude slice. Another advantage going combined netCDF route resultant giant file much smaller either db file series RData files (e.g. one file per longitude slice). netCDF obvious advantages comes storing array data, e.g. ~10 years worth daily global files result file sizes: netCDF: 30 Gb, csv db file: ~97 Gb ","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/Download_SST_v2.html","id":"extract-sst-data-using-tidync-and-parallel-process-individual-slices","dir":"Articles","previous_headings":"","what":"Extract SST data using tidync, and parallel process individual ‘slices’","title":"Download, Prepare, and Analyse NOAA OISST Data: Alternative Methods","text":"use tidync::tidync() sequentially select small slices fit memory process parallel using plyr::ldapply(). Someday ’ll replace plyr function something newer package sadly longer maintained. Maybe one map() family functions purrr package? ‘width’ slice can scaled amount memory, subsequent parallel processing detect events within slice scales number CPU cores.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/Download_SST_v2.html","id":"apply-the-slice-and-detect-functions","dir":"Articles","previous_headings":"","what":"Apply the slice and detect functions","title":"Download, Prepare, and Analyse NOAA OISST Data: Alternative Methods","text":"set steps job : Please let know issues scripts, suggesations improve .","code":"# Load packages -----------------------------------------------------------  library(tidyverse) library(tidync) library(data.table) # for the fast fwrite() function library(heatwaveR) library(doParallel) registerDoParallel(cores = 14) # not using all 16  # Define paths ------------------------------------------------------------  datadir <- \"/Volumes/OceanData\" oisst_file_dir <- paste0(datadir, \"/test_files\") nc_file <- paste0(oisst_file_dir, \"/OISST_combined.nc\") MHW_dir <- datadir  # Define various functions ------------------------------------------------  # A load and slice function for the combined netCDF OISST_load <- function(file_name, lon1, lon2) {   OISST_dat <- tidync(file_name) %>%     hyper_filter(lon = between(lon, lon1, lon2)) %>%     hyper_tibble(select_var = \"sst\", force = TRUE, drop = TRUE) %>%     select(-zlev) %>%     dplyr::rename(t = time, temp = sst) %>%     mutate(t = as.Date(t, origin = \"1978-01-01\"))   return(OISST_dat)   rm(OISST_dat) }  # Rob's MHW detect function event_only <- function(df) {   # first calculate the climatologies   clim <- ts2clm(data = df, climatologyPeriod = c(\"1991-01-01\", \"2020-12-31\"))   # then the events   event <- detect_event(data = clim)   rm(clim)   # return only the event metric dataframe of results   return(event$event)   rm(event) } # Execute the code --------------------------------------------------------  # Define the slices # 10° longitude slices seem to work fine on # my MacBook Pro with 64Gb RAM and 16 cores slice_df <- tibble(lon1 = seq(0, 350, 10),                    lon2 = seq(10, 360, 10))  system.time(   # extract slices sequentially   for (i in 1:nrow(slice_df)) {     cat(noquote(paste(\"Processing slice\", i, \"of\", nrow(slice_df),                       \"-->\", slice_df$lon1[i], \"to\", slice_df$lon2[i], \"°E\\n\")))     cat(noquote(\"  > 1. loading and slicing NetCDF\\n\"))     sst <- OISST_load(nc_file, lon1 = slice_df$lon1[i], lon2 = slice_df$lon2[i])     # process each slice in parallel     cat(noquote(\"  > 2. detecting marine heatwaves\\n\"))     MHW <- plyr::ddply(.data = sst, .variables = c(\"lon\", \"lat\"),                        .fun = event_only, .parallel = TRUE)     rm(sst)     # save results to disk     cat(noquote(\"  > 3. saving events to csv\\n\"))     fwrite(MHW, file = paste0(datadir, \"/MHW_slice_\", i, \"_\",                               slice_df$lon1[i], \"-\", slice_df$lon2[i], \".csv\"))     rm(MHW)     cat(noquote(\"SLICE DONE!\\n\"))     cat(sep=\"\\n\\n\")   } )"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/Download_SST_v2.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Download, Prepare, and Analyse NOAA OISST Data: Alternative Methods","text":"Reynolds, R. W., Smith, T. M., Liu, C., Chelton, D. B., Casey, K. S., & Schlax, M. G. (2007). Daily high-resolution-blended analyses sea surface temperature. Journal climate, 20(22), 5473-5496.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/MHW_metric_trends.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Trend and Breakpoint analyses in MHW metrics","text":"One may see vignettes download prepare OISST data detect MHWs gridded data. vignette use data subsetted around New Zealand (NZ) Exclusive Economic Zone (EEZ) example calculate trends breakpoints bioregions (Spalding et al. (2007)) seasons shown Thoral et al. (2022).","code":"library(heatwaveR) library(lubridate) library(dplyr) library(tidyr) library(purrr) library(ggplot2) library(viridis) library(trend) library(kableExtra) library(rerddap) library(sf)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/MHW_metric_trends.html","id":"meow","dir":"Articles","previous_headings":"","what":"MEOW","title":"Trend and Breakpoint analyses in MHW metrics","text":"Marine Ecosystems World (MEOW) shapefile may downloaded . Extract contents download convenient location use following code chunks. information MEOW please see Spalding et al. (2007). MEOW data NZ ready ’s time find pixels specifically want analyse. process assigning bioregions pixels simplified using sf (Pebesma (2018)) package.","code":"# Load and process the MEOW shapefile # NB: Change your file path to where the files were unzipped MEOW_NZ <- st_read('~/Desktop/meow_ecos.shp') %>%    dplyr:::filter(PROVINCE %in% c('Northern New Zealand', 'Southern New Zealand',                                  'Subantarctic New Zealand')) %>%    st_make_valid() %>%   st_transform(crs = 4326) %>%    st_shift_longitude() %>%    mutate(ECOREGION = factor(ECOREGION, levels = c(\"Kermadec Island\", \"Three Kings-North Cape\",                                                    \"Northeastern New Zealand\", \"Central New Zealand\",                                                   \"Chatham Island\", \"South New Zealand\",                                                    \"Bounty and Antipodes Islands\",                                                   \"Snares Island\",\"Auckland Island\",\"Campbell Island\")))  # Find max lon/lat ranges lon_range <- range(sf::st_coordinates(MEOW_NZ$geometry)[,1]) lat_range <- range(sf::st_coordinates(MEOW_NZ$geometry)[,2])  # Expand a bit to make sure all necessary pixels are downloaded lon_range <- c(lon_range[1]-0.25, lon_range[2]+0.25) lat_range <- c(lat_range[1]-0.25, lat_range[2]+0.25) # Create OISST grid lon_lat_OISST <- base::expand.grid(seq(0.125, 359.875, by = 0.25),                                     seq(-89.875, 89.875, by = 0.25)) %>%    dplyr::rename(lon = Var1, lat = Var2) %>%    dplyr::arrange(lon, lat) %>%    st_as_sf(coords = c('lon', 'lat'), crs = 4326)  # Join OISST grid to MEOW spatial and filter out pixels not within NZ EEZ lon_lat_NZ <- st_join(lon_lat_OISST, MEOW_NZ) %>%    dplyr::select(geometry, ECOREGION, PROVINCE) %>%    dplyr::filter(!is.na(ECOREGION))  # Convert the coordinates back to a tibble for further use # NB: Should be 6,398 pixels lon_lat_NZ_df <- lon_lat_NZ %>%    mutate(lon = sf::st_coordinates(.)[,1],          lat = sf::st_coordinates(.)[,2]) %>%    mutate(lon = as.numeric(lon), lat = as.numeric(lat)) %>%    data.frame() %>%    dplyr::select(-geometry)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/MHW_metric_trends.html","id":"download-data-and-calculate-climatologies","dir":"Articles","previous_headings":"","what":"Download data and calculate climatologies","title":"Trend and Breakpoint analyses in MHW metrics","text":"begin downloading daily OISST v2.1 data pixels around New Zealand (lat 25-55°S, lon 160-190°E) use functions heatwaveR::ts2clim() heatwaveR::detect_event() get climatology time series. Note full process take roughly one hour desktop computer given number pixels days. Even though know exact coordinates pixels want, still faster use rerddap::griddap() function extract bounding box around NZ rather use functions raster package extract EEZ polygons.","code":"# Get SST for around NZ + Islands and for all years OISST_sub_dl <- function(time_df){   OISST_dat <- griddap(x = \"ncdcOisst21Agg\",                         url = \"https://coastwatch.pfeg.noaa.gov/erddap/\",                         time = c(time_df$start, time_df$end),                         zlev = c(0, 0),                        latitude = lat_range,                        longitude = lon_range,                        fields = c(\"sst\"))$data %>%      mutate(time = as.Date(stringr::str_remove(time, \"T00:00:00Z\"))) %>%      dplyr::rename(t = time, temp = sst) %>%      dplyr::select(lon, lat, t, temp) %>%      na.omit() }  # The span of years to download dl_years <- data.frame(date_index = 1:5,                        start = as.Date(c(\"1982-01-01\", \"1990-01-01\",                                          \"1998-01-01\", \"2006-01-01\", \"2014-01-01\")),                        end = as.Date(c(\"1989-12-31\", \"1997-12-31\",                                        \"2005-12-31\", \"2013-12-31\", \"2021-12-31\")))  # Download the data # NB: Takes ~21 minutes on a desktop computer # NB: Contains 175,208,352 rows, 4 columns, and uses ~15 GB of RAM OISST_data <- dl_years %>%      group_by(date_index) %>%      group_modify(~OISST_sub_dl(.x)) %>%      ungroup() %>%      dplyr::select(lon, lat, t, temp)  # Filter out only the NZ pixels # NB: Contains 87,195,152 rows OISST_data_NZ <- left_join(lon_lat_NZ_df, OISST_data, by = c(\"lon\", \"lat\")) %>% drop_na()    # Get the climatologies only clim_only <- function(df){   # First calculate the climatologies   clim <- ts2clm(data = df, climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\"))   # Then the events   event <- detect_event(data = clim)   # Return only the climatology metric dataframe of results return(event$climatology) }  # Extract the climatology values # NB: Takes ~21 minutes on a desktop computer OISST_clim <- OISST_data_NZ %>%   group_by(ECOREGION, PROVINCE, lon, lat) %>%   group_modify(~clim_only(.x)) %>%   drop_na()"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/MHW_metric_trends.html","id":"summarise-mhw-metrics-by-year-season-and-bioregion","dir":"Articles","previous_headings":"","what":"Summarise MHW metrics by year, season, and bioregion","title":"Trend and Breakpoint analyses in MHW metrics","text":"","code":"# Get summary MHW_summary <- OISST_clim %>%    dplyr::select(-c(doy, thresh, threshCriterion, durationCriterion, event)) %>%    mutate(season_num = month(as.Date(floor_date(t, unit = \"season\"))),          year = year(t)) %>%   mutate(season = recode_factor(season_num, `12` = \"Summer\", `3` = \"Autumn\",                                  `6` = \"Winter\", `9` = \"Spring\")) %>%    mutate(intensity = temp-seas) %>%    group_by(ECOREGION, PROVINCE, lon, lat, year, season) %>%    summarise(nevents = length(unique(event_no)),             nMHWdays = length(t),             int_cumulative = sum(intensity),              int_mean = mean(intensity),             int_max = max(intensity), .groups = \"drop\") %>%    pivot_longer(-c(ECOREGION, PROVINCE, lon, lat, year, season),                 names_to = 'metrics', values_to = 'values')  # Save for future use # NB: 10.8 MB saveRDS(MHW_summary,\"~/Desktop/MHW_summary_NZ_1982_2021_OISST.Rds\")"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/MHW_metric_trends.html","id":"trends-in-mhw-metrics-at-nz-scale-bioregions","dir":"Articles","previous_headings":"","what":"Trends in MHW metrics at NZ scale + Bioregions","title":"Trend and Breakpoint analyses in MHW metrics","text":"seems like metrics going , potential acceleration years 2010. can calculate non parametric linear trends (Sen’s slope Mann-Kendall test) breakpoints (Pettitt test) using trend (Pohlert (2020)) package well usual parametric lm function. fact, see significant change-point years number MHW days (2012), number events (1997) cumulative intensity (2012). slopes pre post change-point documenting recent change metrics complement trend full time series. reason behind change-points? One can interested finding patterns MHW trends ecoregions. also show similar graphs metrics, like number events, min, max cumulative intensity. According previous tables, trend break point analyses useful asses changes MHW metrics scales. MHWs definition discrete events space time. can argue pixel event-based approach preferable. Can still apply methodology pixel scale?","code":"# Load data from previous code chunk MHW_summary_NZ <- readRDS(\"~/Desktop/MHW_summary_NZ_1982_2021_OISST.Rds\")  # Get count of unique pixels MHW_summary_NZ_npix <- MHW_summary_NZ %>%    dplyr::select(lon, lat) %>%    dplyr::distinct()  # Get annual summaries MHW_annual_summary_NZ <- MHW_summary_NZ %>%   pivot_wider(names_from = metrics, values_from = values) %>%    group_by(year) %>%    summarize(Number_MHW_days = sum(nMHWdays)/nrow(MHW_summary_NZ_npix),             Nevents = sum(nevents)/nrow(MHW_summary_NZ_npix),              Mean_Intensity = mean(int_mean),              Maximum_Intensity = mean(int_max),             Cumulative_Intensity = sum(int_cumulative)/nrow(MHW_summary_NZ_npix), .groups = \"drop\") %>%    complete(year = 1982:2021) %>%   pivot_longer(-year, names_to = 'Metrics', values_to = 'values') %>%    mutate(Metrics = factor(Metrics, levels = c(\"Number_MHW_days\", \"Nevents\", \"Mean_Intensity\",                                                \"Maximum_Intensity\", \"Cumulative_Intensity\")))  # Prepare prettier labels metrics_labs <- c(`Number_MHW_days` = \"Number of MHW days\",                   `Nevents` = \"Number of Events\",                   `Mean_Intensity` = \"Mean Intensity (°C)\",                   `Maximum_Intensity` = \"Maximum Intensity (°C)\",                   `Cumulative_Intensity` = \"Cumulative Intensity (°C Days)\")  # Create figure p <- ggplot(MHW_annual_summary_NZ, aes(x = year, y = values, col = Metrics)) +    geom_line(size = 0.5) +    geom_smooth(se = T) +   scale_colour_viridis(begin = 0, end = 0.75, option = \"viridis\", discrete = T) +    facet_wrap(Metrics ~ ., scales = 'free', labeller = as_labeller(metrics_labs), ncol = 2) +    labs(x = \"Year\", Y = NULL) +   theme_bw() +    theme(legend.position = \"none\")  p  # Coerce to interactive plotly format # plotly::ggplotly(p) # Get annual trends MHW_annual_trends_NZ <- MHW_annual_summary_NZ %>%    group_by(Metrics) %>%    nest() %>%    mutate(ts_out = purrr::map(data, ~ts(.x$values, start = 1982, end = 2021, frequency = 1))) %>%    mutate(sens = purrr::map(ts_out, ~sens.slope(.x, conf.level = 0.95)),           pettitt = purrr::map(ts_out, ~pettitt.test(.x)),          lm = purrr::map(data, ~lm(values ~ year, .x))) %>%    mutate(Sens_Slope = as.numeric(unlist(sens)[1]),          P_Value = as.numeric(unlist(sens)[3]),          Change_Point_Year = time(ts_out[[1]])[as.numeric(unlist(pettitt)[3])],          Change_Point_pvalue = as.numeric(unlist(pettitt)[4]),          lm_slope = unlist(lm)$coefficients.year) %>%    # Add step of cutting time series in 2 using Change_Point_Year    mutate(pre_ts = purrr::map(ts_out, ~window(.x, start = 1982, end = Change_Point_Year)),          post_ts = purrr::map(ts_out, ~window(.x, start = Change_Point_Year, end = 2021))) %>%    # Add step of calculating sen's slope and p-value to pre and post change point year   mutate(sens_pre = purrr::map(pre_ts, ~sens.slope(.x, conf.level = 0.95)),          Sens_Slope_pre = as.numeric(unlist(sens_pre)[1]), P_Value_pre = as.numeric(unlist(sens_pre)[3]),          sens_post = purrr::map(post_ts, ~sens.slope(.x, conf.level = 0.95)),          Sens_Slope_post = as.numeric(unlist(sens_post)[1]),          P_Value_post = as.numeric(unlist(sens_post)[3])) %>%    dplyr::select(Metrics, Sens_Slope, P_Value, Change_Point_Year, Change_Point_pvalue, lm_slope,                 Sens_Slope_pre, P_Value_pre, Sens_Slope_post, P_Value_post)  # Create table kable(MHW_annual_trends_NZ, caption = \"Table 1 - Sens's Slope and p-value.\")  %>%   kable_classic() # Count pixels per realm MHW_summary_NZ_npix_realms <- MHW_summary_NZ %>%    group_by(lon, lat, ECOREGION) %>%    tally() %>%    group_by(ECOREGION) %>%    tally() %>%    rename(npix = n) MHW_summary_NZ_npix_realms  # Summarise by realm MHW_summary_NZ_realms <- left_join(MHW_summary_NZ, MHW_summary_NZ_npix_realms, by = 'ECOREGION') %>%    pivot_wider(names_from = metrics,values_from = values) %>%    group_by(year, ECOREGION, season, npix) %>%    summarize(Number_MHW_days = sum(nMHWdays),             Nevents = sum(nevents),              Mean_Intensity = mean(int_mean),              Maximum_Intensity = mean(int_max),             Cumulative_Intensity = sum(int_cumulative), .groups = \"drop\") %>%    mutate(Number_MHW_days = Number_MHW_days/npix,          Nevents = Nevents/npix,           Cumulative_Intensity = Cumulative_Intensity/npix) %>%    group_by(ECOREGION, season) %>%    complete(year = 1982:2021) %>%    dplyr::select(-npix) %>%    pivot_longer(-c(year, ECOREGION, season), names_to = 'Metrics', values_to = 'values') %>%    mutate(Metrics = factor(Metrics, levels = c(\"Number_MHW_days\", \"Nevents\", \"Mean_Intensity\",                                                \"Maximum_Intensity\", \"Cumulative_Intensity\"))) %>%    replace(is.na(.), 0)  # Plot the results p <- MHW_summary_NZ_realms %>%    dplyr::filter(Metrics == 'Number_MHW_days') %>%    ggplot(aes(x = year, y = values, colour = season)) +    geom_line(size = 0.5) +    geom_smooth(se = T) +   labs(x = \"Year\", y = \"Number of MHW days\") +   scale_colour_viridis(begin = 0, end = 0.75, option = \"inferno\", discrete = T) +   guides(colour = guide_legend(override.aes = list(shape = 15, size = 2))) +   facet_wrap(ECOREGION~., ncol = 3) +    theme_bw() +    theme(legend.position = c(0.8,0.05),         legend.title = element_blank()) p  # Coerce to plotly format # plotly::ggplotly(p) # Get trends MHW_trends_NZ_realms <- MHW_summary_NZ_realms %>%    group_by(Metrics, ECOREGION, season) %>%    nest() %>%    mutate(ts_out = purrr::map(data, ~ts(.x$values, start = 1982, end = 2021, frequency = 1))) %>%    mutate(sens = purrr::map(ts_out, ~sens.slope(.x, conf.level = 0.95)),          pettitt = purrr::map(ts_out, ~pettitt.test(.x)),          lm = purrr::map(data, ~lm(values ~ year,.x))) %>%   mutate(Sens_Slope = as.numeric(unlist(sens)[1]),          P_Value = as.numeric(unlist(sens)[3]),          Change_Point_Year = time(ts_out[[1]])[as.numeric(unlist(pettitt)[3])],          Change_Point_pvalue = as.numeric(unlist(pettitt)[4]),          lm_slope = unlist(lm)$coefficients.year) %>%    # Add step of cutting time series in 2 using Change_Point_Year    mutate(pre_ts = purrr::map(ts_out, ~window(.x, start = 1982, end = Change_Point_Year)),          post_ts = purrr::map(ts_out, ~window(.x, start = Change_Point_Year, end = 2021))) %>%    # Add step of calculating sen's slope and p-value to pre and post change point year   mutate(sens_pre = purrr::map(pre_ts, ~sens.slope(.x, conf.level = 0.95)),          Sens_Slope_pre = as.numeric(unlist(sens_pre)[1]),          P_Value_pre = as.numeric(unlist(sens_pre)[3]),          sens_post = purrr::map(post_ts, ~sens.slope(.x, conf.level = 0.95)),          Sens_Slope_post = as.numeric(unlist(sens_post)[1]),          P_Value_post = as.numeric(unlist(sens_post)[3])) %>%    ungroup() %>% # To remove Season column   dplyr::select(ECOREGION, Metrics, season, Sens_Slope, P_Value, Change_Point_Year, Change_Point_pvalue,                 lm_slope, Sens_Slope_pre, P_Value_pre, Sens_Slope_post, P_Value_post) %>%    dplyr::filter(Metrics == 'Number_MHW_days')  # Create table kable(MHW_trends_NZ_realms, caption = \"Table 2 - Sens's Slope and p-value.\") %>%   kable_classic()"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/MHW_metric_trends.html","id":"pixel-based-case-scenario","dir":"Articles","previous_headings":"","what":"Pixel-based case scenario","title":"Trend and Breakpoint analyses in MHW metrics","text":"use time series SST available within heatwaveR package (sst_WA) investigate trend analysis 5 metrics grouping metric values per year done . lm regression seems detect upward trends metrics. Mann-Kendall say ? reason, Mann-Kendall Sen Slope analyses don’t seem useful return suspiciously low trends (vs lm_slope, traditional linear regression using lm) quite high p-values Summarizing MHW metrics year given pixel likely result years MHWs, hence bringing 0 values time series. sure sensitive MK Pettitt (breakpoint) analyses 0 values, something look future.","code":"# Simple event detection MHW_WA <- detect_event(ts2clm(sst_WA, climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\")))  # Get annual metrics MHW_WA_metrics_year <- MHW_WA$climatology %>%    dplyr::filter(!is.na(event_no)) %>%    mutate(year = year(t),          intensity = temp-seas) %>%    group_by(event, year) %>%    summarise(nevents = length(unique(event_no)),             nMHWdays = length(t),             int_cumulative = sum(intensity),              int_mean = mean(intensity),             int_max = max(intensity), .groups = \"drop\") %>%    # Need to complete time series in case of years with no MHWs in order to get full ts in trend analysis   complete(year = 1982:2018) %>%    dplyr::select(-event) %>%    pivot_longer(-c(year), names_to = 'Metrics', values_to = 'values') %>%    replace(is.na(.), 0)  # Plot the data p <- ggplot(MHW_WA_metrics_year, aes(x = year, y = values)) +   geom_point() +   geom_line() +   geom_smooth(se = T, method = 'lm') +   labs(x = \"Year\") +    facet_wrap(~Metrics, scales = 'free') +   theme_bw() +    theme(legend.position = \"none\")  p  # Coerce to plotly # plotly::ggplotly(p) MHW_WA_trends <- MHW_WA_metrics_year %>%    group_by(Metrics) %>%    nest() %>%    mutate(ts_out = purrr::map(data, ~ts(.x$values, start = 1982, end = 2018, frequency = 1))) %>%    mutate(sens = purrr::map(ts_out, ~sens.slope(.x, conf.level = 0.95)),           pettitt = purrr::map(ts_out, ~pettitt.test(.x)),          lm = purrr::map(data,~lm(values ~ year, .x))) %>%    mutate(Sens_Slope = as.numeric(unlist(sens)[1]),          P_Value = as.numeric(unlist(sens)[3]),          Change_Point_Year = time(ts_out[[1]])[as.numeric(unlist(pettitt)[3])],          Change_Point_pvalue = as.numeric(unlist(pettitt)[4]),          lm_slope = unlist(lm)$coefficients.year) %>%   # Add step of cutting time series in 2 using Change_Point_Year    mutate(pre_ts = purrr::map(ts_out,~window(.x, start = 1982, end = Change_Point_Year)),          post_ts = purrr::map(ts_out,~window(.x, start = Change_Point_Year, end = 2018))) %>%    # Add step of calculating sen's slope and p-value to pre and post change point year   mutate(sens_pre = purrr::map(pre_ts, ~sens.slope(.x, conf.level = 0.95)),          Sens_Slope_pre = as.numeric(unlist(sens_pre)[1]),          P_Value_pre = as.numeric(unlist(sens_pre)[3]),          sens_post = purrr::map(post_ts, ~sens.slope(.x, conf.level = 0.95)),          Sens_Slope_post = as.numeric(unlist(sens_post)[1]),          P_Value_post = as.numeric(unlist(sens_post)[3])) %>%    dplyr::select(Metrics, Sens_Slope, P_Value, Change_Point_Year, Change_Point_pvalue,                  lm_slope, Sens_Slope_pre, P_Value_pre, Sens_Slope_post, P_Value_post)  # Create table kable(MHW_WA_trends, caption = \"Table 3 - Sens's Slope and p-value.\")  %>%   kable_classic()"},{"path":[]},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/MHW_to_nc.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Saving MHW Results to NetCDF","text":"previous vignette saw detect marine heatwaves (MHWs) gridded data. vignette use gridded MHW results see save NetCDF file.","code":"library(dplyr) # For basic data manipulation library(ncdf4) # For creating NetCDF files library(tidync) # For easily dealing with NetCDF data library(ggplot2) # For visualising data library(doParallel) # For parallel processing"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/MHW_to_nc.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"Loading data","title":"Saving MHW Results to NetCDF","text":"Please see downloading preparing OISST data detecting marine heatwaves (MHWs) gridded data vignettes first yet worked . using MHW results created two vignettes .","code":"MHW_res_grid <- readRDS(\"~/Desktop/MHW_result.Rds\")"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/MHW_to_nc.html","id":"prepare-the-data","dir":"Articles","previous_headings":"","what":"Prepare the data","title":"Saving MHW Results to NetCDF","text":"main sticking point MHW results NetCDF file format R NetCDF files accept file type R known “arrays”, R outputs data.frames. majority need convert data data.frames arrays. many ways search interwebs produce plethora results. years settled approach use operationally MHW Tracker also use . necessarily fastest method, use fewest lines code possible, follow tidyverse approach programming, think transparent process can . create two functions help us along process.","code":"# Function for creating arrays from data.frames df_acast <- function(df, lon_lat){      # Force grid   res <- df %>%     right_join(lon_lat, by = c(\"lon\", \"lat\")) %>%     arrange(lon, lat)      # Convert date values to integers if they are present   if(lubridate::is.Date(res[1,4])) res[,4] <- as.integer(res[,4])      # Create array   res_array <- base::array(res[,4], dim = c(length(unique(lon_lat$lon)), length(unique(lon_lat$lat))))   dimnames(res_array) <- list(lon = unique(lon_lat$lon),                               lat = unique(lon_lat$lat))   return(res_array) }  # Wrapper function for last step before data are entered into NetCDF files df_proc <- function(df, col_choice){      # Determine the correct array dimensions   lon_step <- mean(diff(sort(unique(df$lon))))   lat_step <- mean(diff(sort(unique(df$lat))))   lon <- seq(min(df$lon), max(df$lon), by = lon_step)   lat <- seq(min(df$lat), max(df$lat), by = lat_step)      # Create full lon/lat grid   lon_lat <- expand.grid(lon = lon, lat = lat) %>%      data.frame()      # Acast only the desired column   dfa <- plyr::daply(df[c(\"lon\", \"lat\", \"event_no\", col_choice)],                       c(\"event_no\"), df_acast, .parallel = T, lon_lat = lon_lat)   return(dfa) }  # We must now run this function on each column of data we want to add to the NetCDF file doParallel::registerDoParallel(cores = 7) prep_dur <- df_proc(MHW_res_grid, \"duration\") prep_max_int <- df_proc(MHW_res_grid, \"intensity_max\") prep_cum_int <- df_proc(MHW_res_grid, \"intensity_cumulative\") prep_peak <- df_proc(MHW_res_grid, \"date_peak\")"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/MHW_to_nc.html","id":"create-netcdf-shell","dir":"Articles","previous_headings":"","what":"Create NetCDF shell","title":"Saving MHW Results to NetCDF","text":"data prepared series arrays, now need set stage NetCDF file. important thing dimensions arrays created match dimensions NetCDF file.","code":"# Get file attributes lon_step <- mean(diff(sort(unique(MHW_res_grid$lon)))) lat_step <- mean(diff(sort(unique(MHW_res_grid$lat)))) lon <- seq(min(MHW_res_grid$lon), max(MHW_res_grid$lon), by = lon_step) lat <- seq(min(MHW_res_grid$lat), max(MHW_res_grid$lat), by = lat_step) event_no <- seq(min(MHW_res_grid$event_no), max(MHW_res_grid$event_no), by = 1) tunits <- \"days since 1970-01-01\"  # Length of each attribute nlon <- length(lon) nlat <- length(lat) nen <- length(event_no)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/MHW_to_nc.html","id":"create-netcdf-file","dir":"Articles","previous_headings":"","what":"Create NetCDF file","title":"Saving MHW Results to NetCDF","text":"last step process add prepared data NetCDF shell constructed. ncdf4 package helps make relatively straight forward process.","code":"# Path and file name   # NB: We are net setting time dimensions here because we are using event_no as our \"time\" dimension ncpath <- \"~/Desktop/\" ncname <- \"MHW_results\" ncfname <- paste0(ncpath, ncname, \".nc\") # dname <- \"tmp\"  # Define dimensions londim <- ncdim_def(\"lon\", \"degrees_east\", lon) latdim <- ncdim_def(\"lat\", \"degrees_north\", lat) endim <- ncdim_def(\"event_no\", \"event_number\", event_no) # timedim <- ncdim_def(\"time\", tunits, as.double(time))  # Define variables fillvalue <- 1e32 def_dur <- ncvar_def(name = \"duration\", units = \"days\", dim = list(endim, latdim, londim),                       missval = fillvalue, longname = \"duration of MHW\", prec = \"double\") def_max_int <- ncvar_def(name = \"max_int\", units = \"deg_c\", dim = list(endim, latdim, londim),                           missval = fillvalue, longname = \"maximum intensity during MHW\", prec = \"double\") def_cum_int <- ncvar_def(name = \"cum_int\", units = \"deg_c days\", dim = list(endim, latdim, londim),                           missval = fillvalue, longname = \"cumulative intensity during MHW\", prec = \"double\") def_peak <- ncvar_def(name = \"date_peak\", units = tunits, dim = list(endim, latdim, londim),                       missval = 0, longname = \"date of peak temperature anomaly during MHW\", prec = \"integer\")  # Create netCDF file and prepare space for our arrays ncout <- nc_create(ncfname, list(def_peak, def_dur, def_max_int, def_cum_int), force_v4 = TRUE)  # Add the actual data ncvar_put(ncout, def_dur, prep_dur) ncvar_put(ncout, def_max_int, prep_max_int) ncvar_put(ncout, def_cum_int, prep_cum_int) ncvar_put(ncout, def_peak, prep_peak)  # Put additional attributes into dimension and data variables ncatt_put(ncout, \"lon\", \"axis\", \"X\") #,verbose=FALSE) #,definemode=FALSE) ncatt_put(ncout, \"lat\", \"axis\", \"Y\") ncatt_put(ncout, \"event_no\", \"axis\", \"event_no\")  # Add global attributes   # These are useful for whomever else may want to use your NetCDF file ncatt_put(ncout, 0, \"title\", paste0(\"MHW results from lon: \",                                     min(lon),\" to \",max(lon),                                     \" and lat: \",min(lat),\" to \",max(lat))) ncatt_put(ncout, 0, \"institution\", \"Your institution here!\") ncatt_put(ncout, 0, \"source\", \"NOAA OISST v2.1\") ncatt_put(ncout,0, \"references\", \"Banzon et al. (2020) J. Atmos. Oce. Tech. 37:341-349\") history <- paste0(\"Your name here!, \", date()) ncatt_put(ncout, 0, \"history\", history) ncatt_put(ncout, 0, \"Conventions\", \"Hobday et al. (2016)\") # Assuming one has used the Hobday definition  # Get a summary of the created file: ncout"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/MHW_to_nc.html","id":"visualising-the-results","dir":"Articles","previous_headings":"","what":"Visualising the results","title":"Saving MHW Results to NetCDF","text":"Let’s stop . ensure NetCDF file created correctly want load back workspace plot results.","code":"# Convenience function for comparing files quick_grid <- function(df, var_choice){   df %>%      filter(event_no == 13) %>%      ggplot(aes(x = lon, y = lat)) +     geom_raster(aes_string(fill = var_choice)) +     coord_cartesian(expand = F) +     scale_fill_viridis_c() +     theme(legend.position = \"bottom\") }  # Thanks to the tidync package, loading the gridded data is very simple MHW_res_nc <- tidync(\"~/Desktop/MHW_results.nc\") %>%    hyper_tibble() %>%    mutate(date_peak = as.Date(date_peak, origin = \"1970-01-01\"))  # Plot the duration results quick_grid(MHW_res_grid, \"duration\") quick_grid(MHW_res_nc, \"duration\")  # Cumulative intensity quick_grid(MHW_res_grid, \"intensity_cumulative\") quick_grid(MHW_res_nc, \"cum_int\")"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Downloading and Preparing NOAA OISST Data","text":"NB: NOAA dataset listed vignette often available server given . Given current climate USA advised defer data products organisations, CMEMS, whenever possible. vignette see retrieve prepare Reynolds optimally interpolated sea surface temperature (OISST) data calculating marine heatwaves (MHWs). OISST product global 1/4 degree gridded dataset Advanced High Resolution Radiometer (AVHRR) derived SSTs daily resolution, starting 1 September 1981. source data currently NOAA NCDC. daily global file, compressed, around 8.3 MB, add large amount data time series recommended 30 year minimum duration detection MHWs downloaded. one download data currently available exceed 100 GB total disk space. therefore best practice download subset data matches one’s study area. Thanks rerddap package incredibly easy R. one want download full global dataset, daily global file available netCDF format roughly 1.6 MB. means one full year global data roughly 600 MB, full dataset roughly 25 GB. however data compressed. attempt load entire uncompressed dataset memory take 200 GB RAM. well beyond scope current laptop second half vignette see download full OISST dataset seeing can load subset data R environment use analyses. vignette may appear long complex written attempt keep process downloading working satellite data straight-forward easy follow possible. begin code etc. please note almost applications necessary use first method outlined . users second download method vignette can simply skipped. NB: Please note functions used vignette come heatwaveR package. one encounters issues following code, likely due external function. One may note package function comes looking left :: code. example, rerddap::griddap() means griddap() function maintained authors rerddap package errors caused function directed .","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Downloading and Preparing NOAA OISST Data","text":"vignette accessing NOAA OISST dataset ERDDAP server subsetted data, global data indexed . One may download data servers manually using ERDDAP UI clicking indexed file individually. programming languages like R designed prevent us needing experience sort anguish. load libraries need order R download data may need. lines code following chunk run means need first install package. Uncomment line code install problem package run trying load library . packages loaded may now begin downloading preparing data use. Please use table contents right side screen jump different download methods desired. break different method smaller steps order keep process clear possible. begin need stress direct unrestricted method accessing data urge responsibility downloading much data necessary. Please download entire dataset unless specific need .","code":"# The packages we will need # install.packages(\"dplyr\") # install.packages(\"lubridate\") # install.packages(\"ggplot2\") # install.packages(\"tidync\") # install.packages(\"doParallel\") # install.packages(\"rerddap\") # install.packages(\"plyr\") # Note that this library should never be loaded, only installed  # The packages we will use library(dplyr) # A staple for modern data management in R library(lubridate) # Useful functions for dealing with dates library(ggplot2) # The preferred library for data visualisation library(tidync) # For easily dealing with NetCDF data library(rerddap) # For easily downloading subsets of data library(doParallel) # For parallel processing"},{"path":[]},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"file-information","dir":"Articles","previous_headings":"Downloading subsetted data","what":"File information","title":"Downloading and Preparing NOAA OISST Data","text":"begin downloading subsetted data study area need make sure currently available ERDDAP server. location NOAA OISST data changed past assumed current location exist perpetuity. Finding server data located can cup game times. target dataset identified may now begin download rerddap::griddap() function. Note ERDDAP server like one tries access nine consecutive years data one request, regardless spatial extent requested. download data going make wrapper function helps us control range times want download. reduce amount redundant coding otherwise need .","code":"# The information for the NOAA OISST data rerddap::info(datasetid = \"ncdcOisst21Agg_LonPM180\", url = \"https://coastwatch.pfeg.noaa.gov/erddap/\")  # Note that there is also a version with lon values from 0 yo 360 rerddap::info(datasetid = \"ncdcOisst21Agg\", url = \"https://coastwatch.pfeg.noaa.gov/erddap/\")"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"download-function","dir":"Articles","previous_headings":"Downloading subsetted data","what":"Download function","title":"Downloading and Preparing NOAA OISST Data","text":"wrapper function see chosen download ‘sst’ data several variables (‘fields’) available us. also see chosen spatial extent latitude -40 -35 longitude 15 21. small window Agulhas Retroflection south west South Africa. larger area chosen simply due speed constraints downloading data detecting events therein. One may simply change longitude latitude values necessary match desired study area. function also re-labelling ‘time’ column ‘t’, ‘sst’ column ‘temp’. match default column names expected calculating MHWs won’t extra work later . One must note depending RAM available one’s machine, may possible handle data downloaded large (e.g. > 5 GB). discussion limitations R language due dependence virtual memory beyond scope vignette, one limits one’s downloads several square pixels time fine. one try download whole Indian Ocean, example, may cause issues run laptop computer similar power.","code":"# This function downloads and prepares data based on user provided start and end dates OISST_sub_dl <- function(time_df){   OISST_dat <- rerddap::griddap(datasetx = \"ncdcOisst21Agg_LonPM180\",                                 url = \"https://coastwatch.pfeg.noaa.gov/erddap/\",                                  time = c(time_df$start, time_df$end),                                  zlev = c(0, 0),                                 latitude = c(-40, -35),                                 longitude = c(15, 21),                                 fields = \"sst\")$data |>      dplyr::mutate(time = base::as.Date(stringr::str_remove(time, \"T12:00:00Z\"))) |>      dplyr::rename(t = time, temp = sst, lon = longitude, lat = latitude) |>      dplyr::select(lon, lat, t, temp) |>      stats::na.omit() }"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"date-range","dir":"Articles","previous_headings":"Downloading subsetted data","what":"Date range","title":"Downloading and Preparing NOAA OISST Data","text":"wrapper function written now need run several times order grab OISST data 1982-01-01 2019-12-31. Even though year data extent used vignette ~360 KB, server like 9 years consecutive data requested. server also end users connection ~17 individual files requested. can’t download data one request, can’t download data one year time, need make requests multiple batches data. accomplish create dataframe start end dates allow us automate entire download meeting aforementioned criteria.","code":"# Date download range by start and end dates per year dl_years <- data.frame(date_index = 1:5,                        start = c(\"1982-01-01\", \"1990-01-01\",                                   \"1998-01-01\", \"2006-01-01\", \"2014-01-01\"),                        end = c(\"1989-12-31\", \"1997-12-31\",                                 \"2005-12-31\", \"2013-12-31\", \"2019-12-31\"))"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"downloadprep-data","dir":"Articles","previous_headings":"Downloading subsetted data","what":"Download/prep data","title":"Downloading and Preparing NOAA OISST Data","text":"One also use plyr suite functions automate process downloading processing multiple files, ’ve chosen stick tidyverse native approach. chunk code fails times , simply re-run data downloaded. worth pointing data downloaded cached files users computer using hoardr package. means one runs command , re-download data first looks folder automatically cached data sees may simply draw data . need change anything write second script loading data. code chunk giving errors likely due one’s Internet connection timing . also rare instances NOAA server responding due issue end. connection based issues may resolved simply waiting minutes, ensuring stable connection.","code":"# Download all of the data with one nested request # The time this takes will vary greatly based on connection speed base::system.time(   OISST_data <- dl_years |>      dplyr::group_by(date_index) |>      dplyr::group_modify(~OISST_sub_dl(.x)) |>      dplyr::ungroup() |>      dplyr::select(lon, lat, t, temp) ) # 518 seconds, ~100 seconds per batch"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"visualise-data","dir":"Articles","previous_headings":"Downloading subsetted data","what":"Visualise data","title":"Downloading and Preparing NOAA OISST Data","text":"save data later use good practice visualise .","code":"OISST_data |>    dplyr::filter(t == \"2019-12-01\") |>    ggplot2::ggplot(aes(x = lon, y = lat)) +   ggplot2::geom_tile(aes(fill = temp)) +   # ggplot2::borders() + # Activate this line to see the global map   ggplot2::scale_fill_viridis_c() +   ggplot2::coord_quickmap(expand = F) +   ggplot2::labs(x = NULL, y = NULL, fill = \"SST (°C)\") +   ggplot2::theme(legend.position = \"bottom\")"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"save-data","dir":"Articles","previous_headings":"Downloading subsetted data","what":"Save data","title":"Downloading and Preparing NOAA OISST Data","text":"data downloaded prepared use (test visual run), ’s left save . Note chosen save file desktop. normally one (hopefully!) save file. Rather one saving data project folder one working. next vignette see detect MHWs gridded data using data downloaded .","code":"# Save the data as an .Rds file because it has a much better compression rate than .RData base::saveRDS(OISST_data, file = \"~/Desktop/OISST_vignette.Rds\")"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"downloading-global-data","dir":"Articles","previous_headings":"","what":"Downloading global data","title":"Downloading and Preparing NOAA OISST Data","text":"method downloading preparing NOAA OISST data outlined first half vignette considered best practice applications except specifically need look entire globe. one needs download global dataset preferable go straight source. Note one may still download full global dataset using methods setting lon/lat extent full width height globe. method outlined download 13,000 individual files. makes dealing individual files easy, agglomerating one file can time consuming.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"file-information-1","dir":"Articles","previous_headings":"Downloading global data","what":"File information","title":"Downloading and Preparing NOAA OISST Data","text":"first step downloading full global dataset tell computer . automated way requires couple additional packages aim keep vignette simple direct possible. purposes today manually create URLs files want download.","code":"# First we tell R where the data are on the interwebs OISST_base_url <- \"https://www.ncei.noaa.gov/data/sea-surface-temperature-optimum-interpolation/v2.1/access/avhrr/\" # Note that one may go to this URL in any web browser to manually inspect the files  # Now we create a data.frame that contains all of the dates we want to download   # NB: In order to change the dates download changes the dates in the following line OISST_dates <- base::data.frame(t = seq(as.Date(\"2019-12-01\"), as.Date(\"2019-12-31\"), by = \"day\"))  # To finish up this step we add some text to those dates so they match the OISST file names OISST_files <- OISST_dates |>    dplyr::mutate(t_day = base::gsub(\"-\", \"\", t),                 t_month = base::substr(t_day, 1, 6),                 t_year = lubridate::year(t),                 file_name = base::paste0(OISST_base_url, t_month, \"/\", \"oisst-avhrr-v02r01.\", t_day ,\".nc\"))"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"download-data","dir":"Articles","previous_headings":"Downloading global data","what":"Download data","title":"Downloading and Preparing NOAA OISST Data","text":"Now dataframe contains URLs files want download ’ll create function crawl URLs download files us.","code":"# This function will go about downloading each day of data as a NetCDF file # Note that this will download files into a 'data/OISST' folder in the root directory   # If this folder does not exist it will create it   # If it does not automatically create the folder it will need to be done manually   # The folder that is created must be a new folder with no other files in it   # A possible bug with netCDF files in R is they won't load correctly from    # existing folders with other file types in them # This function will also check if the file has been previously downloaded   # If it has it will not download it again OISST_url_daily_dl <- function(target_URL){   base::dir.create(\"~/data/OISST\", showWarnings = F)   file_name <- base::paste0(\"~/data/OISST/\",base::sapply(base::strsplit(target_URL, split = \"/\"), \"[[\", 10))   if(!base::file.exists(file_name)) utils::download.file(url = target_URL, method = \"libcurl\", destfile = file_name) }  # The more cores used, the faster the data may be downloaded   # It is best practice to not use all of the cores on one's machine   # The laptop on which I am running this code has 8 cores, so I use 7 here doParallel::registerDoParallel(cores = 7)  # And with that we are clear for take off base::system.time(plyr::l_ply(OISST_files$file_name, .fun = OISST_url_daily_dl, .parallel = T)) # ~15 seconds  # In roughly 15 seconds a user may have a full month of global data downloaded # This scales well into years and decades, and is much faster with more cores # Download speeds will also depend on the speed of the users internet connection"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"load-data","dir":"Articles","previous_headings":"Downloading global data","what":"Load data","title":"Downloading and Preparing NOAA OISST Data","text":"following code chunk contains function may use load prepare OISST data use R. code chunk chosen spatial extent longitude 270 320 latitude 30 50. window Atlantic Coast North America. One may simply change lon/lat values necessary match desired study area. function also re-labels ‘time’ column ‘t’, ‘sst’ column ‘temp’. now match default column names expected calculating MHWs won’t extra work later . , please note trying load much data may much RAM one’s machine. running code causes one’s machine hang, try loading smaller subset data. make friends someone server sized machine.","code":"# This function will load and subset daily data into one data.frame # Note that the subsetting by lon/lat is done before the data are loaded   # This means it will use much less RAM and is viable for use on most laptops   # Assuming one's study area is not too large OISST_load <- function(file_name, lon1, lon2, lat1, lat2){       OISST_dat <- tidync::tidync(file_name) |>         tidync::hyper_filter(lon = dplyr::between(lon, lon1, lon2),                              lat = dplyr::between(lat, lat1, lat2)) |>          tidync::hyper_tibble(select_var = c(\"sst\"), drop = FALSE) |>          dplyr::select(lon, lat, time, sst) |>          dplyr::rename(t = time, temp = sst) |>          dplyr::mutate(t = as.Date(t),                       lon = as.numeric(lon),                       lat = as.numeric(lat))       return(OISST_dat) }  # Locate the files that will be loaded OISST_files <- dir(\"~/data/OISST\", full.names = T)  # Load the data in parallel OISST_dat <- plyr::ldply(.data = OISST_files[1:365], .fun = OISST_load, .parallel = T,                          lon1 = 270, lon2 = 320, lat1 = 30, lat2 = 50)  # It should only take a few seconds to load one month of data depending on the size of the lon/lat extent chosen"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/OISST_preparation.html","id":"visualise-data-1","dir":"Articles","previous_headings":"Downloading global data","what":"Visualise data","title":"Downloading and Preparing NOAA OISST Data","text":"always good visualise data early often workflow. code pipeline shows can visualise day data ’ve loaded. next vignette see detect MHWs gridded data.","code":"OISST_dat |>    dplyr::filter(t == \"2019-12-01\") |>    ggplot2::ggplot(aes(x = lon, y = lat)) +   ggplot2::geom_tile(aes(fill = temp)) +   ggplot2::scale_fill_viridis_c() +   ggplot2::coord_quickmap(expand = F) +   ggplot2::labs(x = NULL, y = NULL, fill = \"SST (°C)\") +   ggplot2::theme(legend.position = \"bottom\")"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/complex_clims.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Alternative Thresholds","text":"heatwaveR package designed include many different methods creation climatologies thresholds detecting extremes events (e.g. heatwaves cold-spells) time series data. end made large change event detection pipeline moved RmarineHeatWaves package heatwaveR. change may primarily seen inclusion ts2clm() function removal climatology performed RmarineHeatWaves::detect() favour detect_event(), calculate climatologies. way allowed introduction multitude complex climatology calculation event detection/filtering methods. overarching goal provide one package allows climate scientists calculate events atmosphere oceans. rather talking , let’s walk case studies package can used diverse applications.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/complex_clims.html","id":"double-thresholds","dir":"Articles","previous_headings":"","what":"Double thresholds","title":"Alternative Thresholds","text":"Brought attention Mr. Haouari Hydrometeorological Institute Training Research (IHFR) Algeria concept using flat (e.g. 19∘^\\circC) tMin bottom boundary calculating events tMax standard 90th percentile upper threshold. authors heatwaveR package admittedly marine oriented, tend work daily time series one mean value per day (e.g. tMean, temp, sst). arguments heatwaveR suite functions call tMin tMax explicitly, mean one . work steps one take calculate (atmospheric) heatwaves, per definition Perkins Alexander (2013) (excluding calculation EHF), additional step proposed Mr. Haouari. following sub-sections show step--step process one may use calculate atmospheric heatwaves using 90th percentile threshold created tMax time series location, use days corresponding tMin also exceeds pre-determined flat bottom boundary days quantify heatwave metrics. finish visualising results built-heatwaveR graphing functions event_line() lolli_plot well bubble plot. data use examples 45 year time series daily atmospheric tMin tMax temperatures Algiers, Algeria contributed Mr. Haouari.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/complex_clims.html","id":"data-prep","dir":"Articles","previous_headings":"Double thresholds","what":"Data prep","title":"Alternative Thresholds","text":"first step analysis R loading packages used. libraries loaded, now go explicitly calling Algiers data environment. data automatically loaded us load heatwaveR library, perform step just clarity. Anyone following along feel free use whatever data like. long data date (t), tMin, tMax column code function designed.","code":"library(dplyr) library(ggpubr) library(heatwaveR) Algiers <- Algiers"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/complex_clims.html","id":"calculating-thresholds","dir":"Articles","previous_headings":"Double thresholds","what":"Calculating thresholds","title":"Alternative Thresholds","text":"libraries data loaded, now calculate two thresholds need correctly detect heatwaves accurately quantify metrics. first 90th percentile threshold based tMax time series. second flat exceedance 19∘^\\circC based tMin data. use 19∘^\\circC bottom threshold roughly mean tMin summer temperatures.","code":"# The tMax threshold # The current WMO standard climatology period is 1981-01-01 to 2010-12-31 and should be used when possible # We rather use 1961-01-01 to 1990-01-01 as this is the oldest 30 year period available in the data tMax_clim <- ts2clm(data = Algiers, y = tMax, climatologyPeriod = c(\"1961-01-01\", \"1990-12-31\"), pctile = 90)  # The tMin exceedance # Note the use here of 'minDuration = 3' and 'maxGap = 1' as the default atmospheric arguments # The default marine arguments are 'minDuration = 5' and 'maxGap = 2' tMin_exc <- exceedance(data = Algiers, y = tMin, threshold = 19, minDuration = 3, maxGap = 1)$threshold"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/complex_clims.html","id":"calculating-events","dir":"Articles","previous_headings":"Double thresholds","what":"Calculating events","title":"Alternative Thresholds","text":"Now two thresholds calculated use detect_event() function usual, provide second threshold argument threshClim2 normally lay dormant. Please note even though use second threshold allow resultant event metrics differ, values still calculated seasonal climatology daily temperatures time series given 90th percentile threshold calculation (case tMax) using second threshold (case tMin) won’t generally much effect event metrics. Rather mostly screens smaller larger events depending one chooses set threshold. case exceedance threshold chosen temperature typically occur summer (e.g. 19∘^\\circC, used ), one also effectively screening events season. many use cases desirable. example, one interested events occur season night time heat stress becomes issue young elderly.","code":"# Note that because we calculated our 90th percentile threshold on a column named 'tMax'  # and not the default column name 'temp', we must specify this below with 'y = tMax' events <- detect_event(data = tMax_clim, y = tMax, # The 90th percentile threshold                        threshClim2 = tMin_exc$exceedance) # The flat exceedance threshold"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/complex_clims.html","id":"creating-visuals","dir":"Articles","previous_headings":"Double thresholds","what":"Creating visuals","title":"Alternative Thresholds","text":"Even though used two thresholds calculate events, results output though one threshold (default) used. means may use visualisation functions come heatwaveR without extra fuss.","code":"# The code to create a bubble plot for the heatwave results bubble_plot <- ggplot(data = events$event, aes(x = date_peak, y = intensity_max)) +   geom_point(aes(size = intensity_cumulative), shape = 21, fill = \"salmon\", alpha = 0.8) +   labs(x = NULL, y = \"Maximum Intensity [°C] \", size = \"Cumulative Intensity [°C x days]\") +   scale_size_continuous(range = c(1, 10),                          guide = guide_legend(title.position = \"top\", direction = \"horizontal\")) +   theme_bw() +   theme(legend.position = c(0.3, 0.12),         legend.box.background = element_rect(colour = \"black\"))  # Don't forget to set 'event_line(y = tMax)' ggarrange(event_line(events, y = tMax, metric = intensity_max),           event_line(events, y = tMax, metric = intensity_max, category = T),           lolli_plot(events),           bubble_plot,           ncol = 2, nrow = 2, align = \"hv\")"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/complex_clims.html","id":"alternative-second-thresholds","dir":"Articles","previous_headings":"Double thresholds","what":"Alternative second thresholds","title":"Alternative Thresholds","text":"Using percentile based second threshold much different using static second threshold. Rather using exceedance() get second threshold can use ts2clm nested within detect_event(). must also pointed addition using multiple thresholds, can adjust minimum duration (minDuration) maximum gap (maxGap) arguments multiple thresholds, . allows us provide different ‘flavours’ criteria events. example, let’s say interested night-time events (tMin) temperatures remain 80th percentile threshold (pctile = 80) 10 days (minDuration = 10) without dipping threshold 2 consecutive days (maxGap = 2). top , also interested parts event daytime temperatures exceed 90th percentile threshold (pctile = 90) 3 days (minDuration = 3) non-stop (maxGap = 0). look detect/calculate events meet rather specific criteria. also calculate events just first threshold compare results visually. must noted whichever criteria strict, case minDuration = 3 maxGap = 0, predominant filter event metrics quantified. differences lolliplot format:  brief display top events method: look results see use two thresholds detected fewer events use one threshold. even though second threshold much ‘difficult’ time series surpass first, heatwaves time series pronounced emerge regardless. method allows lot flexibility, users also cautious understand exactly asking machines . case , may actually prefer calculate event metrics based entirely first threshold, filter events didn’t meet second threshold criteria. see following section.","code":"# Note that because we are not using the standard column name 'temp' we must # specify the chosen column name twice, once for ts2clm() and again for detect_event()  # First threshold based on tMin thresh_tMin <- ts2clm(data = Algiers, y = tMin, pctile = 80,                        climatologyPeriod = c(\"1961-01-01\", \"1990-12-31\"))  # Second threshold based on tMax # Be careful here that you put the arguments within the correct brackets thresh_tMax <- detect_event(ts2clm(data = Algiers, y = tMax, pctile = 90,                                     climatologyPeriod = c(\"1961-01-01\", \"1990-12-31\")),                             # These arguments are passed to detect_event(), not ts2clm()                             minDuration = 3, maxGap = 0, y = tMax, protoEvents = T)  # Detect/calculate events using the two precalculated thresholds # Because detect_event() is not able to deduce which arguments we used above, # we must again tell it explicitly here events_two_thresh <- detect_event(data = thresh_tMin, y = tMin, minDuration = 10, maxGap = 2,                                   threshClim2 = thresh_tMax$event, minDuration2 = 3, maxGap2 = 0)  # Or to simply use one threshold events_one_thresh <- detect_event(data = thresh_tMin, y = tMin, minDuration = 10, maxGap = 2) ggarrange(lolli_plot(events_one_thresh), lolli_plot(events_two_thresh), labels = c(\"One threshold\", \"Two thresholds\")) head(events_one_thresh$event) ##   event_no index_start index_peak index_end duration date_start  date_peak ## 1        1        6135       6137      6144       10 1977-10-18 1977-10-20 ## 2        2       10844      10845     10856       13 1990-09-09 1990-09-10 ## 3        3       11191      11200     11201       11 1991-08-22 1991-08-31 ## 4        4       13292      13300     13301       10 1997-05-23 1997-05-31 ## 5        5       15534      15542     15546       13 2003-07-13 2003-07-21 ##     date_end intensity_mean intensity_max intensity_var intensity_cumulative ## 1 1977-10-27         6.3138        9.4382        2.2112              63.1381 ## 2 1990-09-21         4.8424        7.1201        1.1790              62.9507 ## 3 1991-09-01         4.2121        6.9957        1.3819              46.3328 ## 4 1997-06-01         5.1003        6.9670        1.4467              51.0026 ## 5 2003-07-25         4.9539        7.8255        1.5317              64.4012 ##   intensity_mean_relThresh intensity_max_relThresh intensity_var_relThresh ## 1                   3.7265                  6.8697                  2.2268 ## 2                   2.1077                  4.3639                  1.1767 ## 3                   1.5352                  4.2877                  1.3602 ## 4                   2.3915                  4.3123                  1.4514 ## 5                   2.4188                  5.3032                  1.5337 ##   intensity_cumulative_relThresh intensity_mean_abs intensity_max_abs ## 1                        37.2652            19.1700              22.6 ## 2                        27.4000            21.9538              24.6 ## 3                        16.8871            22.6091              25.1 ## 4                        23.9148            18.4400              20.7 ## 5                        31.4441            23.6154              26.6 ##   intensity_var_abs intensity_cumulative_abs rate_onset rate_decline ## 1            2.4454                    191.7     2.7282       0.8901 ## 2            1.2474                    285.4     2.9576       0.3342 ## 3            1.2169                    248.7     0.5665       2.5287 ## 4            1.5284                    184.4     0.6922       3.4156 ## 5            1.5737                    307.0     0.6559       1.2658 head(events_two_thresh$event) ##   event_no index_start index_peak index_end duration date_start  date_peak ## 1        1        6135       6137      6137        3 1977-10-18 1977-10-20 ## 2        2       10851      10851     10856        6 1990-09-16 1990-09-16 ## 3        3       11191      11200     11201       11 1991-08-22 1991-08-31 ## 4        4       13292      13294     13294        3 1997-05-23 1997-05-25 ## 5        5       15540      15542     15545        6 2003-07-19 2003-07-21 ##     date_end intensity_mean intensity_max intensity_var intensity_cumulative ## 1 1977-10-20         7.8121        9.4382        1.6787              23.4362 ## 2 1990-09-21         4.6254        6.2445        1.1706              27.7521 ## 3 1991-09-01         4.2121        6.9957        1.3819              46.3328 ## 4 1997-05-25         4.5271        5.5434        1.0897              13.5814 ## 5 2003-07-24         5.5217        7.8255        1.6801              33.1301 ##   intensity_mean_relThresh intensity_max_relThresh intensity_var_relThresh ## 1                   5.2521                  6.8697                  1.6710 ## 2                   1.9070                  3.5148                  1.1701 ## 3                   1.5352                  4.2877                  1.3602 ## 4                   1.7688                  2.7948                  1.0998 ## 5                   3.0012                  5.3032                  1.6827 ##   intensity_cumulative_relThresh intensity_mean_abs intensity_max_abs ## 1                        15.7562            21.1000              22.6 ## 2                        11.4419            21.4667              23.3 ## 3                        16.8871            22.6091              25.1 ## 4                         5.3064            17.4667              18.6 ## 5                        18.0071            24.3167              26.6 ##   intensity_var_abs intensity_cumulative_abs rate_onset rate_decline ## 1            1.5524                     63.3     2.7282       1.9769 ## 2            1.1776                    128.8     0.9760       0.5396 ## 3            1.2169                    248.7     0.5665       2.5287 ## 4            1.2055                     52.4     1.7839       0.1172 ## 5            1.7034                    145.9     0.7293       1.0585"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/complex_clims.html","id":"filtering-with-a-second-threshold","dir":"Articles","previous_headings":"","what":"Filtering with a second threshold","title":"Alternative Thresholds","text":"methodology outlined detection filtering events two thresholds somewhat cumbersome. potential issue technique multiple filters affect calculation event metrics (e.g. intensity_cumulative), primary threshold given detect_event() used calculating event metrics. may however desired case one still interested knowing cumulative intensity given percentile threshold, wants filter full event based threshold criteria. can imagine real-world use cases scenarios, seemingly less sophisticated approach detailed .","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/complex_clims.html","id":"filtering-events","dir":"Articles","previous_headings":"Filtering with a second threshold","what":"Filtering events","title":"Alternative Thresholds","text":"already calculated single threshold events (events_one_thresh) second threshold (thresh_tMax) may directly begin filtering results. , let’s pull list components results dataframes easier use line. things may get tricky users, default use functions heatwaveR package ends. now going ‘-road’ speak. despair! tidyverse suite packages makes data wrangling like much user friendly dark days Base R coding. order make filtering events easier, combine two different dataframes using threshold/filtering guides chose events meet selection criteria. filtering guide created, may now apply events_one_thresh get filtered results. event numbers found events_one_thresh_filtered event numbers found events_two_thresh important difference event metrics events_two_thresh calculated days exceeded thresholds, events events_one_thresh_filtered metrics calculated days exceeded first threshold.","code":"# Pull out each data.frame as their own object for easier use events_one_event <- events_one_thresh$event events_one_climatology <- events_one_thresh$climatology # Join the two threshold dataframes two_thresh <- left_join(events_one_climatology, thresh_tMax, by = c(\"t\"))  # Remove all days that did not qualify as events in both thresholds two_thresh_filtered <- two_thresh %>%   filter(event.x == TRUE,          event.y == TRUE) # Copy data with a new name events_one_thresh_filtered <- events_one_thresh  # Then filter events_one_thresh_filtered$event <- events_one_thresh_filtered$event %>%    filter(event_no %in% two_thresh_filtered$event_no.x)  # Compare results head(events_one_thresh_filtered$event) ##   event_no index_start index_peak index_end duration date_start  date_peak ## 1        1        6135       6137      6144       10 1977-10-18 1977-10-20 ## 2        2       10844      10845     10856       13 1990-09-09 1990-09-10 ## 3        3       11191      11200     11201       11 1991-08-22 1991-08-31 ## 4        4       13292      13300     13301       10 1997-05-23 1997-05-31 ## 5        5       15534      15542     15546       13 2003-07-13 2003-07-21 ##     date_end intensity_mean intensity_max intensity_var intensity_cumulative ## 1 1977-10-27         6.3138        9.4382        2.2112              63.1381 ## 2 1990-09-21         4.8424        7.1201        1.1790              62.9507 ## 3 1991-09-01         4.2121        6.9957        1.3819              46.3328 ## 4 1997-06-01         5.1003        6.9670        1.4467              51.0026 ## 5 2003-07-25         4.9539        7.8255        1.5317              64.4012 ##   intensity_mean_relThresh intensity_max_relThresh intensity_var_relThresh ## 1                   3.7265                  6.8697                  2.2268 ## 2                   2.1077                  4.3639                  1.1767 ## 3                   1.5352                  4.2877                  1.3602 ## 4                   2.3915                  4.3123                  1.4514 ## 5                   2.4188                  5.3032                  1.5337 ##   intensity_cumulative_relThresh intensity_mean_abs intensity_max_abs ## 1                        37.2652            19.1700              22.6 ## 2                        27.4000            21.9538              24.6 ## 3                        16.8871            22.6091              25.1 ## 4                        23.9148            18.4400              20.7 ## 5                        31.4441            23.6154              26.6 ##   intensity_var_abs intensity_cumulative_abs rate_onset rate_decline ## 1            2.4454                    191.7     2.7282       0.8901 ## 2            1.2474                    285.4     2.9576       0.3342 ## 3            1.2169                    248.7     0.5665       2.5287 ## 4            1.5284                    184.4     0.6922       3.4156 ## 5            1.5737                    307.0     0.6559       1.2658 head(events_two_thresh$event) ##   event_no index_start index_peak index_end duration date_start  date_peak ## 1        1        6135       6137      6137        3 1977-10-18 1977-10-20 ## 2        2       10851      10851     10856        6 1990-09-16 1990-09-16 ## 3        3       11191      11200     11201       11 1991-08-22 1991-08-31 ## 4        4       13292      13294     13294        3 1997-05-23 1997-05-25 ## 5        5       15540      15542     15545        6 2003-07-19 2003-07-21 ##     date_end intensity_mean intensity_max intensity_var intensity_cumulative ## 1 1977-10-20         7.8121        9.4382        1.6787              23.4362 ## 2 1990-09-21         4.6254        6.2445        1.1706              27.7521 ## 3 1991-09-01         4.2121        6.9957        1.3819              46.3328 ## 4 1997-05-25         4.5271        5.5434        1.0897              13.5814 ## 5 2003-07-24         5.5217        7.8255        1.6801              33.1301 ##   intensity_mean_relThresh intensity_max_relThresh intensity_var_relThresh ## 1                   5.2521                  6.8697                  1.6710 ## 2                   1.9070                  3.5148                  1.1701 ## 3                   1.5352                  4.2877                  1.3602 ## 4                   1.7688                  2.7948                  1.0998 ## 5                   3.0012                  5.3032                  1.6827 ##   intensity_cumulative_relThresh intensity_mean_abs intensity_max_abs ## 1                        15.7562            21.1000              22.6 ## 2                        11.4419            21.4667              23.3 ## 3                        16.8871            22.6091              25.1 ## 4                         5.3064            17.4667              18.6 ## 5                        18.0071            24.3167              26.6 ##   intensity_var_abs intensity_cumulative_abs rate_onset rate_decline ## 1            1.5524                     63.3     2.7282       1.9769 ## 2            1.1776                    128.8     0.9760       0.5396 ## 3            1.2169                    248.7     0.5665       2.5287 ## 4            1.2055                     52.4     1.7839       0.1172 ## 5            1.7034                    145.9     0.7293       1.0585"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/complex_clims.html","id":"visualising-filtered-events","dir":"Articles","previous_headings":"Filtering with a second threshold","what":"Visualising filtered events","title":"Alternative Thresholds","text":"better understand different results two different techniques may use lolliplots visualise . Difference duration (days) events given different applications thresholds. Note difference y-axes. Difference cumulative intensity (°C x days) events given different applications thresholds. Note difference y-axes. One may course visualise outputs events calculated geom_flame() geom_lolli() well, differ default method using functions outlined help files go .","code":"ggarrange(lolli_plot(events_two_thresh, metric = duration),            lolli_plot(events_one_thresh_filtered, metric = duration),            labels = c(\"Double threshold\", \"Filter threshold\")) ggarrange(lolli_plot(events_two_thresh, metric = intensity_cumulative),            lolli_plot(events_one_thresh_filtered, metric = intensity_cumulative),            labels = c(\"Double threshold\", \"Filter threshold\"))"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/complex_clims.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Alternative Thresholds","text":"vignette serves guideline implement multiple methodologies using two thresholds (tMin tMax) atmospheric data. also showed vignette straight forward approach using second threshold built-arguments detect_event(). use second threshold way, whether based static threshold one derived percentile, useful consideration events may specifically relevant given season organism. hope techniques shown vignette useful technically theoretically. authors heatwaveR happy receive input development package well potential methods calculating heatwaves cold-spells air sea.","code":""},{"path":[]},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/detection_and_visualisation.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"Basic Detection and Visualisation of Events","text":"detect_event() function core package, expects fed output second core function, ts2clm(). default, ts2clm() wants receive two-column dataframe one column labelled t containing date values, second column temp containing temperature values. Please note date format expects “YYYY-MM-DD”. example, please see top five rows one datasets included heatwaveR package: possible use different column names t temp calculate events. Please see help files ts2clm() detect_event() thorough explanation . Loading ones data .csv file text based format easiest approach calculation events, assuming one working gridded data (e.g. NetCDF). Please see vignette detailed walkthrough using functions package gridded data.","code":"head(heatwaveR::sst_WA) ## # A tibble: 6 × 2 ##   t           temp ##   <date>     <dbl> ## 1 1982-01-01  20.9 ## 2 1982-01-02  21.2 ## 3 1982-01-03  21.4 ## 4 1982-01-04  21.2 ## 5 1982-01-05  21.3 ## 6 1982-01-06  21.6"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/detection_and_visualisation.html","id":"calculating-marine-heatwaves-mhws","dir":"Articles","previous_headings":"","what":"Calculating marine heatwaves (MHWs)","title":"Basic Detection and Visualisation of Events","text":"ts2clm() detect_event() function applied Western Australia test data included package (sst_WA), also discussed Hobday et al. (2016):","code":"library(dplyr) library(ggplot2) library(heatwaveR)  # Detect the events in a time series ts <- ts2clm(sst_WA, climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\")) mhw <- detect_event(ts)  # View just a few metrics mhw$event %>%    dplyr::ungroup() %>%   dplyr::select(event_no, duration, date_start, date_peak, intensity_max, intensity_cumulative) %>%    dplyr::arrange(-intensity_max) %>%    head(5) ##   event_no duration date_start  date_peak intensity_max intensity_cumulative ## 1       52      105 2010-12-24 2011-02-28        6.5798             293.2107 ## 2       41       35 2008-03-25 2008-04-14        3.8299              79.3307 ## 3       29       95 1999-05-13 1999-05-22        3.6390             240.2994 ## 4       60       14 2012-12-27 2012-12-31        3.4230              32.2560 ## 5       59      101 2012-01-10 2012-01-27        3.3804             214.0509"},{"path":[]},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/detection_and_visualisation.html","id":"default-mhw-visuals","dir":"Articles","previous_headings":"Visualising marine heatwaves (MHWs)","what":"Default MHW visuals","title":"Basic Detection and Visualisation of Events","text":"One may use event_line() lolli_plot() directly output detect_event() order visualise MHWs. functions used visualise massive Western Australian heatwave 2011:","code":"event_line(mhw, spread = 180, metric = intensity_max,             start_date = \"1982-01-01\", end_date = \"2014-12-31\") lolli_plot(mhw, metric = intensity_max)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/detection_and_visualisation.html","id":"custom-mhw-visuals","dir":"Articles","previous_headings":"Visualising marine heatwaves (MHWs)","what":"Custom MHW visuals","title":"Basic Detection and Visualisation of Events","text":"event_line() lolli_plot() functions designed work directly list returned detect_event(). control figures required, may useful create ggplot2 stacking geoms. specifically created two new ggplot2 geoms reproduce functionality event_line() lolli_plot(). functions general functionality can used outside heatwaveR package, . apply MHWs MCSs first requires access climatology event dataframes within list produced detect_event(). :","code":"# Select the region of the time series of interest mhw2 <- mhw$climatology %>%    slice(10580:10720)  ggplot(mhw2, aes(x = t, y = temp, y2 = thresh)) +   geom_flame() +   geom_text(aes(x = as.Date(\"2011-02-25\"), y = 25.8, label = \"the Destroyer\\nof Kelps\")) ggplot(mhw$event, aes(x = date_start, y = intensity_max)) +   geom_lolli(colour = \"salmon\", colour_n = \"red\", n = 3) +   geom_text(colour = \"black\", aes(x = as.Date(\"2006-08-01\"), y = 5,                 label = \"The marine heatwaves\\nTend to be left skewed in a\\nGiven time series\")) +   labs(y = expression(paste(\"Max. intensity [\", degree, \"C]\")), x = NULL)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/detection_and_visualisation.html","id":"spicy-mhw-visuals","dir":"Articles","previous_headings":"Visualising marine heatwaves (MHWs)","what":"Spicy MHW visuals","title":"Basic Detection and Visualisation of Events","text":"default output function may liking. , worry. ggplot2 geoms, highly malleable. example, choose reproduce format MHWs seen Hobday et al. (2016), code look something like :  also worth pointing use geom_flame() directly like , don’t want highlight events greater less standard five day length, allowing two day gap, want use arguments n n_gap respectively.  wish highlight events geom_lolli(), plot colour default, use different theme, look like :  simple ggplot2 geoms possibilities nearly infinite.","code":"# It is necessary to give geom_flame() at least one row on either side of  # the event in order to calculate the polygon corners smoothly mhw_top <- mhw2 %>%    slice(5:111)  ggplot(data = mhw2, aes(x = t)) +   geom_flame(aes(y = temp, y2 = thresh, fill = \"all\"), show.legend = T) +   geom_flame(data = mhw_top, aes(y = temp, y2 = thresh, fill = \"top\"),  show.legend = T) +   geom_line(aes(y = temp, colour = \"temp\")) +   geom_line(aes(y = thresh, colour = \"thresh\"), size = 1.0) +   geom_line(aes(y = seas, colour = \"seas\"), size = 1.2) +   scale_colour_manual(name = \"Line Colour\",                       values = c(\"temp\" = \"black\",                                   \"thresh\" =  \"forestgreen\",                                   \"seas\" = \"grey80\")) +   scale_fill_manual(name = \"Event Colour\",                      values = c(\"all\" = \"salmon\",                                 \"top\" = \"red\")) +   scale_x_date(date_labels = \"%b %Y\") +   guides(colour = guide_legend(override.aes = list(fill = NA))) +   labs(y = expression(paste(\"Temperature [\", degree, \"C]\")), x = NULL) mhw3 <- mhw$climatology %>%    slice(850:950)  ggplot(mhw3, aes(x = t, y = temp, y2 = thresh)) +   geom_flame(fill = \"black\", alpha = 0.5) +   # Note the use of n = 5 and n_gap = 2 below   geom_flame(n = 5, n_gap = 2, fill = \"red\", alpha = 0.5) +   ylim(c(22, 25)) +     geom_text(colour = \"black\", aes(x = as.Date(\"1984-05-16\"), y = 24.5,                 label = \"heat\\n\\n\\n\\n\\nspike\")) ggplot(mhw$event, aes(x = date_peak, y = intensity_max)) +   geom_lolli(colour = \"firebrick\") +   labs(x = \"Peak Date\",         y = expression(paste(\"Max. intensity [\", degree, \"C]\")), x = NULL) +   theme_linedraw()"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/detection_and_visualisation.html","id":"calculating-marine-cold-spells-mcss","dir":"Articles","previous_headings":"","what":"Calculating marine cold-spells (MCSs)","title":"Basic Detection and Visualisation of Events","text":"calculation visualisation cold-spells also provided within package. data fed functions MHWs. main difference one now calculating 10th percentile threshold, rather 90th percentile threshold. top five cold-spells (cumulative intensity) detected OISST data Western Australia:","code":"# First calculate the cold-spells ts_10th <- ts2clm(sst_WA, climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\"), pctile = 10) mcs <- detect_event(ts_10th, coldSpells = TRUE)  # Then look at the top few events mcs$event %>%    dplyr::ungroup() %>%   dplyr::select(event_no, duration, date_start,                 date_peak, intensity_mean, intensity_max, intensity_cumulative) %>%   dplyr::arrange(intensity_cumulative) %>%    head(5) ##   event_no duration date_start  date_peak intensity_mean intensity_max ## 1       15       76 1990-04-13 1990-05-11        -2.5027       -3.1883 ## 2       49       58 2003-12-19 2004-01-23        -1.7341       -2.5865 ## 3       83       41 2020-04-26 2020-05-25        -2.3374       -3.1433 ## 4       64       52 2014-04-14 2014-05-05        -1.7824       -2.5358 ## 5       77       46 2018-07-24 2018-08-02        -1.8096       -2.4311 ##   intensity_cumulative ## 1            -190.2043 ## 2            -100.5806 ## 3             -95.8339 ## 4             -92.6844 ## 5             -83.2407"},{"path":[]},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/detection_and_visualisation.html","id":"default-mcs-visuals","dir":"Articles","previous_headings":"Visualising marine cold-spells (MCSs)","what":"Default MCS visuals","title":"Basic Detection and Visualisation of Events","text":"default plots showing cold-spells look like :   Note one need specify MCSs visualised, functions able understand .","code":"event_line(mcs, spread = 200, metric = intensity_cumulative,            start_date = \"1982-01-01\", end_date = \"2014-12-31\") lolli_plot(mcs, metric = intensity_cumulative, xaxis = event_no)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/detection_and_visualisation.html","id":"custom-mcs-visuals","dir":"Articles","previous_headings":"Visualising marine cold-spells (MCSs)","what":"Custom MCS visuals","title":"Basic Detection and Visualisation of Events","text":"Cold spell figures may created geoms ggplot2, :","code":"# Select the region of the time series of interest mcs2 <- mcs$climatology %>%    slice(2900:3190)  # Note that one must specify a colour other than the default 'salmon' ggplot(mcs2, aes(x = t, y = thresh, y2 = temp)) +   geom_flame(fill = \"steelblue3\") ggplot(mcs$event, aes(x = date_start, y = intensity_max)) +   geom_lolli(colour = \"steelblue3\", colour_n = \"navy\", n = 3) +   labs(x = \"Start Date\",        y = expression(paste(\"Max. intensity [\", degree, \"C]\")))"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/detection_and_visualisation.html","id":"minty-mcs-visuals","dir":"Articles","previous_headings":"Visualising marine cold-spells (MCSs)","what":"Minty MCS visuals","title":"Basic Detection and Visualisation of Events","text":", geom_flame() geom_lolli() simple ggplot2 geoms, one can go completely bananas :","code":"mcs_top <- mcs2 %>%    slice(125:202)  ggplot(data = mcs2, aes(x = t)) +   geom_flame(aes(y = thresh, y2 = temp, fill = \"all\"), show.legend = T) +   geom_flame(data = mcs_top, aes(y = thresh, y2 = temp, fill = \"top\"), show.legend = T) +   geom_line(aes(y = temp, colour = \"temp\")) +   geom_line(aes(y = thresh, colour = \"thresh\"), size = 1.0) +   geom_line(aes(y = seas, colour = \"seas\"), size = 1.2) +   scale_colour_manual(name = \"Line Colour\",                       values = c(\"temp\" = \"black\", \"thresh\" =  \"forestgreen\", \"seas\" = \"grey80\")) +   scale_fill_manual(name = \"Event Colour\", values = c(\"all\" = \"steelblue3\", \"top\" = \"navy\")) +   scale_x_date(date_labels = \"%b %Y\") +   guides(colour = guide_legend(override.aes = list(fill = NA))) +   labs(y = expression(paste(\"Temperature [\", degree, \"C]\")), x = NULL) ggplot(mcs$event, aes(x = date_start, y = intensity_cumulative)) +   geom_lolli(colour = \"steelblue3\", colour_n = \"navy\", n = 7) +   labs( x = \"Start Date\", y = expression(paste(\"Cumulative intensity [days x \", degree, \"C]\")))"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/detection_and_visualisation.html","id":"interactive-visuals","dir":"Articles","previous_headings":"","what":"Interactive visuals","title":"Basic Detection and Visualisation of Events","text":"heatwaveR v0.3.6.9002, geom_flame() also able used plotly allow interactive MHW visuals. Unfortunately around December 2020 plotly packaged orphaned CRAN decided didn’t want packages include imported package. Therefore v0.4.4.9005 heatwaveR longer built support using geom_flame() plotly. however still possible bit work simple working example given . currently possible use geom_lolli() plotly. Rather one advised just create dots segments separately geom_point() geom_segment() respectively already recognised plotly. Note following code chunk run makes vignette bit large.","code":"# Must load plotly library first library(plotly)  # Function needed for making geom_flame() work with plotly geom2trace.GeomFlame <- function (data,                                   params,                                   p) {      x <- y <- y2 <- NULL      # Create data.frame for ease of use   data1 <- data.frame(x = data[[\"x\"]],                       y = data[[\"y\"]],                       y2 = data[[\"y2\"]])      # Grab parameters   n <- params[[\"n\"]]   n_gap <- params[[\"n_gap\"]]      # Find events that meet minimum length requirement   data_event <- heatwaveR::detect_event(data1, x = x, y = y,                                         seasClim = y,                                         threshClim = y2,                                         minDuration = n,                                         maxGap = n_gap,                                         protoEvents = T)      # Detect spikes   data_event$screen <- base::ifelse(data_event$threshCriterion == FALSE, FALSE,                                     ifelse(data_event$event == FALSE, TRUE, FALSE))      # Screen out spikes   data1 <- data1[data_event$screen != TRUE,]      # Prepare to find the polygon corners   x1 <- data1$y   x2 <- data1$y2      # # Find points where x1 is above x2.   above <- x1 > x2   above[above == TRUE] <- 1   above[is.na(above)] <- 0      # Points always intersect when above=TRUE, then FALSE or reverse   intersect.points <- which(diff(above) != 0)      # Find the slopes for each line segment.   x1.slopes <- x1[intersect.points + 1] - x1[intersect.points]   x2.slopes <- x2[intersect.points + 1] - x2[intersect.points]      # # Find the intersection for each segment.   x.points <- intersect.points + ((x2[intersect.points] - x1[intersect.points]) / (x1.slopes - x2.slopes))   y.points <- x1[intersect.points] + (x1.slopes * (x.points - intersect.points))      # Coerce x.points to the same scale as x   x_gap <- data1$x[2] - data1$x[1]   x.points <- data1$x[intersect.points] + (x_gap*(x.points - intersect.points))      # Create new data frame and merge to introduce new rows of data   data2 <- data.frame(y = c(data1$y, y.points), x = c(data1$x, x.points))   data2 <- data2[order(data2$x),]   data3 <- base::merge(data1, data2, by = c(\"x\",\"y\"), all.y = T)   data3$y2[is.na(data3$y2)] <- data3$y[is.na(data3$y2)]      # Remove missing values for better plotting   data3$y[data3$y < data3$y2] <- NA   missing_pos <- !stats::complete.cases(data3[c(\"x\", \"y\", \"y2\")])   ids <- cumsum(missing_pos) + 1   ids[missing_pos] <- NA      # Get the correct positions   positions <- data.frame(x = c(data3$x, rev(data3$x)),                           y = c(data3$y, rev(data3$y2)),                           ids = c(ids, rev(ids)))      # Convert to a format geom2trace is happy with   positions <- plotly::group2NA(positions, groupNames = \"ids\")   positions <- positions[stats::complete.cases(positions$ids),]   positions <- dplyr::left_join(positions, data[,-c(2,3)], by = \"x\")   if(length(stats::complete.cases(positions$PANEL)) > 1)      positions$PANEL <- positions$PANEL[stats::complete.cases(positions$PANEL)][1]   if(length(stats::complete.cases(positions$group)) > 1)      positions$group <- positions$group[stats::complete.cases(positions$group)][1]      # Run the plotly polygon code   if(length(unique(positions$PANEL)) == 1){     getFromNamespace(\"geom2trace.GeomPolygon\", asNamespace(\"plotly\"))(positions)   } else{     return()   } }  # Time series ts_res <- heatwaveR::ts2clm(data = heatwaveR::sst_WA,                             climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\")) ts_res_sub <- ts_res[10500:10800,]  # Flame Figure p <- ggplot(data = ts_res_sub, aes(x = t, y = temp)) +   heatwaveR::geom_flame(aes(y2 = thresh), n = 5, n_gap = 2) +   geom_line(aes(y = temp)) +   geom_line(aes(y = seas), colour = \"green\") +   geom_line(aes(y = thresh), colour = \"red\") +   labs(x = \"\", y = \"Temperature (°C)\")  # Create interactive visuals ggplotly(p)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/event_categories.html","id":"categories","dir":"Articles","previous_headings":"","what":"Categories","title":"Calculating and Visualising Event Categories","text":"Hobday et al. (2018) naming convention MHWs proposed divides four categories based maximum observed intensity. naming convention brief description follows:","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/event_categories.html","id":"calculating-mhw-categories","dir":"Articles","previous_headings":"","what":"Calculating MHW categories","title":"Calculating and Visualising Event Categories","text":"categories MHWs Hobday et al. (2018) naming scheme may calculated heatwaveR package using category() function output detect_event() function. default function order events least intense. Note one may control output names events providing ones character string name argument. calculated MHWs Western Australia data, provide name “WA” : Note functions expects data collected southern hemisphere, hence argument S = TRUE. , one must set S = FALSE seen example . ensures correct seasons attributed event.","code":"# Load libraries library(dplyr) library(tidyr) library(ggplot2) library(heatwaveR)  # Calculate events ts <- ts2clm(sst_WA, climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\")) MHW <- detect_event(ts)  MHW_cat <- category(MHW, S = TRUE, name = \"WA\")  # Look at the top few events tail(MHW_cat) ##    event_no event_name  peak_date   category  i_max duration p_moderate ## 85       60   WA 2012b 2012-12-31  II Strong 3.4230       14         64 ## 86       29    WA 1999 1999-05-22  II Strong 3.6390       95         63 ## 87       47    WA 2009 2009-03-25  II Strong 2.3773        7         57 ## 88       72    WA 2015 2015-10-02  II Strong 2.4604        7         57 ## 89       41   WA 2008a 2008-04-14 III Severe 3.8299       35         57 ## 90       52   WA 2011a 2011-02-28 IV Extreme 6.5798      105         52 ##    p_strong p_severe p_extreme        season ## 85       36        0         0 Spring/Summer ## 86       37        0         0   Fall/Winter ## 87       43        0         0        Summer ## 88       43        0         0 Winter/Spring ## 89       23       17         0   Summer/Fall ## 90       27       11        10   Spring-Fall res_Med <- detect_event(ts2clm(sst_Med, climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\"))) res_Med_cat <- category(res_Med, S = FALSE, name = \"Med\") tail(res_Med_cat) ##     event_no event_name  peak_date   category  i_max duration p_moderate ## 118       98  Med 2018b 2018-08-04  II Strong 4.7451       44         52 ## 119      123  Med 2022c 2022-11-03  II Strong 3.5030       74         46 ## 120       67  Med 2012b 2012-08-20  II Strong 4.3190       18         44 ## 121       46  Med 2007c 2007-04-25 III Severe 4.0467       19         42 ## 122       75   Med 2014 2014-10-18  II Strong 3.3443      144         39 ## 123       96  Med 2018a 2018-04-28  II Strong 3.3185       11         27 ##     p_strong p_severe p_extreme        season ## 118       48        0         0        Summer ## 119       53        0         0          Fall ## 120       56        0         0        Summer ## 121       53        5         0        Spring ## 122       60        0         0 Summer-Winter ## 123       73        0         0        Spring"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/event_categories.html","id":"multiple-time-series","dir":"Articles","previous_headings":"","what":"Multiple time series","title":"Calculating and Visualising Event Categories","text":"however may want determine categories event within set time series cross equator, may set argument lat_col = TRUE allow category() automagically detect latitude events searching columns named either ‘lat’ ’latitude. See vignette detecting events gridded data examples running heatwaveR code gridded data.","code":"# Add lon/lat to the three default time series ts_WA <- sst_WA |> mutate(site = \"WA\", lon = 112.625, lat = -29.375) ts_NW_Atl <- sst_NW_Atl |> mutate(site = \"NW_Atl\", lon = -66.875, lat = 43.125) ts_Med <- sst_Med |> mutate(site = \"Med\", lon = 9.125, lat = 43.625) ts_ALL <- rbind(ts_WA, ts_NW_Atl, ts_Med)  # Calculate MHW categories by site MHW_cat_ALL <- ts_ALL |>    group_by(site) |>    group_modify(~ {     .x |>        ts2clm(climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\")) |>        detect_event() |>        category(season = \"peak\", lat_col = TRUE)     }) |>    # Correct event names by site   mutate(event_name = case_when(!is.na(event_name) ~ stringr::str_replace(event_name, \"Event\", site)))  # View results MHW_cat_ALL |>    arrange(-duration) |>    filter(!is.na(event_name)) |>    group_by(site) |>    group_modify(~ head(.x, 2L)) |>    dplyr::select(site:category, duration, season) ## # A tibble: 6 × 7 ## # Groups:   site [3] ##   site   event_no event_name   peak_date  category   duration season ##   <chr>     <int> <chr>        <date>     <chr>         <dbl> <chr>  ## 1 Med          75 Med 2014     2014-10-18 II Strong       144 Fall   ## 2 Med         122 Med 2022b    2022-07-20 II Strong        79 Summer ## 3 NW_Atl       72 NW_Atl 2012c 2012-07-15 II Strong       239 Summer ## 4 NW_Atl      100 NW_Atl 2018a 2018-01-12 III Severe      171 Winter ## 5 WA           52 WA 2011a     2011-02-28 IV Extreme      105 Summer ## 6 WA           59 WA 2012a     2012-01-27 II Strong       101 Summer"},{"path":[]},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/event_categories.html","id":"default-mhw-category-visuals","dir":"Articles","previous_headings":"Visualising MHW categories","what":"Default MHW category visuals","title":"Calculating and Visualising Event Categories","text":"quick easy visualisation categories MHW may accomplished event_line() setting category argument TRUE.","code":"event_line(MHW, spread = 100, start_date = \"2010-11-01\", end_date = \"2011-06-30\", category = TRUE)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/event_categories.html","id":"custom-mhw-category-visuals","dir":"Articles","previous_headings":"Visualising MHW categories","what":"Custom MHW category visuals","title":"Calculating and Visualising Event Categories","text":"one want visualise categories MHW ‘hand’, following code provide good starting point.","code":"# Create category breaks and select slice of data.frame clim_cat <- MHW$clim %>%   dplyr::mutate(diff = thresh - seas,                 thresh_2x = thresh + diff,                 thresh_3x = thresh_2x + diff,                 thresh_4x = thresh_3x + diff) %>%    dplyr::slice(10580:10690)  # Set line colours lineColCat <- c(   \"Temperature\" = \"black\",   \"Climatology\" = \"gray20\",   \"Threshold\" = \"darkgreen\",   \"2x Threshold\" = \"darkgreen\",   \"3x Threshold\" = \"darkgreen\",   \"4x Threshold\" = \"darkgreen\"   )  # Set category fill colours fillColCat <- c(   \"Moderate\" = \"#ffc866\",   \"Strong\" = \"#ff6900\",   \"Severe\" = \"#9e0000\",   \"Extreme\" = \"#2d0000\"   )  ggplot(data = clim_cat, aes(x = t, y = temp)) +   geom_flame(aes(y2 = thresh, fill = \"Moderate\")) +   geom_flame(aes(y2 = thresh_2x, fill = \"Strong\")) +   geom_flame(aes(y2 = thresh_3x, fill = \"Severe\")) +   geom_flame(aes(y2 = thresh_4x, fill = \"Extreme\")) +   geom_line(aes(y = thresh_2x, col = \"2x Threshold\"), size = 0.7, linetype = \"dashed\") +   geom_line(aes(y = thresh_3x, col = \"3x Threshold\"), size = 0.7, linetype = \"dotdash\") +   geom_line(aes(y = thresh_4x, col = \"4x Threshold\"), size = 0.7, linetype = \"dotted\") +   geom_line(aes(y = seas, col = \"Climatology\"), size = 0.7) +   geom_line(aes(y = thresh, col = \"Threshold\"), size = 0.7) +   geom_line(aes(y = temp, col = \"Temperature\"), size = 0.6) +   scale_colour_manual(name = NULL, values = lineColCat,                       breaks = c(\"Temperature\", \"Climatology\", \"Threshold\",                                  \"2x Threshold\", \"3x Threshold\", \"4x Threshold\")) +   scale_fill_manual(name = NULL, values = fillColCat, guide = FALSE) +   scale_x_date(date_labels = \"%b %Y\") +   guides(colour = guide_legend(override.aes = list(linetype = c(\"solid\", \"solid\", \"solid\",                                                                 \"dashed\", \"dotdash\", \"dotted\"),                                                    size = c(0.6, 0.7, 0.7, 0.7, 0.7, 0.7)))) +   labs(y = \"Temperature [°C]\", x = NULL)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/event_categories.html","id":"calculating-mcs-categories","dir":"Articles","previous_headings":"","what":"Calculating MCS categories","title":"Calculating and Visualising Event Categories","text":"MCSs calculated MHWs. category() function automagically detect fed MHWs MCSs additional arguments required. sake clarity following code chunks demonstrates calculate MCS categories.","code":"# Calculate events ts_MCS <- ts2clm(sst_WA, climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\"), pctile = 10) MCS <- detect_event(ts_MCS, coldSpells = T) MCS_cat <- category(MCS, S = TRUE, name = \"WA\")  # Look at the top few events tail(MCS_cat) ##    event_no event_name  peak_date  category   i_max duration p_moderate ## 81       77   WA 2018a 2018-08-02 II Strong -2.4311       46         67 ## 82       40    WA 2000 2000-08-13 II Strong -2.2743       11         64 ## 83       15    WA 1990 1990-05-11 II Strong -3.1883       76         62 ## 84       53    WA 2005 2005-10-16 II Strong -1.8637       13         62 ## 85       83    WA 2020 2020-05-25 II Strong -3.1433       41         61 ## 86       11    WA 1987 1987-12-10 II Strong -2.4968        9         44 ##    p_strong p_severe p_extreme season ## 81       33        0         0 Winter ## 82       36        0         0 Winter ## 83       38        0         0   Fall ## 84       38        0         0 Spring ## 85       39        0         0   Fall ## 86       56        0         0 Spring"},{"path":[]},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/event_categories.html","id":"default-mcs-category-visuals","dir":"Articles","previous_headings":"Visualising MCS categories","what":"Default MCS category visuals","title":"Calculating and Visualising Event Categories","text":"event_line() function also works visualising MCS categories. function automagically detect fed MCSs need provide new arguments. Note colour palette MCS four colours, MHWs, none demo time series come packaged heatwaveR MCSs intense able demonstrate full colour palette .","code":"event_line(MCS, spread = 100, start_date = \"1989-11-01\", end_date = \"1990-06-30\", category = TRUE)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/event_categories.html","id":"custom-mcs-category-visuals","dir":"Articles","previous_headings":"Visualising MCS categories","what":"Custom MCS category visuals","title":"Calculating and Visualising Event Categories","text":"following code chunk demonstrates manually create figure showing MCS categories.","code":"# Create category breaks and select slice of data.frame MCS_clim_cat <- MCS$clim %>%   dplyr::mutate(diff = thresh - seas,                 thresh_2x = thresh + diff,                 thresh_3x = thresh_2x + diff,                 thresh_4x = thresh_3x + diff) %>%    dplyr::slice(2910:3150)  # Set line colours lineColCat <- c(   \"Temperature\" = \"black\",   \"Climatology\" = \"grey40\",   \"Threshold\" = \"darkorchid\",   \"2x Threshold\" = \"darkorchid\",   \"3x Threshold\" = \"darkorchid\",   \"4x Threshold\" = \"darkorchid\"   )  # Set category fill colours fillColCat <- c(   \"Moderate\" = \"#C7ECF2\",   \"Strong\" = \"#85B7CC\",   \"Severe\" = \"#4A6A94\",   \"Extreme\" = \"#111433\"   )  # Create plot ggplot(data = MCS_clim_cat, aes(x = t, y = temp)) +   geom_flame(aes(y = thresh, y2 = temp, fill = \"Moderate\")) +   geom_flame(aes(y = thresh_2x, y2 = temp, fill = \"Strong\")) +   geom_flame(aes(y = thresh_3x, y2 = temp, fill = \"Severe\")) +   geom_flame(aes(y = thresh_4x, y2 = temp, fill = \"Extreme\")) +   geom_line(aes(y = thresh_2x, col = \"2x Threshold\"), size = 0.7, linetype = \"dashed\") +   geom_line(aes(y = thresh_3x, col = \"3x Threshold\"), size = 0.7, linetype = \"dotdash\") +   geom_line(aes(y = thresh_4x, col = \"4x Threshold\"), size = 0.7, linetype = \"dotted\") +   geom_line(aes(y = seas, col = \"Climatology\"), size = 0.7) +   geom_line(aes(y = thresh, col = \"Threshold\"), size = 0.7) +   geom_line(aes(y = temp, col = \"Temperature\"), size = 0.6) +   scale_colour_manual(name = NULL, values = lineColCat,                       breaks = c(\"Temperature\", \"Climatology\", \"Threshold\",                                  \"2x Threshold\", \"3x Threshold\", \"4x Threshold\")) +   scale_fill_manual(name = NULL, values = fillColCat, guide = FALSE) +   scale_x_date(date_labels = \"%b %Y\") +   guides(colour = guide_legend(override.aes = list(linetype = c(\"solid\", \"solid\", \"solid\",                                                                 \"dashed\", \"dotdash\", \"dotted\"),                                                    size = c(0.6, 0.7, 0.7, 0.7, 0.7, 0.7)))) +   labs(y = \"Temperature [°C]\", x = NULL)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/event_categories.html","id":"category-colour-palettes","dir":"Articles","previous_headings":"","what":"Category colour palettes","title":"Calculating and Visualising Event Categories","text":"sake convenience MHW MCS colour palettes provided figure showing direct comparison.","code":"# The MCS colour palette MCS_colours <- c(   \"Moderate\" = \"#C7ECF2\",   \"Strong\" = \"#85B7CC\",   \"Severe\" = \"#4A6A94\",   \"Extreme\" = \"#111433\" )  # The MHW colour palette MHW_colours <- c(   \"Moderate\" = \"#ffc866\",   \"Strong\" = \"#ff6900\",   \"Severe\" = \"#9e0000\",   \"Extreme\" = \"#2d0000\" )  # Create the colour palette for plotting by itself colour_palette <- data.frame(category = factor(c(\"I Moderate\", \"II Strong\", \"III Severe\", \"IV Extreme\"),                                                levels = c(\"I Moderate\", \"II Strong\", \"III Severe\", \"IV Extreme\")),                              MHW = c(MHW_colours[1], MHW_colours[2], MHW_colours[3], MHW_colours[4]),                              MCS = c(MCS_colours[1], MCS_colours[2], MCS_colours[3], MCS_colours[4])) %>%    pivot_longer(cols = c(MHW, MCS), names_to = \"event\", values_to = \"colour\")  # Show the palettes side-by-side ggplot(data = colour_palette, aes(x = category, y = event)) +   geom_tile(fill = colour_palette$colour) +   coord_cartesian(expand = F) +   labs(x = NULL, y = NULL)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/exceedance.html","id":"exceedances","dir":"Articles","previous_headings":"","what":"Exceedances","title":"Calculating and Visualising Exceedances","text":"addition calculation events based given percentile, package also allows calculation events based given static threshold exceedance() function. useful one interested testing time series events exceed pre-determined static threshold already known particular significance given part world. output function may also used calculation events may require two thresholds, atmospheric events ‘tMin’ ‘tMax’ daily values. detailed explanation please see vignette. data requirements exceedance() ts2clm() detect_event().","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/exceedance.html","id":"calculating-exceedances","dir":"Articles","previous_headings":"","what":"Calculating exceedances","title":"Calculating and Visualising Exceedances","text":"calculation exceedances may done one function seen : Note resultant output exceedance() similar detect_event(), except two dataframes within list called threshold exceedance, rather climatology event.","code":"# Activate libraries library(dplyr) library(ggplot2) library(heatwaveR)  # Calculate exceedence exc_25 <- exceedance(sst_WA, threshold = 25)  # Look at a few metrics exc_25$exceedance %>%   ungroup() %>%   select(exceedance_no, duration, date_start, date_peak, intensity_max, intensity_cumulative) %>%   dplyr::arrange(-intensity_cumulative) %>%   head(5) ##   exceedance_no duration date_start  date_peak intensity_max ## 1             7       52 2011-02-08 2011-02-28          4.74 ## 2             6       25 2008-04-03 2008-04-14          2.19 ## 3            10       41 2012-03-03 2012-04-10          1.37 ## 4             2       17 1999-05-13 1999-05-22          1.40 ## 5             5       10 2000-05-03 2000-05-04          1.01 ##   intensity_cumulative ## 1                87.05 ## 2                24.50 ## 3                17.98 ## 4                14.55 ## 5                 6.97"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/exceedance.html","id":"visualising-exceedances","dir":"Articles","previous_headings":"","what":"Visualising exceedances","title":"Calculating and Visualising Exceedances","text":"event_line() lolli_plot() designed work output detect_event(), want visualise results exceedance() need ‘hand’ ggplot2. code works example :","code":"exc_25_thresh <- exc_25$threshold %>%    slice(9500:9866)  ggplot(data = exc_25_thresh, aes(x = t)) +   geom_flame(aes(y = temp, y2 = thresh, fill = \"all\"), show.legend = F) +   geom_line(aes(y = temp, colour = \"temp\")) +   geom_line(aes(y = thresh, colour = \"thresh\"), size = 1.0) +   scale_colour_manual(name = \"Line Colour\",                       values = c(\"temp\" = \"black\", \"thresh\" =  \"forestgreen\")) +   scale_fill_manual(name = \"Event Colour\", values = c(\"all\" = \"salmon\")) +   guides(colour = guide_legend(override.aes = list(fill = NA))) +   scale_x_date(date_labels = \"%b %Y\") +   labs(y = expression(paste(\"Temperature [\", degree, \"C]\")), x = NULL)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/exceedance.html","id":"calculating-negative-exceedances","dir":"Articles","previous_headings":"","what":"Calculating negative exceedances","title":"Calculating and Visualising Exceedances","text":"Unfortunately antonym exceedance English language, makes talking exceedances static threshold somewhat awkward. purposes clarity refer negative exceedances. exceedance() function may used calculate consecutive days threshold seen :","code":"exc_19 <- exceedance(sst_WA, threshold = 19, below = TRUE) exc_19$exceedance %>%   dplyr::ungroup() %>%   dplyr::select(exceedance_no, duration, date_start, date_peak, intensity_mean, intensity_cumulative) %>%   dplyr::arrange(intensity_cumulative) %>%   head(5) ##   exceedance_no duration date_start  date_peak intensity_mean ## 1            28       61 2017-08-09 2017-08-20        -0.6092 ## 2            30       65 2018-07-27 2018-08-22        -0.5302 ## 3            16       30 2002-09-09 2002-09-25        -0.8763 ## 4            17       34 2003-09-06 2003-09-16        -0.7526 ## 5            13       24 1997-09-03 1997-09-15        -0.7692 ##   intensity_cumulative ## 1               -37.16 ## 2               -34.46 ## 3               -26.29 ## 4               -25.59 ## 5               -18.46"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/exceedance.html","id":"visualising-negative-exceedances","dir":"Articles","previous_headings":"","what":"Visualising negative exceedances","title":"Calculating and Visualising Exceedances","text":"one desire visualisation data produced following code:","code":"exc_19_thresh <- exc_19$threshold %>%    slice(1500:1866)  ggplot(data = exc_19_thresh, aes(x = t)) +   geom_flame(aes(y = thresh, y2 = temp), fill = \"steelblue3\", show.legend = F) +   geom_line(aes(y = temp, colour = \"temp\")) +   geom_line(aes(y = thresh, colour = \"thresh\"), size = 1.0) +   scale_colour_manual(name = \"Line Colour\",                       values = c(\"temp\" = \"black\", \"thresh\" =  \"forestgreen\")) +   scale_y_continuous(limits = c(18, 23.5)) +   scale_x_date(date_labels = \"%b %Y\") +   labs(y = expression(paste(\"Temperature [\", degree, \"C]\")), x = NULL)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/gridded_event_detection.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Detecting Events in Gridded Data","text":"previous vignette saw download prepare OISST data. vignette use subsetted data downloaded (global) example detect MHWs gridded data. now also possible perform task using heatwave3 , created apply heatwaveR code directly gridded data files. can return results CSV NetCDF.","code":"library(dplyr) # For basic data manipulation library(ggplot2) # For visualising data library(heatwaveR) # For detecting MHWs library(tidync) # For easily dealing with NetCDF data library(doParallel) # For parallel processing"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/gridded_event_detection.html","id":"loading-data","dir":"Articles","previous_headings":"","what":"Loading data","title":"Detecting Events in Gridded Data","text":"saved data .Rds file, loading R easy.","code":"OISST <- readRDS(\"~/Desktop/OISST_vignette.Rds\")"},{"path":[]},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/gridded_event_detection.html","id":"two-good-choices-dplyr-vs--plyr","dir":"Articles","previous_headings":"Event detection","what":"Two good choices: dplyr vs. plyr","title":"Detecting Events in Gridded Data","text":"want make calculation across multiple groups data within one dataframe two good options available us. first make use map() suite functions found purrr package, now implemented dplyr. fast tidyverse friendly approach splitting tasks. good option go back time bit use ddply() function plyr package. arguably better approach allows us easily use multiple cores detect MHWs. problem approach one must never load plyr library directly fundamental inconsistencies tidyverse. see perform two different techniques without causing headaches. little clumsy use multiple functions two methods combine calculations want make one wrapper function.","code":"event_only <- function(df){   # First calculate the climatologies   clim <- ts2clm(data = df, climatologyPeriod = c(\"1982-01-01\", \"2011-01-01\"))   # Then the events   event <- detect_event(data = clim)   # Return only the event metric dataframe of results   return(event$event) }"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/gridded_event_detection.html","id":"the-dplyr-method","dir":"Articles","previous_headings":"Event detection > Two good choices: dplyr vs. plyr","what":"The dplyr method","title":"Detecting Events in Gridded Data","text":"method requires special consideration performed just friendly tidyverse code chunk . Running calculations one 2.8 GHz cores modern laptop took ~123 seconds. must noted however recent update dplyr package now allows interrogate one’s computer determine many cores ’s disposal. uses one core full capacity cores usually half capacity.","code":"system.time( # First we start by choosing the 'OISST' dataframe MHW_dplyr <- OISST %>%    # Then we group the data by the 'lon' and 'lat' columns   group_by(lon, lat) %>%    # Then we run our MHW detecting function on each group   group_modify(~event_only(.x)) ) # ~123 seconds"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/gridded_event_detection.html","id":"the-plyr-technique","dir":"Articles","previous_headings":"Event detection > Two good choices: dplyr vs. plyr","what":"The plyr technique","title":"Detecting Events in Gridded Data","text":"method requires first tell machine many processor cores give us calculation. plyr technique took 33 seconds using seven cores. technique seven times faster using multiple cores certain amount loss efficiency due computer needing remember results meant go can stitch everything back together . takes little memory, large jobs can start become problematic. Occasionally ‘slippage’ can occur well entire task can forgotten. rare happen. partly makes dplyr viable option problem. reason dplyr performs efficient calculations plyr. best worlds?","code":"# NB: One should never use ALL available cores, save at least 1 for other essential tasks # The computer I'm writing this vignette on has 8 cores, so I use 7 here registerDoParallel(cores = 7)  # Detect events system.time( MHW_plyr <- plyr::ddply(.data = OISST, .variables = c(\"lon\", \"lat\"), .fun = event_only, .parallel = TRUE) ) # 33 seconds"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/gridded_event_detection.html","id":"a-harmonious-third-option","dir":"Articles","previous_headings":"Event detection","what":"A harmonious third option","title":"Detecting Events in Gridded Data","text":"one may see , running calculations large (even global) gridded dataset can quickly become heavy. running calculations global OISST dataset found fastest option combine two options . workflow saved longitude segment global OISST dataset separate files use dplyr method individual file, using plyr method running multiple calculations many files core limit allow. One may way around use dplyr run multiple plyr calculations . confuse computer likely cause stack overflow. sounds fun actually … learn. order happily combine two options one need convert dplyr code wrote ’s wrapper function, call stack files using plyr technique. must first create aforementioned stack files. may initially seem like unnecessary extra step, one working time series data necessary dates given pixel loaded . Unless one working server/virtual machine/supercomputer means one often able comfortably hold entire grid study area memory . data accessible thin strips like makes life easier. see code chunk also (arguably) allows us perform efficient calculations data. Even though technique much faster computationally, much lighter memory (RAM) loads one longitude slice data time. maximise efficiency even recommend writing full workflow stand-alone script running using source() directly R terminal. gain speed appears nominal, one scales speed boost becomes apparent. mentioned , recent changes dplyr interacts one’s computer perhaps slowed plyr + dplyr workflow shown . may now simply using plyr better option. depends number cores amount RAM one available.","code":"for(i in 1:length(unique(OISST$lon))){   OISST_sub <- OISST %>%      filter(lon == unique(lon)[i])   saveRDS(object = OISST_sub, file = paste0(\"~/Desktop/OISST_lon_\",i,\".Rds\")) } # The 'dplyr' wrapper function to pass to 'plyr' dplyr_wraper <- function(file_name){   MHW_dplyr <- readRDS(file_name) %>%      group_by(lon, lat) %>%      group_modify(~event_only(.x)) } # Create a vector of the files we want to use OISST_files <- dir(\"~/Desktop\", pattern = \"OISST_lon_*\", full.names = T)  # Use 'plyr' technique to run 'dplyr' technique with multiple cores system.time( MHW_result <- plyr::ldply(OISST_files, .fun = dplyr_wraper, .parallel = T) ) # 31 seconds  # Save for later use as desired saveRDS(MHW_result, \"~/Desktop/MHW_result.Rds\")"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/gridded_event_detection.html","id":"case-study","dir":"Articles","previous_headings":"","what":"Case study","title":"Detecting Events in Gridded Data","text":"human-induced climate change, anticipate extreme events occur frequently become greater intensity. investigate hypothesis using gridded SST data, way can assess trend unfolding across large ocean regions. Using gridded 0.25 degree Reynolds OISST, detect marine heatwaves (MHWs) around South Africa applying detect_event() function pixel--pixel data downloaded previous vignette. detecting events, fit generalised linear model (GLM) pixel calculate rates change MHW metrics, plot estimated trends.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/gridded_event_detection.html","id":"trend-detection","dir":"Articles","previous_headings":"Case study","what":"Trend detection","title":"Detecting Events in Gridded Data","text":"MHW detected now look fit GLMs results order determine long-term trends MHW occurrence. first see calculate number events occurred per pixel. specify particulars GLM going use. Lastly make calculations.","code":"# summarise the number of unique longitude, latitude and year combination: OISST_n <- MHW_result %>%    mutate(year = lubridate::year(date_start)) %>%    group_by(lon, lat, year) %>%    summarise(n = n(), .groups = \"drop\") %>%    group_by(lon, lat) %>%   tidyr::complete(year = c(1982:2019)) %>% # Note that these dates may differ   mutate(n = ifelse(is.na(n), 0, n)) head(OISST_n) lin_fun <- function(ev) {   mod1 <- glm(n ~ year, family = poisson(link = \"log\"), data = ev)   # extract slope coefficient and its p-value   tr <- data.frame(slope = summary(mod1)$coefficients[2,1],                    p = summary(mod1)$coefficients[2,4])   return(tr) } OISST_nTrend <- plyr::ddply(OISST_n, c(\"lon\", \"lat\"), lin_fun, .parallel = T) OISST_nTrend$pval <- cut(OISST_nTrend$p, breaks = c(0, 0.001, 0.01, 0.05, 1)) head(OISST_nTrend)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/gridded_event_detection.html","id":"visualising-the-results","dir":"Articles","previous_headings":"Case study","what":"Visualising the results","title":"Detecting Events in Gridded Data","text":"Let’s finish vignette visualising long-term trends annual occurrence MHWs per pixel chosen study area. First grab base global map maps package. create two maps stick together using ggpubr. first map show slope count events detected per year time shades red, second map show significance (p-value) trends shades grey. figure may see entire study area shows significant (p<= 0.05) increases count MHWs per year. generally case entire globe. shown significant increase intensity MHWs well.","code":"# The base map map_base <- ggplot2::fortify(maps::map(fill = TRUE, plot = FALSE)) %>%    dplyr::rename(lon = long) map_slope <- ggplot(OISST_nTrend, aes(x = lon, y = lat)) +   geom_rect(size = 0.2, fill = NA,        aes(xmin = lon - 0.1, xmax = lon + 0.1, ymin = lat - 0.1, ymax = lat + 0.1,            colour = pval)) +   geom_raster(aes(fill = slope), interpolate = FALSE, alpha = 0.9) +   scale_fill_gradient2(name = \"count/year (slope)\", high = \"red\", mid = \"white\",                        low = \"darkblue\", midpoint = 0,                        guide = guide_colourbar(direction = \"horizontal\",                                                title.position = \"top\")) +   scale_colour_manual(breaks = c(\"(0,0.001]\", \"(0.001,0.01]\", \"(0.01,0.05]\", \"(0.05,1]\"),                       values = c(\"firebrick1\", \"firebrick2\", \"firebrick3\", \"white\"),                       name = \"p-value\", guide = FALSE) +   geom_polygon(data = map_base, aes(group = group),                 colour = NA, fill = \"grey80\") +   coord_fixed(ratio = 1, xlim = c(13.0, 23.0), ylim = c(-33, -42), expand = TRUE) +   labs(x = \"\", y = \"\") +   theme_bw() +   theme(legend.position = \"bottom\")  map_p <- ggplot(OISST_nTrend, aes(x = lon, y = lat)) +   geom_raster(aes(fill = pval), interpolate = FALSE) +   scale_fill_manual(breaks = c(\"(0,0.001]\", \"(0.001,0.01]\", \"(0.01,0.05]\",                                \"(0.05,0.1]\", \"(0.1,0.5]\", \"(0.5,1]\"),                     values = c(\"black\", \"grey20\", \"grey40\",                                \"grey80\", \"grey90\", \"white\"),                     name = \"p-value\",                     guide = guide_legend(direction = \"horizontal\",                                                title.position = \"top\")) +   geom_polygon(data = map_base, aes(group = group),                 colour = NA, fill = \"grey80\") +   coord_fixed(ratio = 1, xlim = c(13.0, 23.0), ylim = c(-33, -42), expand = TRUE) +   labs(x = \"\", y = \"\") +   theme_bw() +   theme(legend.position = \"bottom\")  map_both <- ggpubr::ggarrange(map_slope, map_p, align = \"hv\") map_both"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/internal_workflow.html","id":"ts2clm","dir":"Articles","previous_headings":"","what":"ts2clm()","title":"heatwaveR internal workflow","text":"ts2clm() accepts dataframe date (x = t) temperature (y = temp). Additional function arguments include: climatologyPeriod Required. argument passed two values (see example ). first value chosen date start climatology period, second value end date said period. chosen period (preferably 30 years length) used calculate seasonal cycle extreme value threshold. maxPadLength Specifies maximum length days interpolate (pad) missing data (specified NA) input temperature time series; .e., consecutive blocks NAs length greater maxPadLength left NA. default FALSE. Set integer interpolate. Setting maxPadLength TRUE return error. windowHalfWidth Width sliding window day--year (one side center day--year) used pooling values calculation climatology threshold percentile. Default 5 days, gives window width 11 days centred 6th day series 11 days. pctile Threshold percentile (%) detection events (MHWs). Default 90th percentile. intent use threshold data MCSs, set pctile = 10. low value. smoothPercentile Boolean switch selecting whether smooth climatology threshold percentile time series moving average smoothPercentileWidth. Default TRUE. clmOnly Choose calculate return climatologies. default FALSE. var argument introduced allow user choose variance seasonal signal per doy calculated. default FALSE prevent calculation, potentially increasing speed calculations gridded data reducing size output. variance initially introduced part standard output Hobday et al. (2016), researchers use generally regarded now unnecessary. roundClm argument allows user choose many decimal places seas thresh outputs rounded . Default 4. prevent rounding set roundClm = FALSE. argument may given numeric values FALSE. function first checks climatologyPeriod consisting vectors two dates (e.g. c(\"1982-01-01\", 2011-12-31)) 1. advised must least 30 years, can handle shorter durations. Currently weigh unequal number dates per year cases duration year exactly 365 (366) days. Weighting unequal number days per year situations climatologyPerdiod comprises parts years must addressed update. function supports leap years. Currently done ignoring Feb 29s initial calculation climatology threshold. values Feb 29 linearly interpolated values Feb 28 Mar 1. update ’d suggest using temperature data Feb 29 interpolating . user concerned repeated measurements per day, suggest necessary checks fixes implemented prior feeding time series ts2clm(). Much interval function depends data.table fast. suggest removing dependence favour C++ code. Also, except output flat tables tibbles, rely Tidyverse. function return tibble (see tidyverse package) input time series newly calculated climatology. climatology contains daily climatology threshold calculating MHWs. software designed creating climatologies daily temperatures, units specified reflect intended purpose. However, various kinds climatologies may created, case, appropriate units need determined user. clmOnly enabled, 365 366 day climatology returned. function constructs continuous, uninterrupted time series temperatures. takes series dates temperatures, irregular (ordered), inserts missing dates fills corresponding temperatures NAs. one argument fed data consistent format early steps ts2clm(): data data frame columns date (ts_x) temperature (ts_y) data. Ordered daily data expected, although missing values (NA) can accommodated, function recommended NAs occur infrequently, preferably three consecutive days. function reads daily data time vector specified Date (e.g. “1982-01-01”). user calculate daily data sub-daily measurements. Leap years automatically accommodated function. future update need able accommodate time series range frequencies sub-daily monthly. function can handle missing days, licence actually use data detection anomalous thermal events. Hobday et al. (2016) recommend gaps 3 days, may adjusted setting maxPadLength argument ts2clm function. longer frequent gaps become lower fidelity annual climatology threshold can calculated, repercussions accuracy event metrics can determined, also number events can detected. Currently check number NAs time series provided ts2clm() can added future updates fails (sends loud warning) threshold maximum allowable NAs exceeded. function set day--year (doy) vector insert rows cases original data set missing rows dates. user concerned potential repeated measurements worry time series unordered, suggest necessary checks fixes implemented prior feeding time series ts2clim() via make_whole_fast(). using fast algorithm, assume user done necessary work ensure time vector ordered without repeated measurements beforehand. function return data frame three columns. column headed doy (day--year) Julian day running 1 366, modified day--year series non-leap-years runs 1...59 61...366. leap years 60th day February 29. ts_x column series dates class Date, y measured variable. time series uninterrupted continuous daily values first last dates input data.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/internal_workflow.html","id":"details","dir":"Articles","previous_headings":"","what":"Details","title":"heatwaveR internal workflow","text":"function first checks climatologyPeriod consisting vectors two dates (e.g. c(\"1982-01-01\", 2011-12-31)) 1. advised must least 30 years, can handle shorter durations. Currently weigh unequal number dates per year cases duration year exactly 365 (366) days. Weighting unequal number days per year situations climatologyPerdiod comprises parts years must addressed update. function supports leap years. Currently done ignoring Feb 29s initial calculation climatology threshold. values Feb 29 linearly interpolated values Feb 28 Mar 1. update ’d suggest using temperature data Feb 29 interpolating . user concerned repeated measurements per day, suggest necessary checks fixes implemented prior feeding time series ts2clm(). Much interval function depends data.table fast. suggest removing dependence favour C++ code. Also, except output flat tables tibbles, rely Tidyverse.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/internal_workflow.html","id":"value","dir":"Articles","previous_headings":"","what":"Value","title":"heatwaveR internal workflow","text":"function return tibble (see tidyverse package) input time series newly calculated climatology. climatology contains daily climatology threshold calculating MHWs. software designed creating climatologies daily temperatures, units specified reflect intended purpose. However, various kinds climatologies may created, case, appropriate units need determined user. clmOnly enabled, 365 366 day climatology returned.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/internal_workflow.html","id":"internal-functions","dir":"Articles","previous_headings":"","what":"Internal functions","title":"heatwaveR internal workflow","text":"function constructs continuous, uninterrupted time series temperatures. takes series dates temperatures, irregular (ordered), inserts missing dates fills corresponding temperatures NAs. one argument fed data consistent format early steps ts2clm(): data data frame columns date (ts_x) temperature (ts_y) data. Ordered daily data expected, although missing values (NA) can accommodated, function recommended NAs occur infrequently, preferably three consecutive days. function reads daily data time vector specified Date (e.g. “1982-01-01”). user calculate daily data sub-daily measurements. Leap years automatically accommodated function. future update need able accommodate time series range frequencies sub-daily monthly. function can handle missing days, licence actually use data detection anomalous thermal events. Hobday et al. (2016) recommend gaps 3 days, may adjusted setting maxPadLength argument ts2clm function. longer frequent gaps become lower fidelity annual climatology threshold can calculated, repercussions accuracy event metrics can determined, also number events can detected. Currently check number NAs time series provided ts2clm() can added future updates fails (sends loud warning) threshold maximum allowable NAs exceeded. function set day--year (doy) vector insert rows cases original data set missing rows dates. user concerned potential repeated measurements worry time series unordered, suggest necessary checks fixes implemented prior feeding time series ts2clim() via make_whole_fast(). using fast algorithm, assume user done necessary work ensure time vector ordered without repeated measurements beforehand. function return data frame three columns. column headed doy (day--year) Julian day running 1 366, modified day--year series non-leap-years runs 1...59 61...366. leap years 60th day February 29. ts_x column series dates class Date, y measured variable. time series uninterrupted continuous daily values first last dates input data.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/internal_workflow.html","id":"make_whole_fast","dir":"Articles","previous_headings":"ts2clm()","what":"make_whole_fast()","title":"heatwaveR internal workflow","text":"function constructs continuous, uninterrupted time series temperatures. takes series dates temperatures, irregular (ordered), inserts missing dates fills corresponding temperatures NAs. one argument fed data consistent format early steps ts2clm(): data data frame columns date (ts_x) temperature (ts_y) data. Ordered daily data expected, although missing values (NA) can accommodated, function recommended NAs occur infrequently, preferably three consecutive days. function reads daily data time vector specified Date (e.g. “1982-01-01”). user calculate daily data sub-daily measurements. Leap years automatically accommodated function. future update need able accommodate time series range frequencies sub-daily monthly. function can handle missing days, licence actually use data detection anomalous thermal events. Hobday et al. (2016) recommend gaps 3 days, may adjusted setting maxPadLength argument ts2clm function. longer frequent gaps become lower fidelity annual climatology threshold can calculated, repercussions accuracy event metrics can determined, also number events can detected. Currently check number NAs time series provided ts2clm() can added future updates fails (sends loud warning) threshold maximum allowable NAs exceeded. function set day--year (doy) vector insert rows cases original data set missing rows dates. user concerned potential repeated measurements worry time series unordered, suggest necessary checks fixes implemented prior feeding time series ts2clim() via make_whole_fast(). using fast algorithm, assume user done necessary work ensure time vector ordered without repeated measurements beforehand. function return data frame three columns. column headed doy (day--year) Julian day running 1 366, modified day--year series non-leap-years runs 1...59 61...366. leap years 60th day February 29. ts_x column series dates class Date, y measured variable. time series uninterrupted continuous daily values first last dates input data.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/internal_workflow.html","id":"details-1","dir":"Articles","previous_headings":"ts2clm()","what":"Details","title":"heatwaveR internal workflow","text":"function reads daily data time vector specified Date (e.g. “1982-01-01”). user calculate daily data sub-daily measurements. Leap years automatically accommodated function. future update need able accommodate time series range frequencies sub-daily monthly. function can handle missing days, licence actually use data detection anomalous thermal events. Hobday et al. (2016) recommend gaps 3 days, may adjusted setting maxPadLength argument ts2clm function. longer frequent gaps become lower fidelity annual climatology threshold can calculated, repercussions accuracy event metrics can determined, also number events can detected. Currently check number NAs time series provided ts2clm() can added future updates fails (sends loud warning) threshold maximum allowable NAs exceeded. function set day--year (doy) vector insert rows cases original data set missing rows dates. user concerned potential repeated measurements worry time series unordered, suggest necessary checks fixes implemented prior feeding time series ts2clim() via make_whole_fast(). using fast algorithm, assume user done necessary work ensure time vector ordered without repeated measurements beforehand.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/articles/internal_workflow.html","id":"value-1","dir":"Articles","previous_headings":"ts2clm()","what":"Value","title":"heatwaveR internal workflow","text":"function return data frame three columns. column headed doy (day--year) Julian day running 1 366, modified day--year series non-leap-years runs 1...59 61...366. leap years 60th day February 29. ts_x column series dates class Date, y measured variable. time series uninterrupted continuous daily values first last dates input data.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robert W. Schlegel. Author, maintainer, contributor. Albertus J. Smit. Author, contributor.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schlegel RW, Smit AJ (2018). “heatwaveR: central algorithm detection heatwaves cold-spells.” Journal Open Source Software, 3(27), 821. doi:10.21105/joss.00821.","code":"@Article{,   title = {{heatwaveR}: A central algorithm for the detection of heatwaves and cold-spells},   author = {Robert W. Schlegel and Albertus J. Smit},   journal = {Journal of Open Source Software},   year = {2018},   volume = {3},   number = {27},   pages = {821},   doi = {10.21105/joss.00821}, }"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/index.html","id":"heatwaver-","dir":"","previous_headings":"","what":"Detect Heatwaves and Cold-Spells","title":"Detect Heatwaves and Cold-Spells","text":"heatwaveR package project-wide update RmarineHeatWaves package, translation original Python code written Eric C. J. Oliver. heatwaveR package also uses naming conventions objects, columns, arguments Python code. heatwaveR R package contains original functions RmarineHeatWaves package calculate display marine heatwaves (MHWs) according definition Hobday et al. (2016) well calculating visualising marine cold-spells (MCSs) first introduced Schlegel et al. (2017a). also contains functionality calculate categories MHWs outlined Hobday et al. (2018). package RmarineHeatWaves , faster. entire package deconstructed modularised, continuing implement slow portions code C++. alleviated bottlenecks slowed climatology creation portions code well generally creating overall increase speed calculations. Currently R code runs fast original python functions, least far applying single time series temperatures. Readers familiar languages know ongoing debate around relative speed two languages. experience, R can fast python, provided attention paid finding ways reduce computational inefficiencies stem ) liberal use complex inefficient non-atomic data structures, data frames; ii) reliance non-vectorised calculations loops; iii) lazy (convenient) coding comes drawing heavily tidyverse suite packages. continue ensure heatwaveR becomes --efficient can applied large gridded data products ease. end, extension package heatwave3 developed. helps user apply code heatwaveR directly onto NetCDF 3D gridded data files. heatwaveR also developed released order better accommodate inclusion definitions atmospheric heatwaves addition MHWs. Additionally, heatwaveR also provides first implementation definition ‘compound heatwave’. currently multiple different definitions type event arguments provided within ts2clm() detect_event() functions. package may installed CRAN typing following command console: install.packages(\"heatwaveR\") development version may installed GitHub : devtools::install_github(\"robwschlegel/heatwaveR\")","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/index.html","id":"the-functions","dir":"","previous_headings":"","what":"The functions","title":"Detect Heatwaves and Cold-Spells","text":"package also provides data observed SST records three historical MHWs: 2011 Western Australia event, 2012 Northwest Atlantic event, 2003 Mediterranean event.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/index.html","id":"the-heatwave-metrics","dir":"","previous_headings":"","what":"The heatwave metrics","title":"Detect Heatwaves and Cold-Spells","text":"detect_event() function return list two tibbles (see tidyverse), climatology event, time series climatology MHW (MCS) events, respectively. climatology contains full time series daily temperatures, well seasonal climatology, threshold various aspects events detected. software designed detecting extreme thermal events, units specified reflect intended purpose. However, various kinds extreme events (e.g. rainfall) may detected according ‘heatwave’ specifications, case, appropriate minDuration etc. units measurement need determined user. events summarised using range event metrics: intensity_max_relThresh, intensity_mean_relThresh, intensity_var_relThresh, intensity_cumulative_relThresh except relative threshold (e.g., 90th percentile) rather seasonal climatology. intensity_max_abs, intensity_mean_abs, intensity_var_abs, intensity_cumulative_abs except absolute magnitudes rather relative seasonal climatology threshold. Note rate_onset rate_decline return NA event begins/ends first/last day time series. may particularly evident function applied large gridded data sets. Although metrics contain errors provide sensible values, please take account interpretation output. must also noted events whose date_peak occur day date_start date_end event return small negative values. tends occur areas persistent ice cover. authors currently thinking best handle exception.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/index.html","id":"the-vignettes","dir":"","previous_headings":"","what":"The Vignettes","title":"Detect Heatwaves and Cold-Spells","text":"detailed explanations walkthroughs use heatwaveR package please click Vignettes tab toolbar , follow links : basic introduction detection visualisation events. explanation use exceedance function. walkthrough calculation visualisation event categories. examples calculation atmospheric events alternative thresholds. demonstration download prepare OISST data. may detect_event() function applied gridded data, fit GLM plot results.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/index.html","id":"the-marine-heatwave-tracker","dir":"","previous_headings":"","what":"The Marine Heatwave Tracker","title":"Detect Heatwaves and Cold-Spells","text":"see heatwaveR package action, check Marine Heatwave Tracker website. daily updating global analysis world marine heatwaves occurring. near real-time information well historic data going back January 1st, 1982 uses Hobday et al. (2018) colour scheme show intense MHWs .","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/index.html","id":"contributing-to-heatwaver","dir":"","previous_headings":"","what":"Contributing to heatwaveR","title":"Detect Heatwaves and Cold-Spells","text":"contribute package please follow guidelines . Please use link report bugs found.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/index.html","id":"citing-heatwaver","dir":"","previous_headings":"","what":"Citing heatwaveR","title":"Detect Heatwaves and Cold-Spells","text":"heatwaveR always free use open source software, citation scientific literature sources primary metric continued development package motivated . Therefore, heatwaveR package used analyses please acknowledge following citation: Robert W. Schlegel Albertus J. Smit (2018). heatwaveR: central algorithm detection heatwaves cold-spells. Journal Open Source Software, 3(27), 821, https://doi.org/10.21105/joss.00821 BibTeX citation may accessed R : citation(\"heatwaveR\") list sources cited heatwaveR see Citations tab toolbar top page. see publication list citations like added please contact developer (see ).","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Detect Heatwaves and Cold-Spells","text":"Hobday, .J. et al. (2016). hierarchical approach defining marine heatwaves. Progress Oceanography, 141, pp. 227-238. Schlegel, R. W., Oliver, E. C. J., Wernberg, T. W., Smit, . J. (2017a). Nearshore offshore co-occurrences marine heatwaves cold-spells. Progress Oceanography, 151, pp. 189-205. Schlegel, R. W., Oliver, E. C., Perkins-Kirkpatrick, S., Kruger, ., Smit, . J. (2017b). Predominant atmospheric oceanic patterns coastal marine heatwaves. Frontiers Marine Science, 4, 323. Hobday, . J., Oliver, E. C. J., Sen Gupta, ., Benthuysen, J. ., Burrows, M. T., Donat, M. G., Holbrook, N. J., Moore, P. J., Thomsen, M. S., Wernberg, T., Smale, D. . (2018). Categorizing naming marine heatwaves. Oceanography 31(2).","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Detect Heatwaves and Cold-Spells","text":"Python code written Eric C. J. Oliver. Contributors Marine Heatwaves definition numerical implementation include Alistair J. Hobday, Lisa V. Alexander, Sarah E. Perkins, Dan . Smale, Sandra C. Straub, Jessica Benthuysen, Michael T. Burrows, Markus G. Donat, Ming Feng, Neil J. Holbrook, Pippa J. Moore, Hillary . Scannell, Alex Sen Gupta, Thomas Wernberg. translation Python R done . J. Smit graphing functions contributed Robert. W. Schlegel.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Detect Heatwaves and Cold-Spells","text":"Robert W. Schlegel Data Scientist Laboratoire d’Océanographie de Villefranche-sur-Mer, LOV Institut de la Mer de Villefranche, IMEV robert.schlegel@imev-mer.fr","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/Algiers.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily maximum (tX) and minimum (tN) air temperatures for Algiers, Algeria. — Algiers","title":"Daily maximum (tX) and minimum (tN) air temperatures for Algiers, Algeria. — Algiers","text":"dataset containing daily maximum minimum air temperatures (degrees Celsius) date Algiers, Algeria period 1961-01-01 2005-12-31.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/Algiers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily maximum (tX) and minimum (tN) air temperatures for Algiers, Algeria. — Algiers","text":"","code":"Algiers"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/Algiers.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Daily maximum (tX) and minimum (tN) air temperatures for Algiers, Algeria. — Algiers","text":"data frame 16436 rows 3 variables: t date, .Date() format tMax daily max. temperature, degrees Celsius tMin daily min. temperature, degrees Celsius","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/Algiers.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Daily maximum (tX) and minimum (tN) air temperatures for Algiers, Algeria. — Algiers","text":"Mr. Haouari Mahmoud, IHFR, Algeria","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/Algiers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Daily maximum (tX) and minimum (tN) air temperatures for Algiers, Algeria. — Algiers","text":"lon/lat:","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/block_average.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate yearly means for event metrics. — block_average","title":"Calculate yearly means for event metrics. — block_average","text":"Calculate yearly means event metrics.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/block_average.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate yearly means for event metrics. — block_average","text":"","code":"block_average(data, x = t, y = temp, report = \"full\", returnDF = TRUE)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/block_average.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate yearly means for event metrics. — block_average","text":"data Accepts data returned detect_event function. x column expected contain vector dates per specification ts2clm. column headed t present dataframe, argument may omitted; otherwise, specify name column dates . y column containing measurement variable. column name differs default (.e. temp), specify name . report Specify either full partial. Selecting full causes report contain NAs years events detected (except count, zero years), partial reports years wherein events detected. default full. returnDF default (TRUE) tells function return results type data.frame. FALSE return results data.table.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/block_average.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate yearly means for event metrics. — block_average","text":"function return data frame averaged (aggregate) metrics. includes following: year year metrics averaged. count number events per year. duration average duration events per year [days]. duration_max maximum duration event year [days]. intensity_mean average event \"mean intensity\" year [deg. C]. intensity_max average event \"maximum (peak) intensity\" year   [deg. C]. intensity_max_max maximum event \"maximum (peak) intensity\"   year [deg. C]. intensity_var average event \"intensity variability\" year   [deg. C]. intensity_cumulative average event \"cumulative intensity\" year   [deg. C x days]. rate_onset Average event onset rate year [deg. C / days]. rate_decline Average event decline rate year [deg. C / days]. total_days Total number events days year [days]. total_icum Total cumulative intensity events year [deg. C x days]. intensity_max_relThresh, intensity_mean_relThresh, intensity_var_relThresh, intensity_cumulative_relThresh except relative threshold (e.g., 90th percentile) rather seasonal climatology. intensity_max_abs, intensity_mean_abs, intensity_var_abs, intensity_cumulative_abs except absolute magnitudes rather relative seasonal climatology threshold.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/block_average.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate yearly means for event metrics. — block_average","text":"function needs provided full output detect_event exceedance functions. Note yearly averages calculated complete years (.e. years start/end part-way year beginning end original time series removed calculations). function differs python implementation function name (.e., blockAverage, see https://github.com/ecjoliver/marineHeatWaves) provide ability calculate average (aggregate) event metrics 'blocks' one year, python version allows arbitrary (integer) block sizes. Note function used output exceedance, metrics (see ) relThresh name returned NA values.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/block_average.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate yearly means for event metrics. — block_average","text":"Hobday, .J. et al. (2016), hierarchical approach defining marine heatwaves, Progress Oceanography, 141, pp. 227-238, doi: 10.1016/j.pocean.2015.12.014","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/block_average.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate yearly means for event metrics. — block_average","text":"Albertus J. Smit, Eric C. J. Oliver, Robert W. Schlegel","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/block_average.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate yearly means for event metrics. — block_average","text":"","code":"ts <- ts2clm(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\")) res <- detect_event(ts) out <- block_average(res) summary(glm(count ~ year, out, family = \"poisson\")) #>  #> Call: #> glm(formula = count ~ year, family = \"poisson\", data = out) #>  #> Coefficients: #>              Estimate Std. Error z value Pr(>|z|)    #> (Intercept) -63.70416   20.29044  -3.140  0.00169 ** #> year          0.03209    0.01011   3.173  0.00151 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> (Dispersion parameter for poisson family taken to be 1) #>  #>     Null deviance: 116.78  on 40  degrees of freedom #> Residual deviance: 106.27  on 39  degrees of freedom #> AIC: 176.77 #>  #> Number of Fisher Scoring iterations: 6 #>   library(ggplot2)  ggplot(data = out, aes(x = year, y = count)) +   geom_point(colour = \"salmon\") +   geom_line() +   labs(x = NULL, y = \"Number of events\")"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/category.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the categories of events. — category","title":"Calculate the categories of events. — category","text":"Calculates categories MHWs MCSs produced detect_event accordance naming scheme proposed Hobday et al. (2018).","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/category.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the categories of events. — category","text":"","code":"category(   data,   y = temp,   S = TRUE,   name = \"Event\",   climatology = FALSE,   MCScorrect = FALSE,   MCSice = FALSE,   season = \"range\",   roundVal = 4,   lat_col = FALSE )"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/category.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the categories of events. — category","text":"data function receives full (list) output detect_event function. y column containing measurement variable. column name differs default (.e. temp), specify name . S argument informs function data collected southern hemisphere (TRUE, default) northern hemisphere (FALSE) may correctly output season column (see ). name character string (e.g. \"Bohai Sea\") provided used name events event_name column (see ) output. value provided default output \"Event\". climatology default setting FALSE tell function output summary (wide) results individual events seen Hobday et al. (2018). set TRUE, function return list two dataframes. first dataframe climatology, contains similar information found detect_event, addition daily intensity (anomaly seasonal doy threshold) category values, reports days event detected. second dataframe, event, summary results function produces default. MCScorrect calculating marine cold-spells (MCSs) may occur areas bottom thresholds intense categories -1.8C, physically impossible Earth, one wants correct bottom thresholds able exceed -1.8C, set argument TRUE (default FALSE). MCSice Sensu Schlegel et al. (2021; Marine cold-spells), advisable classify MCS event threshold -1.7°C 'V Ice' category event. season argument allows user decide season(s) occurrence MHWs labelled. default setting \"range\" return range seasons MHW occurred, seen Hobday et al. (2018). One may chose rather function return season \"start\", \"peak\", \"end\" MHW giving corresponding character vector. roundVal argument allows user choose many decimal places outputs rounded . Default 4. prevent rounding set roundClm = FALSE. argument may given numeric values FALSE. lat_col user may set lat_col = TRUE detect columns named first 'lat', 'latitude', use numeric decimal degree values therein determine correct seasons events. Note override S argument. Meaning given/detected latitude column negative values, S automatically set TRUE vice versa. Also note multiple different latitude values detected intentionally cause error category() function meant run one time series . latitude exactly 0, classified Northern Hemisphere.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/category.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the categories of events. — category","text":"function return data.frame results similar seen Table 2 Hobday et al. (2018). provides information necessary appraise extent events output detect_event based category ranking scale. category thresholds calculated based difference given seasonal climatology threshold climatology. four category levels difference multiplied category level. definitions default output columns follows: event_no number event determined detect_event   allow joining outputs. event_name name event. Generated name   value provided year peak_date (see following)   event. name value provided default \"Event\" used.   proposed Hobday et al. (2018), Moderate events given name   prevent multiple repeat names within year. two events   ranked greater Moderate reported within year,   differentiated addition trailing letter   (e.g. Event 2001a, Event 2001b). peak_date date (day) maximum intensity event   recorded. category maximum category threshold reached/exceeded event. i_max maximum intensity event threshold value. duration total duration (days) event. Note includes   possible days measurement value y) may dropped   threshold value. Therefore, proportion event duration (days) spent   certain thresholds may add 100% (see following four items). p_moderate proportion total duration (days) spent   first threshold, thresholds. p_strong proportion total duration (days) spent   second threshold, thresholds. p_severe proportion total duration (days) spent   third threshold, fourth threshold. p_extreme proportion total duration (days) spent   fourth final threshold. season season(s) event occurred. event   occurred across two seasons displayed e.g. \"Winter/Spring\".   Across three seasons e.g. \"Winter-Summer\". Events lasting across four   seasons listed \"Year-round\". December (June) used start   Austral (Boreal) summer. \"start\", \"peak\", \"end\" given season   argument one season chosen period given. climatology = TRUE, function output list two dataframes. first dataframe, climatology, contain following columns: t column containing daily date values. event_no numeric event number label. intensity daily exceedance (default degrees C)   seasonal climatology. category category classification per day. second dataframe, event, contains default output function, detailed .","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/category.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the categories of events. — category","text":"explanation categories follows: Moderate- Events detected, maximum intensity   double distance seasonal climatology threshold value. II Strong- Events maximum intensity doubles distance seasonal   climatology threshold, triple . III Severe- Events triple aforementioned distance, quadruple . IV Extreme- Events maximum intensity four times greater   aforementioned distance. V Ice- `MCSice = T`, MCS event threshold -1.7°C classified .","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/category.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate the categories of events. — category","text":"Hobday et al. (2018). Categorizing Naming Marine Heatwaves. Oceanography 31(2). Schlegel et al. (2021). Marine cold-spells. Progress Oceanography 198(102684).","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/category.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the categories of events. — category","text":"Robert W. Schlegel","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/category.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the categories of events. — category","text":"","code":"res_WA <- detect_event(ts2clm(sst_WA,                        climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\"))) # Note that the name argument expects a character vector cat_WA <- category(res_WA, name = \"WA\") tail(cat_WA) #>    event_no event_name  peak_date   category  i_max duration p_moderate #> 71       40   WA 2010c 2010-12-02  II Strong 2.6563       15         73 #> 72       31   WA 2008a 2008-04-14 III Severe 3.7693       34         62 #> 73       22    WA 1999 1999-05-22  II Strong 3.6017       95         59 #> 74       58    WA 2014 2014-08-31  II Strong 2.1952       12         58 #> 75       61    WA 2015 2015-10-02  II Strong 2.4257        7         57 #> 76       42   WA 2011b 2011-02-28 IV Extreme 6.5060       60         47 #>    p_strong p_severe p_extreme        season #> 71       27        0         0        Spring #> 72       29        3         0   Summer/Fall #> 73       41        0         0   Fall/Winter #> 74       42        0         0        Winter #> 75       43        0         0 Winter/Spring #> 76       32        8        13   Summer/Fall  # If the data were collected in the northern hemisphere # we must let the function know this, as seen below res_Med <- detect_event(ts2clm(sst_Med,                         climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\"))) cat_Med <- category(res_Med, S = FALSE, name = \"Med\") tail(cat_Med) #>     event_no event_name  peak_date   category  i_max duration p_moderate #> 114       62  Med 2012b 2012-08-20  II Strong 4.2207       18         56 #> 115      118  Med 2022b 2022-07-20  II Strong 4.7292       79         56 #> 116       70   Med 2014 2014-10-18  II Strong 3.3075      144         49 #> 117      119  Med 2022c 2022-11-03  II Strong 3.5117       74         46 #> 118       44  Med 2007b 2007-04-25 III Severe 4.0220       19         42 #> 119       88  Med 2018a 2018-04-28  II Strong 3.2901       10         20 #>     p_strong p_severe p_extreme        season #> 114       44        0         0        Summer #> 115       44        0         0 Spring/Summer #> 116       50        0         0 Summer-Winter #> 117       53        0         0          Fall #> 118       53        5         0        Spring #> 119       80        0         0        Spring  # One may also choose to have this function output the daily # category classifications as well by setting: climatology = TRUE cat_WA_daily <- category(res_WA, name = \"WA\", climatology = TRUE) head(cat_WA_daily$climatology) #>            t event_no intensity   category #> 1 1984-06-03        1    1.5621 I Moderate #> 2 1984-06-04        1    1.7868 I Moderate #> 3 1984-06-05        1    1.9218 I Moderate #> 4 1984-06-06        1    1.6672 I Moderate #> 5 1984-06-07        1    1.5829 I Moderate #> 6 1984-06-17        2    2.0198 I Moderate"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/clim_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate daily mean, threshold, and variance climatologies. — clim_calc","title":"Calculate daily mean, threshold, and variance climatologies. — clim_calc","text":"internal function helps create climatologies output ts2clm.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/clim_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate daily mean, threshold, and variance climatologies. — clim_calc","text":"","code":"clim_calc(data, windowHalfWidth, pctile)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/clim_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate daily mean, threshold, and variance climatologies. — clim_calc","text":"data data given function calculations performed ts2clm. windowHalfWidth width smoothing window applied. width doubled centred around point smoothing occurs. Default = 5, makes overall window size 11. pctile Threshold percentile (%) detection events (MHWs). Default 90th percentile.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/clim_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate daily mean, threshold, and variance climatologies. — clim_calc","text":"function returns calculated climatologies.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/clim_calc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate daily mean, threshold, and variance climatologies. — clim_calc","text":"Smit, . J.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/clim_spread.html","id":null,"dir":"Reference","previous_headings":"","what":"Spread a time series wide to allow for a climatology to be calculated. — clim_spread","title":"Spread a time series wide to allow for a climatology to be calculated. — clim_spread","text":"internal function helps create wide time series used clim_calc within ts2clm produce climatology desired user.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/clim_spread.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spread a time series wide to allow for a climatology to be calculated. — clim_spread","text":"","code":"clim_spread(data, clim_start, clim_end, windowHalfWidth)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/clim_spread.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spread a time series wide to allow for a climatology to be calculated. — clim_spread","text":"data data given function calculations performed ts2clm. clim_start first day time series use spreading. clim_end last day time series use spreading. windowHalfWidth width smoothing window applied. width doubled centred around point smoothing occurs. Default = 5, makes overall window size 11.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/clim_spread.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spread a time series wide to allow for a climatology to be calculated. — clim_spread","text":"function returns data (matrix) wide format.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/clim_spread.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spread a time series wide to allow for a climatology to be calculated. — clim_spread","text":"Smit, . J., Villeneuve, ., Schlegel, R. W.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect heatwaves and cold-spells. — detect_event","title":"Detect heatwaves and cold-spells. — detect_event","text":"Applies Hobday et al. (2016) marine heat wave definition input time series given value (usually, necessarily limited , temperature) along daily date vector pre-calculated seasonal threshold climatologies, may either created ts2clm means.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect heatwaves and cold-spells. — detect_event","text":"","code":"detect_event(   data,   x = t,   y = temp,   seasClim = seas,   threshClim = thresh,   threshClim2 = NA,   minDuration = 5,   minDuration2 = minDuration,   joinAcrossGaps = TRUE,   maxGap = 2,   maxGap2 = maxGap,   coldSpells = FALSE,   protoEvents = FALSE,   categories = FALSE,   roundRes = 4,   returnDF = TRUE,   ... )"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect heatwaves and cold-spells. — detect_event","text":"data data frame least four columns. default setting (.e. omitting arguments x, y, seas, thresh; see immediately ), data set expected headers t, temp, seas, thresh. t column vector dates class Date, temp measured variable (default assumed temperature), seas seasonal cycle daily climatology (366 days), thresh seasonal cycle daily threshold events may detected. Data appropriate format created function ts2clm, data can supplied meet criteria specified ts2clm. column names data match outlined , following four arguments may ignored. Note also possible provide hourly data x column class POSIXct. x column expected contain vector dates per specification ts2clm. column headed t present dataframe, argument may omitted; otherwise, specify name column dates . Note also possible provide hourly data class POSIXct. y column containing measurement variable. column name differs default (.e. temp), specify name . seasClim dafault argument assumes seasonal climatology column called seas matches output ts2clm. column name seasonal climatology different, provide . threshClim threshold climatology column called thresh. , provide name threshold column . threshClim2 one wishes provide second climatology threshold filter rigorous detection events, vector column containing logical values (.e. TRUE FALSE) provided . default argument ignored. primary purpose allow inclusion tMin tMax thresholds. minDuration minimum duration acceptance detected events. default 5 days. minDuration2 minimum duration acceptance events filtering threshClim threshClim. default minDuration2 = minDuration ignored threshClim2 specified. joinAcrossGaps Boolean switch indicating whether join events occur /short gap specified maxGap. default TRUE. maxGap maximum length gap allowed joining MHWs. default 2 time steps. maxGap2 maximum gap length applying thresholds. default maxGap2 = maxGap ignored threshClim2 specified. coldSpells Boolean specifying code detect cold events instead warm events. default FALSE. Please note climatological thresholds cold-spells considered inverse MHWs. example, default setting detection MHWs pctile = 90, seen ts2clm. one want use detect_event MCSs, threshold best generated ts2clm setting pctile = 10 (see example ). value may used, setting used calculation MCSs Schlegel et al. (2017a). protoEvents default, protoEvents = FALSE, return full output comprised list two data frames, one climatology event metrics. See Value . protoEvents = TRUE, output contain original time series together columns indicating threshold criterion (threshCriterion) duration criterion (durationCriterion) exceeded, column showing heatwave present (.e. threshCriterion durationCriterion TRUE), sequential number uniquely identifying detected event(s); heatwave metrics reported event dataframe. Note also protoEvents = TRUE ignore whatever user provides categories argument anything else passed .... categories Rather using category separate step determine categories detected MHWs, one may choose set argument TRUE. One may pass arguments used category function function affect output. Note default behaviour category return event data . return list structure detect_event outputs default, add argument climatology = TRUE. roundRes argument allows user choose many decimal places MHW metric outputs rounded . Default 4. prevent rounding set roundRes = FALSE. argument may given numeric values FALSE. returnDF default (TRUE) tells function return results type data.frame. FALSE return results data.table. ... arguments passed internally category categories = TRUE. See documentation category list possible arguments.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect heatwaves and cold-spells. — detect_event","text":"function return list two data.frames, climatology event, , surprisingly, climatology event results, respectively. climatology contains full time series daily temperatures, well seasonal climatology, threshold various aspects events detected. software designed detecting extreme thermal events, units specified reflect intended purpose. However, various kinds extreme events may detected according specifications, case, appropriate units need determined user. climatology results contain column produced ts2clm well following: threshCriterion Boolean indicating temp exceeds   thresh. durationCriterion Boolean indicating whether periods consecutive   threshCriterion >= min_duration. event Boolean indicating criteria define extreme event   met. event_no sequential number indicating ID order   occurrence events. intensity difference temp (whichever column provided   y) seas. added categories = TRUE   climatology = TRUE. category category classification per day. added   categories = TRUE climatology = TRUE. event results summarised using range event metrics: event_no sequential number indicating ID order   events. index_start Start index event. index_end End index event. duration Duration event [days]. date_start Start date event [date]. date_end End date event [date]. date_peak Date event peak [date]. intensity_mean Mean intensity [deg. C]. intensity_max Maximum (peak) intensity [deg. C]. intensity_var Intensity variability (standard deviation) [deg. C]. intensity_cumulative Cumulative intensity [deg. C x days]. rate_onset Onset rate event [deg. C / day]. rate_decline Decline rate event [deg. C / day]. event_name name event. Generated name   value provided year date_peak   event. name value provided default \"Event\" used.   proposed Hobday et al. (2018), Moderate events given name   prevent multiple repeat names within year. two events   ranked greater Moderate reported within year,   differentiated addition trailing letter   (e.g. Event 2001a, Event 2001b). added categories = TRUE. category maximum category threshold reached/exceeded event.   added categories = TRUE. p_moderate proportion total duration (days) spent   first threshold, thresholds. added categories = TRUE. p_strong proportion total duration (days) spent   second threshold, thresholds. added categories = TRUE. p_severe proportion total duration (days) spent   third threshold, fourth threshold. added categories = TRUE. p_extreme proportion total duration (days) spent   fourth final threshold. added categories = TRUE. season season(s) event occurred. event   occurred across two seasons displayed e.g. \"Winter/Spring\".   Across three seasons e.g. \"Winter-Summer\". Events lasting across four   seasons listed \"Year-round\". December (June) used start   Austral (Boreal) summer. \"start\", \"peak\", \"end\" given season   argument one season chosen period given.   added categories = TRUE. intensity_max_relThresh, intensity_mean_relThresh, intensity_var_relThresh, intensity_cumulative_relThresh except relative threshold (e.g., 90th percentile) rather seasonal climatology. intensity_max_abs, intensity_mean_abs, intensity_var_abs, intensity_cumulative_abs except absolute magnitudes rather relative seasonal climatology threshold. Note rate_onset rate_decline return NA event begins/ends first/last day time series. may particularly evident function applied large gridded data sets. Although metrics contain errors provide sensible values, please take account interpretation.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect heatwaves and cold-spells. — detect_event","text":"function assumes input time series consists continuous daily values missing values. Time ranges start end part-way calendar year supported. accompanying function ts2clm aids preparation time series suitable use detect_event, although may also accomplished 'hand' long criteria met discussed documentation ts2clm. calculation onset decline rates assumes events started half-day start day ended half-day end-day. consistent duration definition implemented, assumes duration = end day - start day + 1. event already present beginning time series, event still present end time series, report rate onset rate decline NA, impossible know temperature half day start end event . purposes event detection, missing temperature values interpolated (optional maxPadLength ts2clm) set equal seasonal climatology. means trigger end/start adjacent temperature values satisfy event definition criteria. code used detect cold events (coldSpells = TRUE), works just heat waves except events detected deviations (100 - pctile)th percentile (e.g., 10th instead 90th) least 5 days. Intensities reported negative values represent temperature anomaly climatology. original Python algorithm written Eric Oliver, Institute Marine Antarctic Studies, University Tasmania, Feb 2015, documented Hobday et al. (2016). marine cold spell option implemented version 0.13 (21 Nov 2015) Python module result preparation Schlegel et al. (2017), wherein cold events receive brief overview.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Detect heatwaves and cold-spells. — detect_event","text":"Hobday, .J. et al. (2016). hierarchical approach defining marine heatwaves, Progress Oceanography, 141, pp. 227-238, doi:10.1016/j.pocean.2015.12.014 Schlegel, R. W., Oliver, C. J., Wernberg, T. W., Smit, . J. (2017). Nearshore offshore co-occurrences marine heatwaves cold-spells. Progress Oceanography, 151, pp. 189-205, doi:10.1016/j.pocean.2017.01.004","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Detect heatwaves and cold-spells. — detect_event","text":"Albertus J. Smit, Robert W. Schlegel, Eric C. J. Oliver","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect heatwaves and cold-spells. — detect_event","text":"","code":"data.table::setDTthreads(threads = 1) res_clim <- ts2clm(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\")) out <- detect_event(res_clim) # show a portion of the climatology: out$climatology[1:10, ] #>    doy          t  temp    seas  thresh threshCriterion durationCriterion event #> 1    1 1982-01-01 20.94 21.6080 22.9605           FALSE             FALSE FALSE #> 2    2 1982-01-02 21.25 21.6348 22.9987           FALSE             FALSE FALSE #> 3    3 1982-01-03 21.38 21.6621 23.0376           FALSE             FALSE FALSE #> 4    4 1982-01-04 21.16 21.6895 23.0771           FALSE             FALSE FALSE #> 5    5 1982-01-05 21.26 21.7169 23.1130           FALSE             FALSE FALSE #> 6    6 1982-01-06 21.61 21.7436 23.1460           FALSE             FALSE FALSE #> 7    7 1982-01-07 21.74 21.7699 23.1775           FALSE             FALSE FALSE #> 8    8 1982-01-08 21.50 21.7958 23.2080           FALSE             FALSE FALSE #> 9    9 1982-01-09 21.40 21.8217 23.2366           FALSE             FALSE FALSE #> 10  10 1982-01-10 21.36 21.8478 23.2649           FALSE             FALSE FALSE #>    event_no #> 1        NA #> 2        NA #> 3        NA #> 4        NA #> 5        NA #> 6        NA #> 7        NA #> 8        NA #> 9        NA #> 10       NA # show some of the heat waves: out$event[1:5, 1:10] #>   event_no index_start index_peak index_end duration date_start  date_peak #> 1        1         885        887       889        5 1984-06-03 1984-06-05 #> 2        2         899        901       904        6 1984-06-17 1984-06-19 #> 3        3         908        922       926       19 1984-06-26 1984-07-10 #> 4        4        1023       1027      1029        7 1984-10-19 1984-10-23 #> 5        5        1033       1034      1037        5 1984-10-29 1984-10-30 #>     date_end intensity_mean intensity_max #> 1 1984-06-07         1.7042        1.9218 #> 2 1984-06-22         1.9851        2.1063 #> 3 1984-07-14         1.9094        2.2165 #> 4 1984-10-25         1.4626        1.8304 #> 5 1984-11-02         1.3034        1.4887  # Or if one wants to calculate MCSs res_clim <- ts2clm(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\"),                    pctile = 10) out <- detect_event(res_clim, coldSpells = TRUE) # show a portion of the climatology: out$climatology[1:10, ] #>    doy          t  temp    seas  thresh threshCriterion durationCriterion event #> 1    1 1982-01-01 20.94 21.6080 20.5471           FALSE             FALSE FALSE #> 2    2 1982-01-02 21.25 21.6348 20.5713           FALSE             FALSE FALSE #> 3    3 1982-01-03 21.38 21.6621 20.5961           FALSE             FALSE FALSE #> 4    4 1982-01-04 21.16 21.6895 20.6218           FALSE             FALSE FALSE #> 5    5 1982-01-05 21.26 21.7169 20.6499           FALSE             FALSE FALSE #> 6    6 1982-01-06 21.61 21.7436 20.6776           FALSE             FALSE FALSE #> 7    7 1982-01-07 21.74 21.7699 20.7053           FALSE             FALSE FALSE #> 8    8 1982-01-08 21.50 21.7958 20.7362           FALSE             FALSE FALSE #> 9    9 1982-01-09 21.40 21.8217 20.7655           FALSE             FALSE FALSE #> 10  10 1982-01-10 21.36 21.8478 20.7927           FALSE             FALSE FALSE #>    event_no #> 1        NA #> 2        NA #> 3        NA #> 4        NA #> 5        NA #> 6        NA #> 7        NA #> 8        NA #> 9        NA #> 10       NA # show some of the cold-spells: out$event[1:5, 1:10] #>   event_no index_start index_peak index_end duration date_start  date_peak #> 1        1          83         83        87        5 1982-03-24 1982-03-24 #> 2        2         194        199       207       14 1982-07-13 1982-07-18 #> 3        3         270        272       277        8 1982-09-27 1982-09-29 #> 4        4         296        303       306       11 1982-10-23 1982-10-30 #> 5        5         672        681       685       14 1983-11-03 1983-11-12 #>     date_end intensity_mean intensity_max #> 1 1982-03-28        -1.4543       -1.5877 #> 2 1982-07-26        -1.8033       -2.7304 #> 3 1982-10-04        -1.2378       -1.3891 #> 4 1982-11-02        -1.0167       -1.2813 #> 5 1983-11-16        -1.1806       -1.4954  # It is also possible to calculate the categories of events directly # See the \\code{\\link{category}} documentation for more functionality res_clim <- ts2clm(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\")) out_event <- detect_event(res_clim, categories = TRUE) out_list <- detect_event(res_clim, categories = TRUE, climatology = TRUE)  # It is also possible to give two separate sets of threshold criteria  # To use a second static threshold we first use the exceedance function thresh_19 <- exceedance(sst_Med, threshold = 19, minDuration = 10, maxGap = 0)$threshold # Then we use that output when detecting our events events_19 <- detect_event(ts2clm(sst_Med, climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\")),                          threshClim2 = thresh_19$exceedance, minDuration2 = 10, maxGap2 = 0)  # If we want to use two different percentile thresholds we use detect_event thresh_95 <- detect_event(ts2clm(sst_Med, pctile = 95,                                  climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\")),                           minDuration = 2, maxGap = 0)$climatology # Then we use that output when detecting our events events_95 <- detect_event(ts2clm(sst_Med, climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\")),                           threshClim2 = thresh_95$event, minDuration2 = 2, maxGap2 = 0)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event3.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect heatwaves and cold-spells. — detect_event3","title":"Detect heatwaves and cold-spells. — detect_event3","text":"detect_event3 data.table version earlier detect_event. applies Hobday et al. (2016) marine heat wave definition input time series given value (usually, necessarily limited , temperature) along daily date vector pre-calculated seasonal threshold climatologies, may either created ts2clm3 means.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect heatwaves and cold-spells. — detect_event3","text":"","code":"detect_event3(   data,   x = t,   y = temp,   seasClim = seas,   threshClim = thresh,   threshClim2 = NA,   minDuration = 5,   minDuration2 = minDuration,   joinAcrossGaps = TRUE,   maxGap = 2,   maxGap2 = maxGap,   coldSpells = FALSE,   protoEvents = FALSE,   categories = FALSE,   roundRes = 4,   ... )"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect heatwaves and cold-spells. — detect_event3","text":"data data frame least four columns. default setting (.e. omitting arguments x, y, seas, thresh; see immediately ), data set expected headers t, temp, seas, thresh. t column vector dates class Date, temp measured variable (default assumed temperature), seas seasonal cycle daily climatology (366 days), thresh seasonal cycle daily threshold events may detected. Data appropriate format created function ts2clm3, data can supplied meet criteria specified ts2clm3. column names data match outlined , following four arguments may ignored. x column expected contain vector dates per specification ts2clm3. column headed t present data.table, argument may omitted; otherwise, specify name column dates . y column containing measurement variable. column name differs default (.e. temp), specify name . seasClim default argument assumes seasonal climatology column called seas matches output ts2clm3. column name seasonal climatology different, provide . threshClim threshold climatology column called thresh. , provide name threshold column . threshClim2 one wishes provide second climatology threshold filter rigorous detection events, vector column containing logical values (.e. TRUE FALSE) provided . default argument ignored. primary purpose allow inclusion tMin tMax thresholds. minDuration minimum duration acceptance detected events. default 5 days. minDuration2 minimum duration acceptance events filtering threshClim threshClim. default minDuration2 = minDuration ignored threshClim2 specified. joinAcrossGaps Boolean switch indicating whether join events occur /short gap specified maxGap. default TRUE. maxGap maximum length gap allowed joining MHWs. default 2 days. maxGap2 maximum gap length applying thresholds. default maxGap2 = maxGap ignored threshClim2 specified. coldSpells Boolean specifying code detect cold events instead warm events. default FALSE. Please note climatological thresholds cold-spells considered inverse MHWs. example, default setting detection MHWs pctile = 90, seen ts2clm3. one want use detect_event3 MCSs, threshold best generated ts2clm3 setting pctile = 10 (see example ). value may used, setting used calculation MCSs Schlegel et al. (2017a). protoEvents Boolean. default setting protoEvents = FALSE list two components reported. first component (climatology) original time series returned ts2clm3 augmented columns indicating threshold criterion (threshCriterion) duration criterion (durationCriterion) exceeded, column showing heatwave present (.e. threshCriterion durationCriterion TRUE), sequential number uniquely identifying detected event(s). second list component (event) contain heatwave event metrics. protoEvents = TRUE climatology reported. Note also protoEvents = TRUE ignore whatever user provides categories argument anything else passed .... categories Boolean. Rather using category separate step determine categories detected MHWs, one may choose set argument TRUE. One may pass arguments used category function function affect output. Note default behaviour category return event data . return list structure detect_event3 outputs default, add argument climatology = TRUE. default categories = FALSE. roundRes argument allows user choose many decimal places MHW metric outputs rounded . Default 4. prevent rounding set roundRes = FALSE. argument may given numeric values FALSE. ... Allows unused arguments pass functions.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect heatwaves and cold-spells. — detect_event3","text":"function return list two data.frames, climatology event, , surprisingly, climatology event results, respectively. climatology contains full time series daily temperatures, well seasonal climatology, threshold various aspects events detected. software designed detecting extreme thermal events, units specified reflect intended purpose. However, various kinds extreme events may detected according specifications, case, appropriate units need determined user. Note exact content output depends specific combinations arguments protoEvents, categories, climatology: threshCriterion Boolean indicating temp exceeds   thresh. durationCriterion Boolean indicating whether periods consecutive   threshCriterion >= min_duration. event Boolean indicating criteria define extreme event   met. event_no sequential number indicating ID order   occurrence events. intensity difference temp (column provided   y) seas. added categories = TRUE   climatology = TRUE. category category classification per day. added   categories = TRUE climatology = TRUE. event results summarised using range event metrics: event_no sequential number indicating ID order   events. index_start Start index event. index_end End index event. duration Duration event [days]. date_start Start date event [date]. date_end End date event [date]. date_peak Date event peak [date]. intensity_mean Mean intensity [deg. C]. intensity_max Maximum (peak) intensity [deg. C]. intensity_var Intensity variability (standard deviation) [deg. C]. intensity_cumulative Cumulative intensity [deg. C x days]. rate_onset Onset rate event [deg. C / day]. rate_decline Decline rate event [deg. C / day]. intensity_max_relThresh, intensity_mean_relThresh, intensity_var_relThresh, intensity_cumulative_relThresh except relative threshold (e.g., 90th percentile) rather seasonal climatology. intensity_max_abs, intensity_mean_abs, intensity_var_abs, intensity_cumulative_abs except absolute magnitudes rather relative seasonal climatology threshold. Note rate_onset rate_decline return NA event begins/ends first/last day time series. may particularly evident function applied large gridded data sets. Although metrics contain errors provide sensible values, please take account interpretation.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect heatwaves and cold-spells. — detect_event3","text":"function assumes input time series consists continuous daily values missing values. Time ranges start end part-way calendar year supported. accompanying function ts2clm3 aids preparation time series suitable use detect_event3, although may also accomplished 'hand' long criteria met discussed documentation ts2clm3. calculation onset decline rates assumes events started half-day start day ended half-day end-day. consistent duration definition implemented, assumes duration = end day - start day + 1. event already present beginning time series, event still present end time series, report rate onset rate decline NA, impossible know temperature half day start end event . purposes event detection, missing temperature values interpolated (optional maxPadLength ts2clm3) set equal seasonal climatology. means trigger end/start adjacent temperature values satisfy event definition criteria. code used detect cold events (coldSpells = TRUE), works just heat waves except events detected deviations (100 - pctile)th percentile (e.g., 10th instead 90th) least 5 days. Intensities reported negative values represent temperature anomaly climatology. original Python algorithm written Eric Oliver, Institute Marine Antarctic Studies, University Tasmania, Feb 2015, documented Hobday et al. (2016). marine cold spell option implemented version 0.13 (21 Nov 2015) Python module result preparation Schlegel et al. (2017), wherein cold events receive brief overview.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event3.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Detect heatwaves and cold-spells. — detect_event3","text":"Hobday, .J. et al. (2016). hierarchical approach defining marine heatwaves, Progress Oceanography, 141, pp. 227-238, doi:10.1016/j.pocean.2015.12.014 Schlegel, R. W., Oliver, C. J., Wernberg, T. W., Smit, . J. (2017). Nearshore offshore co-occurrences marine heatwaves cold-spells. Progress Oceanography, 151, pp. 189-205, doi:10.1016/j.pocean.2017.01.004","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event3.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Detect heatwaves and cold-spells. — detect_event3","text":"Albertus J. Smit, Robert W. Schlegel, Eric C. J. Oliver","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/detect_event3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect heatwaves and cold-spells. — detect_event3","text":"","code":"data.table::setDTthreads(threads = 1) # optimise for your code and local computer res_clim <- ts2clm3(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\")) out <- detect_event3(res_clim) # show a portion of the climatology: out$climatology[1:10, ] #>           ts_x  ts_y ts_seas ts_thresh threshCriterion durationCriterion  event #>         <Date> <num>   <num>     <num>          <lgcl>            <lgcl> <lgcl> #>  1: 1982-01-01 20.94 21.6080   22.9605           FALSE             FALSE  FALSE #>  2: 1982-01-02 21.25 21.6348   22.9987           FALSE             FALSE  FALSE #>  3: 1982-01-03 21.38 21.6621   23.0376           FALSE             FALSE  FALSE #>  4: 1982-01-04 21.16 21.6895   23.0771           FALSE             FALSE  FALSE #>  5: 1982-01-05 21.26 21.7169   23.1130           FALSE             FALSE  FALSE #>  6: 1982-01-06 21.61 21.7436   23.1460           FALSE             FALSE  FALSE #>  7: 1982-01-07 21.74 21.7699   23.1775           FALSE             FALSE  FALSE #>  8: 1982-01-08 21.50 21.7958   23.2080           FALSE             FALSE  FALSE #>  9: 1982-01-09 21.40 21.8217   23.2366           FALSE             FALSE  FALSE #> 10: 1982-01-10 21.36 21.8478   23.2649           FALSE             FALSE  FALSE #>     event_no #>        <int> #>  1:       NA #>  2:       NA #>  3:       NA #>  4:       NA #>  5:       NA #>  6:       NA #>  7:       NA #>  8:       NA #>  9:       NA #> 10:       NA # show some of the heat waves: out$event[1:5, 1:10] #>    event_no index_start index_peak index_end duration date_start  date_peak #>       <int>       <int>      <int>     <int>    <num>     <Date>     <Date> #> 1:        1         885        887       889        5 1984-06-03 1984-06-05 #> 2:        2         899        901       904        6 1984-06-17 1984-06-19 #> 3:        3         908        922       926       19 1984-06-26 1984-07-10 #> 4:        4        1023       1027      1029        7 1984-10-19 1984-10-23 #> 5:        5        1033       1034      1037        5 1984-10-29 1984-10-30 #>      date_end intensity_mean intensity_max #>        <Date>          <num>         <num> #> 1: 1984-06-07         1.7042        1.9218 #> 2: 1984-06-22         1.9851        2.1063 #> 3: 1984-07-14         1.9094        2.2165 #> 4: 1984-10-25         1.4626        1.8304 #> 5: 1984-11-02         1.3034        1.4887  # Or if one wants to calculate MCSs res_clim <- ts2clm3(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\"),                     pctile = 10) out <- detect_event3(res_clim, coldSpells = TRUE) # show a portion of the climatology: out$climatology[1:10, ] #>           ts_x   ts_y  ts_seas ts_thresh threshCriterion durationCriterion #>         <Date>  <num>    <num>     <num>          <lgcl>            <lgcl> #>  1: 1982-01-01 -20.94 -21.6080  -20.5471           FALSE             FALSE #>  2: 1982-01-02 -21.25 -21.6348  -20.5713           FALSE             FALSE #>  3: 1982-01-03 -21.38 -21.6621  -20.5961           FALSE             FALSE #>  4: 1982-01-04 -21.16 -21.6895  -20.6218           FALSE             FALSE #>  5: 1982-01-05 -21.26 -21.7169  -20.6499           FALSE             FALSE #>  6: 1982-01-06 -21.61 -21.7436  -20.6776           FALSE             FALSE #>  7: 1982-01-07 -21.74 -21.7699  -20.7053           FALSE             FALSE #>  8: 1982-01-08 -21.50 -21.7958  -20.7362           FALSE             FALSE #>  9: 1982-01-09 -21.40 -21.8217  -20.7655           FALSE             FALSE #> 10: 1982-01-10 -21.36 -21.8478  -20.7927           FALSE             FALSE #>      event event_no #>     <lgcl>    <int> #>  1:  FALSE       NA #>  2:  FALSE       NA #>  3:  FALSE       NA #>  4:  FALSE       NA #>  5:  FALSE       NA #>  6:  FALSE       NA #>  7:  FALSE       NA #>  8:  FALSE       NA #>  9:  FALSE       NA #> 10:  FALSE       NA # show some of the cold-spells: out$event[1:5, 1:10] #>    event_no index_start index_peak index_end duration date_start  date_peak #>       <int>       <int>      <int>     <int>    <num>     <Date>     <Date> #> 1:        1          83         83        87        5 1982-03-24 1982-03-24 #> 2:        2         194        199       207       14 1982-07-13 1982-07-18 #> 3:        3         270        272       277        8 1982-09-27 1982-09-29 #> 4:        4         296        303       306       11 1982-10-23 1982-10-30 #> 5:        5         672        681       685       14 1983-11-03 1983-11-12 #>      date_end intensity_mean intensity_max #>        <Date>          <num>         <num> #> 1: 1982-03-28        -1.4543       -1.5877 #> 2: 1982-07-26        -1.8033       -2.7304 #> 3: 1982-10-04        -1.2378       -1.3891 #> 4: 1982-11-02        -1.0167       -1.2813 #> 5: 1983-11-16        -1.1806       -1.4954  # It is also possible to give two separate sets of threshold criteria  # To use a second static threshold we first use the exceedance function thresh_19 <- exceedance(sst_Med, threshold = 19, minDuration = 10, maxGap = 0)$threshold # Then we use that output when detecting our events events_19 <- detect_event3(ts2clm3(sst_Med, climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\")),                            threshClim2 = thresh_19$exceedance, minDuration2 = 10, maxGap2 = 0)  # If we want to use two different percentile thresholds thresh_95 <- detect_event3(ts2clm3(sst_Med, pctile = 95,                                    climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\")),                            minDuration = 2, maxGap = 0)$climatology # Then we use that output when detecting our events events_95 <- detect_event3(ts2clm3(sst_Med, climatologyPeriod = c(\"1982-01-01\", \"2011-12-31\")),                            threshClim2 = thresh_95$event, minDuration2 = 2, maxGap2 = 0)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/event_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a line plot of heatwaves or cold-spells. — event_line","title":"Create a line plot of heatwaves or cold-spells. — event_line","text":"Creates graph warm cold events per second row Figure 3 Hobday et al. (2016).","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/event_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a line plot of heatwaves or cold-spells. — event_line","text":"","code":"event_line(   data,   x = t,   y = temp,   metric = intensity_cumulative,   min_duration = 5,   spread = 150,   start_date = NULL,   end_date = NULL,   category = FALSE,   x_axis_title = NULL,   x_axis_text_angle = NULL,   y_axis_title = NULL,   y_axis_range = NULL,   line_colours = NULL )"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/event_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a line plot of heatwaves or cold-spells. — event_line","text":"data function receives full (list) output detect_event function. x column expected contain vector dates per specification make_whole_fast. column headed t present dataframe, argument may omitted; otherwise, specify name column dates . Note function work hourly data. y column containing measurement variable. column name differs default (.e. temp), specify name . metric tells function choose event highlighted 'greatest' events chosen period. Partial name matching currently supported please specify metric name precisely. default intensity_cumulative. min_duration minimum duration (days) event must qualify heatwave cold-spell. spread number days leading trailing largest event (per metric) detected within time period specified start_date end_date. default 150 days. start_date start date period time within largest event (per metric) retrieved plotted. may necessarily correspond biggest event specified metric within entire time series. plot largest event within whole time series, make sure start_date end_date straddle event, simply leave NULL (default) event_line use entire time series date range. end_date end date period time within largest event (per metric) retrieved plotted. See start_date additional information. category boolean choice TRUE FALSE. set FALSE (default) event_line() produce figure per second row Figure 3 Hobday et al. (2016). set TRUE figure showing different categories MHWs chosen period, highlighted seen Figure 3 Hobday et al. (review), produced. category = TRUE, metric ignored different colouring scheme used. x_axis_title one like add title x-axis may provided . x_axis_text_angle one like change angle x-axis text, provide angle single numeric value. y_axis_title Provide text one like title y-axis \"Temperature °C\" (default) y_axis_range one like control y-axis range, provide desired limits two numeric values (e.g. c(20, 30)). line_colours Provide vector colours line geoms plot. default base plot c(\"black\", \"blue\", \"darkgreen\"), categories : c(\"black\", \"gray20\", \"darkgreen\", \"darkgreen\", \"darkgreen\", \"darkgreen\"). Note three (category = FALSE) six (category = TRUE) colours must provided, colours excess requirement ignored.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/event_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a line plot of heatwaves or cold-spells. — event_line","text":"function return line plot indicating climatology, threshold temperature, hot cold events meet specifications Hobday et al. (2016) shaded appropriate. plotting hot cold events depends option specified detect_event. top event detect selected time period visible brighter colour. function differs use geom_flame creates stand alone figure. benefit one must prior knowledge ggplot2 create figure.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/event_line.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a line plot of heatwaves or cold-spells. — event_line","text":"Hobday, .J. et al. (2016), hierarchical approach defining marine heatwaves, Progress Oceanography, 141, pp. 227-238, doi: 10.1016/j.pocean.2015.12.014","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/event_line.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a line plot of heatwaves or cold-spells. — event_line","text":"Robert W. Schlegel","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/event_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a line plot of heatwaves or cold-spells. — event_line","text":"","code":"ts <- ts2clm(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\")) res <- detect_event(ts)  event_line(res, spread = 100, metric = duration, start_date = \"2010-12-01\", end_date = \"2011-06-30\")   event_line(res, spread = 100, start_date = \"2010-12-01\", end_date = \"2011-06-30\", category = TRUE)   event_line(res, spread = 100, start_date = \"2010-12-01\", end_date = \"2011-06-30\", category = TRUE, line_colours = c(\"black\", \"blue\", \"gray20\", \"gray20\", \"gray20\", \"gray20\"))"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/exceedance.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect consecutive days in exceedance above or below of a given threshold. — exceedance","title":"Detect consecutive days in exceedance above or below of a given threshold. — exceedance","text":"Detect consecutive days exceedance given threshold.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/exceedance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect consecutive days in exceedance above or below of a given threshold. — exceedance","text":"","code":"exceedance(   data,   x = t,   y = temp,   threshold,   below = FALSE,   minDuration = 5,   joinAcrossGaps = TRUE,   maxGap = 2,   maxPadLength = FALSE,   roundRes = 4,   returnDF = TRUE )"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/exceedance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect consecutive days in exceedance above or below of a given threshold. — exceedance","text":"data data frame least two following columns: t column vector dates class Date, temp column, temperature given dates. columns named differently, names can supplied x y (see ). function accurately detect consecutive days temperatures exceedance threshold missing days data filled NA. Data appropriate format created internal function make_whole_fast, data may used directly meet given criteria. Note also possible provide hourly data x column class POSIXct. x column expected contain vector dates per specification make_whole_fast. column headed t present dataframe, argument may omitted; otherwise, specify name column dates . Note also possible provide hourly data class POSIXct. y column containing measurement variable. column name differs default (.e. temp), specify name . threshold static threshold used determine many consecutive days exceedance temperature interest. Default FALSE. set TRUE, consecutive days temperature threshold variable calculated. set FALSE, consecutive days threshold variable calculated. minDuration Minimum duration temperatures must exceedance threshold variable. default 5 days. joinAcrossGaps TRUE/FALSE statement indicates whether join consecutive days temperatures exceedance threshold across small gap groups /short gap specified maxGap. default TRUE. maxGap maximum length gap across connect consecutive days exceedance threshold joinAcrossGaps = TRUE. maxPadLength Specifies maximum length days interpolate (pad) missing data (specified NA) input temperature time series; .e., consecutive blocks NAs length greater maxPadLength left NA. Set integer. default 3 days. Note units hours hourly data provided. roundRes argument allows user choose many decimal places exceedance metric outputs rounded . Default 4. prevent rounding set roundRes = FALSE. argument may given numeric values FALSE. returnDF default (TRUE) tells function return results type data.frame. FALSE return results data.table.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/exceedance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect consecutive days in exceedance above or below of a given threshold. — exceedance","text":"function return list two data.frames. first threshold, shows daily temperatures specific days given threshold exceeded. second component list exceedance, shows medley statistics discrete group days exceedance given threshold. Note additional columns left data frame given function output threshold component output. example, one uses ts2clm prepare time series analysis leaves doy column, column appear output. information shown threshold component : t date temperature measurement. variable may named   differently alternative name supplied function's x   argument. temp Temperature specified date [deg. C]. variable may   named differently alternative name supplied function's y   argument. thresh static threshold chosen user [deg. C]. thresh_criterion Boolean indicating temp exceeds   threshold. duration_criterion Boolean indicating whether periods consecutive   thresh_criterion >= minDuration. exceedance Boolean indicting criteria define discrete   group exceedance threshold met. exceedance_no sequential number indicating ID order   occurrence exceedances. individual exceedances summarised using following metrics: exceedance_no sequential number indicating ID   order exceedance found threshold component   output list. index_start Row number exceedance starts. index_peak Row number exceedance peaks. index_end Row number exceedance ends. duration Duration exceedance [days]. date_start Start date exceedance [date]. date_peak Date exceedance peak [date]. date_end End date exceedance [date]. intensity_mean Mean intensity [deg. C]. intensity_max Maximum (peak) intensity [deg. C]. intensity_var Intensity standard deviation [deg. C]. intensity_cumulative Cumulative intensity [deg. C x days]. rate_onset Onset rate exceedance [deg. C / day]. rate_decline Decline rate exceedance [deg. C / day]. intensity_max_abs, intensity_mean_abs, intensity_var_abs, intensity_cum_abs except absolute magnitudes rather relative threshold.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/exceedance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect consecutive days in exceedance above or below of a given threshold. — exceedance","text":"function assumes input time series consists continuous daily temperatures, missing values. accompanying function make_whole_fast aids preparation time series suitable use exceedance, although may also accomplished 'hand' long criteria met discussed documentation make_whole_fast. Future versions seek accommodate monthly annual time series, . calculation onset decline rates assumes exceedance threshold started half-day start day ended half-day end-day. consistent duration definition implemented, assumes duration = end day - start day + 1. purposes exceedance detection, missing temperature values interpolated (optional maxPadLength) remain NA. means trigger end exceedance adjacent temperature values exceedance threshold. function used detect consecutive days temperature given theshold, temperatures taken exceedance threshold antonym English language 'exceedance'. function based largely detect_event function found package, ported Python algorithm written Eric Oliver, Institute Marine Antarctic Studies, University Tasmania, Feb 2015, documented Hobday et al. (2016).","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/exceedance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Detect consecutive days in exceedance above or below of a given threshold. — exceedance","text":"Robert W. Schlegel, Albertus J. Smit","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/exceedance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect consecutive days in exceedance above or below of a given threshold. — exceedance","text":"","code":"res <- exceedance(sst_WA, threshold = 25) # show first ten days of daily data: res$threshold[1:10, ] #>             t  temp thresh threshCriterion durationCriterion exceedance #> 1  1982-01-01 20.94     25           FALSE             FALSE      FALSE #> 2  1982-01-02 21.25     25           FALSE             FALSE      FALSE #> 3  1982-01-03 21.38     25           FALSE             FALSE      FALSE #> 4  1982-01-04 21.16     25           FALSE             FALSE      FALSE #> 5  1982-01-05 21.26     25           FALSE             FALSE      FALSE #> 6  1982-01-06 21.61     25           FALSE             FALSE      FALSE #> 7  1982-01-07 21.74     25           FALSE             FALSE      FALSE #> 8  1982-01-08 21.50     25           FALSE             FALSE      FALSE #> 9  1982-01-09 21.40     25           FALSE             FALSE      FALSE #> 10 1982-01-10 21.36     25           FALSE             FALSE      FALSE #>    exceedance_no #> 1             NA #> 2             NA #> 3             NA #> 4             NA #> 5             NA #> 6             NA #> 7             NA #> 8             NA #> 9             NA #> 10            NA # show first five exceedances: res$exceedance[1:5, ] #>   exceedance_no index_start index_peak index_end duration date_start  date_peak #> 1             1        2682       2683      2686        5 1989-05-05 1989-05-06 #> 2             2        6342       6351      6358       17 1999-05-13 1999-05-22 #> 3             3        6362       6363      6368        7 1999-06-02 1999-06-03 #> 4             4        6686       6688      6691        6 2000-04-21 2000-04-23 #> 5             5        6698       6699      6707       10 2000-05-03 2000-05-04 #>     date_end intensity_mean intensity_max intensity_var intensity_cumulative #> 1 1989-05-09         0.2860          0.36        0.0462                 1.43 #> 2 1999-05-29         0.8559          1.40        0.3859                14.55 #> 3 1999-06-08         0.2071          0.27        0.0512                 1.45 #> 4 2000-04-26         0.1550          0.41        0.1803                 0.93 #> 5 2000-05-12         0.6970          1.01        0.2747                 6.97 #>   intensity_mean_abs intensity_max_abs intensity_var_abs intensity_cum_abs #> 1            25.2860             25.36            0.0462            126.43 #> 2            25.8559             26.40            0.3859            439.55 #> 3            25.2071             25.27            0.0512            176.45 #> 4            25.1550             25.41            0.1803            150.93 #> 5            25.6970             26.01            0.2747            256.97 #>   rate_onset rate_decline #> 1     0.1900       0.1171 #> 2     0.1826       0.1787 #> 3     0.1400       0.0555 #> 4     0.2540       0.1214 #> 5     0.5600       0.1371"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_flame.html","id":null,"dir":"Reference","previous_headings":"","what":"Create 'flame' polygons. — geom_flame","title":"Create 'flame' polygons. — geom_flame","text":"function create polygons two lines. given temperature theshold time series, like produced detect_event, output meet specifications Hobday et al. (2016) shown 'flame polygons.' one wishes plot polygons given threshold, , switch values fed y y2 aesthetics. function differs use event_line must created ggplot 'geom' object. benefit one may add additional information figure geom layers ggplot2 graphs may necessary.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_flame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create 'flame' polygons. — geom_flame","text":"","code":"geom_flame(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   n = 0,   n_gap = 0,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_flame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create 'flame' polygons. — geom_flame","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. ... arguments passed layer. often aesthetics, used set aesthetic fixed value, like color = \"red\" linewidth = 3. may also parameters paired geom/stat. n number steps along x-axis (.e. daily time series days) required area y y2 filled . default 0 fill _all_ area lines. standard match Hobday et al. (2016) n = 5. n_gap number steps along x-axis (.e. daily time series days) within allow geom_flame() connect polygons. useful one wants screen parts polygon dip briefly y coming back . defauly 0 connect polygons. standard match Hobday et al. (2016) n_gap = 2. na.rm FALSE (default), removes missing values warning. TRUE silently removes missing values. show.legend Logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_flame.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create 'flame' polygons. — geom_flame","text":"geom_flame understands following aesthetics (required aesthetics bold): x y y2 colour fill linewidth alpha linetype","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_flame.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create 'flame' polygons. — geom_flame","text":"Hobday, .J. et al. (2016), hierarchical approach defining marine heatwaves, Progress Oceanography, 141, pp. 227-238, doi: 10.1016/j.pocean.2015.12.014","code":""},{"path":[]},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_flame.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create 'flame' polygons. — geom_flame","text":"Robert W. Schlegel","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_flame.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create 'flame' polygons. — geom_flame","text":"","code":"ts <- ts2clm(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\")) res <- detect_event(ts) mhw <- res$clim mhw <- mhw[10580:10690,]  library(ggplot2)  ggplot(mhw, aes(x = t, y = temp)) +   geom_flame(aes(y2 = thresh)) +   geom_text(aes(x = as.Date(\"2011-02-01\"), y = 28,             label = \"That's not a heatwave.\\nThis, is a heatwave.\")) +   xlab(\"Date\") + ylab(expression(paste(\"Temperature [\", degree, \"C]\"))) #> Warning: All aesthetics have length 1, but the data has 111 rows. #> ℹ Please consider using `annotate()` or provide this layer with data containing #>   a single row."},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_lolli.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualise a timeline of several event metrics as 'lollipops'. — geom_lolli","title":"Visualise a timeline of several event metrics as 'lollipops'. — geom_lolli","text":"function return graph intensity selected metric along *y*-axis versus time variable along *x*-axis. number top events (n) chosen metric may highlighted brighter colour aesthetic value colour_n. function differs use lolli_plot must created ggplot2 'geom' object. benefit one may add additional information layer layer figure geoms necessary.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_lolli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualise a timeline of several event metrics as 'lollipops'. — geom_lolli","text":"","code":"geom_lolli(   mapping = NULL,   data = NULL,   ...,   n = 0,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_lolli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualise a timeline of several event metrics as 'lollipops'. — geom_lolli","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. ... arguments passed layer. often aesthetics, used set aesthetic fixed value, like color = \"red\" size = 3. may also parameters paired geom/stat. n number top events highlight based value provided aes(y). Default 0. na.rm FALSE (default), removes missing values warning. TRUE silently removes missing values. show.legend Logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_lolli.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Visualise a timeline of several event metrics as 'lollipops'. — geom_lolli","text":"geom_lolli understands following aesthetics (required aesthetics bold): x y alpha color linetype size shape stroke fill colour_n value may used aesthetic, works   better parameter function set use discrete values.   One may provide continuous values colour_n remember one may   provide multiple continuous discrete scales single ggplot2 object.   Therefore, one provides continuous value aes(colour), values   supplied colour_n must discrete. ggplot2 attempt   automatically.","code":""},{"path":[]},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_lolli.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualise a timeline of several event metrics as 'lollipops'. — geom_lolli","text":"Robert W. Schlegel","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/geom_lolli.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualise a timeline of several event metrics as 'lollipops'. — geom_lolli","text":"","code":"ts <- ts2clm(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\")) res <- detect_event(ts) mhw <- res$event  library(ggplot2)  # Height of lollis represent event durations and their colours # are mapped to the events' cumulative intensity: ggplot(mhw, aes(x = date_peak, y = duration)) +   geom_lolli(aes(colour = intensity_cumulative)) +   scale_color_distiller(palette = \"Spectral\", name = \"Cumulative \\nintensity\") +   xlab(\"Date\") + ylab(\"Event duration [days]\") #> Warning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0. #> ℹ Please use the `linewidth` aesthetic instead.   # Height of lollis represent event durations and the top three (longest) # lollis are highlighted in red: ggplot(mhw, aes(x = date_peak, y = duration)) +   geom_lolli(n = 3, colour_n = \"red\") +   scale_color_distiller(palette = \"Spectral\") +   xlab(\"Peak date\") + ylab(\"Event duration [days]\")   # Because this is a proper geom, any number of ill-advised things # may be done with it: ggplot(mhw, aes(x = event_no, y = intensity_max)) +   geom_lolli(shape = 5, aes(colour = rate_onset), linetype = \"dotted\") +   scale_color_distiller(palette = \"RdYlGn\", name = \"Rate \\nonset\") +   xlab(\"Event number\") + ylab(\"Max intensity [degree C]\")"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/heatwaveR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"heatwaveR: Detect Heatwaves and Cold-Spells — heatwaveR-package","title":"heatwaveR: Detect Heatwaves and Cold-Spells — heatwaveR-package","text":"different methods defining, detecting, categorising extreme events known heatwaves cold-spells, first proposed Hobday et al. (2016) doi: 10.1016/j.pocean.2015.12.014  Hobday et al. (2018) https://www.jstor.org/stable/26542662. functions package work air water temperature data. detection algorithms may used non-temperature data well.","code":""},{"path":[]},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/heatwaveR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"heatwaveR: Detect Heatwaves and Cold-Spells — heatwaveR-package","text":"Maintainer: Robert W. Schlegel robwschlegel@gmail.com (ORCID) [contributor] Authors: Albertus J. Smit (ORCID) [contributor]","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/lolli_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a timeline of selected event metrics as 'lollipops'. — lolli_plot","title":"Create a timeline of selected event metrics as 'lollipops'. — lolli_plot","text":"Visualise timeline several possible event metrics 'lollipop' graphs.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/lolli_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a timeline of selected event metrics as 'lollipops'. — lolli_plot","text":"","code":"lolli_plot(data, xaxis = date_peak, metric = intensity_max, event_count = 3)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/lolli_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a timeline of selected event metrics as 'lollipops'. — lolli_plot","text":"data Output detect_event function. xaxis name column event data.frame output detect_event. Suggested choices , limited , event_no, date_start date_peak. Default date_peak. metric name column event data.frame output detect_event.Suggested choices , limited , intensity_mean, intensity_max, intensity_cumulative duration.  Default intensity_max. event_count number top events highlight, determined column given metric. Default 3.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/lolli_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a timeline of selected event metrics as 'lollipops'. — lolli_plot","text":"function return graph intensity selected metric along y-axis chosen xaxis value. number top events per event_count highlighted brighter colour. function differs use geom_lolli creates stand-alone figure. benefit one need prior knowledge ggplot2 create figure.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/lolli_plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a timeline of selected event metrics as 'lollipops'. — lolli_plot","text":"Albertus J. Smit Robert W. Schlegel","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/lolli_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a timeline of selected event metrics as 'lollipops'. — lolli_plot","text":"","code":"ts <- ts2clm(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\")) res <- detect_event(ts)  library(ggplot2)  # The default output lolli_plot(res)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/make_whole_fast.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructs a continuous, uninterrupted time series of temperatures (faster). — make_whole_fast","title":"Constructs a continuous, uninterrupted time series of temperatures (faster). — make_whole_fast","text":"Takes series dates temperatures, irregular (ordered), inserts missing dates fills corresponding temperatures NAs.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/make_whole_fast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructs a continuous, uninterrupted time series of temperatures (faster). — make_whole_fast","text":"","code":"make_whole_fast(data)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/make_whole_fast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructs a continuous, uninterrupted time series of temperatures (faster). — make_whole_fast","text":"data data frame columns date (ts_x) temperature (ts_y) data. Ordered daily data expected, although missing values (NA) can accommodated, function recommended NAs occur infrequently, preferably three consecutive days.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/make_whole_fast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructs a continuous, uninterrupted time series of temperatures (faster). — make_whole_fast","text":"function return data frame three columns. column headed doy (day--year) Julian day running 1 366, modified day--year series non-leap-years runs 1...59 61...366. leap years 60th day February 29. ts_x column series dates class Date, y measured variable. time series uninterrupted continuous daily values first last dates input data.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/make_whole_fast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructs a continuous, uninterrupted time series of temperatures (faster). — make_whole_fast","text":"function reads daily data time vector specified  Date (e.g. \"1982-01-01\"). user calculate daily data sub-daily measurements. Leap years automatically accommodated function. function can handle missing days, licence actually use data detection anomalous thermal events. Hobday et al. (2016) recommend gaps 3 days, may adjusted setting maxPadLength argument ts2clm function. longer frequent gaps become lower fidelity annual climatology threshold can calculated, repercussions accuracy event metrics can determined, also number events can detected. day--year (doy) vector created make_whole_fast inserts rows cases original data set missing rows dates. user concerned potential repeated measurements worry time series unordered, suggest necessary checks fixes implemented prior feeding time series ts2clim via make_whole_fast. using fast algorithm, assume user done necessary work ensure time vector ordered without repeated measurements beforehand.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/make_whole_fast.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Constructs a continuous, uninterrupted time series of temperatures (faster). — make_whole_fast","text":"Smit, . J., Villeneuve, ., Schlegel, R. W.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/na_interp.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad NA gaps of user-defined width with interpolated values. — na_interp","title":"Pad NA gaps of user-defined width with interpolated values. — na_interp","text":"internal function helps create time series used clim_calc within ts2clm produce climatology desired user.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/na_interp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pad NA gaps of user-defined width with interpolated values. — na_interp","text":"","code":"na_interp(doy = doy, x = ts_x, y = ts_y, maxPadLength)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/na_interp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad NA gaps of user-defined width with interpolated values. — na_interp","text":"doy Date--year per make_whole_fast. x Date per make_whole_fast. y Measurement variable per make_whole_fast. maxPadLength Specifies maximum length days interpolate (pad) missing data (specified NA) input temperature time series; .e., consecutive blocks NAs length greater maxPadLength left NA. Set integer.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/na_interp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pad NA gaps of user-defined width with interpolated values. — na_interp","text":"function returns data (data.table) long format.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/na_interp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pad NA gaps of user-defined width with interpolated values. — na_interp","text":"Smit, . J.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/proto_event.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect proto-events based on a chosen criterion (column). — proto_event","title":"Detect proto-events based on a chosen criterion (column). — proto_event","text":"internal function detects events according heatwave definition, joins across gaps desired.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/proto_event.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect proto-events based on a chosen criterion (column). — proto_event","text":"","code":"proto_event(t_series, criterion_column, minDuration, joinAcrossGaps, maxGap)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/proto_event.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect proto-events based on a chosen criterion (column). — proto_event","text":"t_series dataframe correct dimensions inherited detect_event within runs. criterion_column column use detection events. minDuration Minimum duration acceptance detected events. joinAcrossGaps logic gate tells internal function connect events across maxGap (see ). default inherits TRUE. maxGap number rows (days) across distinct events combined one event joinAcrossGaps = TRUE.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/proto_event.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect proto-events based on a chosen criterion (column). — proto_event","text":"dataframe used within detect_event, can returned detect_event switch 'protoEvent' specified TRUE.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/proto_event.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Detect proto-events based on a chosen criterion (column). — proto_event","text":"Albertus J. Smit, Robert W. Schlegel","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/proto_event3.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect proto-events based on a chosen criterion (column). — proto_event3","title":"Detect proto-events based on a chosen criterion (column). — proto_event3","text":"internal function detects events according heatwave definition, joins across gaps desired. update detect_event made entirely within data.table benefit speed improvements.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/proto_event3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect proto-events based on a chosen criterion (column). — proto_event3","text":"","code":"proto_event3(p_series, criterion_column, minDuration, joinAcrossGaps, maxGap)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/proto_event3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect proto-events based on a chosen criterion (column). — proto_event3","text":"p_series data.table correct dimensions received detect_event3 within runs. criterion_column column use detection events. minDuration Minimum duration acceptance detected events. joinAcrossGaps logic gate tells internal function connect events across maxGap (see ). default inherits TRUE. maxGap number rows (days) across distinct events combined one event joinAcrossGaps = TRUE.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/proto_event3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect proto-events based on a chosen criterion (column). — proto_event3","text":"dataframe used within detect_event, can returned detect_event switch 'protoEvent' specified TRUE.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/proto_event3.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Detect proto-events based on a chosen criterion (column). — proto_event3","text":"Albertus J. Smit, Robert W. Schlegel","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/smooth_percentile.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the climatology for a time series. — smooth_percentile","title":"Detect the climatology for a time series. — smooth_percentile","text":"internal function helps create climatologies accordance Hobday et al. (2016) standard.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/smooth_percentile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the climatology for a time series. — smooth_percentile","text":"","code":"smooth_percentile(data, smoothPercentileWidth, var_calc)"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/smooth_percentile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect the climatology for a time series. — smooth_percentile","text":"data data given function calculations performed ts2clm. smoothPercentileWidth width smoothing window applied. default 31 days. var_calc passed ts2clm argument var tells function var column exists needs smoothed.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/smooth_percentile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect the climatology for a time series. — smooth_percentile","text":"function returns data format input , climatology values smoothed desired.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/smooth_percentile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Detect the climatology for a time series. — smooth_percentile","text":"Smit, . J., Schlegel, R. W.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_Med.html","id":null,"dir":"Reference","previous_headings":"","what":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the Mediterranean region. — sst_Med","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the Mediterranean region. — sst_Med","text":"dataset containing sea surface temperature (degrees Celsius) date Mediterranean region 1982-01-01 2022-12-31.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_Med.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the Mediterranean region. — sst_Med","text":"","code":"sst_Med"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_Med.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the Mediterranean region. — sst_Med","text":"dataframe 14975 rows 2 variables: t date, .Date() format temp SST, degrees Celsius","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_Med.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the Mediterranean region. — sst_Med","text":"https://www.ncei.noaa.gov/products/optimum-interpolation-sst","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_Med.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the Mediterranean region. — sst_Med","text":"lon/lat: 9.125/43.625","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_NW_Atl.html","id":null,"dir":"Reference","previous_headings":"","what":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the NW Atlantic region. — sst_NW_Atl","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the NW Atlantic region. — sst_NW_Atl","text":"dataset containing sea surface temperature (degrees Celsius) date Northwest Atlantic region 1982-01-01 2022-12-31.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_NW_Atl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the NW Atlantic region. — sst_NW_Atl","text":"","code":"sst_NW_Atl"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_NW_Atl.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the NW Atlantic region. — sst_NW_Atl","text":"dataframe 14975 rows 2 variables: t date, .Date() format temp SST, degrees Celsius","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_NW_Atl.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the NW Atlantic region. — sst_NW_Atl","text":"https://www.ncei.noaa.gov/products/optimum-interpolation-sst","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_NW_Atl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the NW Atlantic region. — sst_NW_Atl","text":"lon/lat: -66.875/43.125","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_WA.html","id":null,"dir":"Reference","previous_headings":"","what":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the Western Australian region. — sst_WA","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the Western Australian region. — sst_WA","text":"dataset containing sea surface temperature (degrees Celsius) date Western Australian region 1982-01-01 2022-12-31.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_WA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the Western Australian region. — sst_WA","text":"","code":"sst_WA"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_WA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the Western Australian region. — sst_WA","text":"dataframe 14975 rows 2 variables: t date, .Date() format temp SST, degrees Celsius","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_WA.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the Western Australian region. — sst_WA","text":"https://www.ncei.noaa.gov/products/optimum-interpolation-sst","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/sst_WA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"NOAA Optimally Interpolated (OI) v2.1 daily 1/4 degree SST for the Western Australian region. — sst_WA","text":"lon/lat: 112.625/-29.375","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a climatology from a daily time series. — ts2clm","title":"Make a climatology from a daily time series. — ts2clm","text":"Creates daily climatology time series daily temperatures using user-specified sliding window mean threshold calculation, followed optional moving average smoother used Hobday et al. (2016).","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a climatology from a daily time series. — ts2clm","text":"","code":"ts2clm(   data,   x = t,   y = temp,   climatologyPeriod,   maxPadLength = FALSE,   windowHalfWidth = 5,   pctile = 90,   smoothPercentile = TRUE,   smoothPercentileWidth = 31,   clmOnly = FALSE,   var = FALSE,   roundClm = 4,   returnDF = TRUE )"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a climatology from a daily time series. — ts2clm","text":"data data frame two columns. default setting (.e. omitting arguments x y; see immediately ), data set expected headers t temp. t column vector dates class Date, temp measured variable (default assumed temperature). Note one may also provide hourly time series class POSIXct, values must even hourly steps (e.g. 2012-01-22 23:00:00 2012-01-22 23:01:33). x column expected contain vector dates. column headed t present dataframe, argument may omitted; otherwise, specify name column dates . y column containing measurement variable. column name differs default (.e. temp), specify name . climatologyPeriod Required. argument passed two values (see example ). first value chosen date start climatology period, second value end date said period. chosen period (preferably 30 years length) used calculate seasonal cycle extreme value threshold. Note values always provided dates, even hourly data input function. maxPadLength Specifies maximum length days interpolate (pad) missing data (specified NA) input temperature time series; .e., consecutive blocks NAs length greater maxPadLength left NA. default FALSE. Set integer interpolate. Setting maxPadLength TRUE return error. Note number hours interpolate hourly time series provided. windowHalfWidth Width sliding window day--year (one side center day--year) used pooling values calculation climatology threshold percentile. Default 5 days, gives window width 11 days centred 6th day series 11 days. Note number hours smooth hourly time series provided. pctile Threshold percentile (%) detection events (MHWs). Default 90th percentile. intent use threshold data MCSs, set pctile = 10. low value. smoothPercentile Boolean switch selecting whether smooth climatology threshold percentile time series moving average smoothPercentileWidth. Default TRUE. smoothPercentileWidth Full width moving average window smoothing climatology threshold. default 31. clmOnly Choose calculate return climatologies. default FALSE. var argument introduced allow user choose variance seasonal signal per doy calculated. default FALSE prevent calculation, potentially increasing speed calculations gridded data reducing size output. variance initially introduced part standard output Hobday et al. (2016), researchers use generally regarded now unnecessary. roundClm argument allows user choose many decimal places seas thresh outputs rounded . Default 4. prevent rounding set roundClm = FALSE. argument may given numeric values FALSE. returnDF default (TRUE) tells function return results type data.frame. FALSE return results data.table.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a climatology from a daily time series. — ts2clm","text":"function return tibble (see tidyverse) input time series newly calculated climatology. climatology contains daily climatology threshold calculating MHWs. software designed creating climatologies daily temperatures, units specified reflect intended purpose. However, various kinds climatologies may created, case, appropriate units need determined user. doy Julian day (day--year). non-leap years runs 1...59   61...366, leap years run 1...366. t date vector original time series supplied data.   alternate column provided x argument, name rather   used column. temp measurement vector per original data supplied   function. different column given y argument   shown . seas Daily climatological cycle [deg. C]. thresh Daily varying threshold (e.g., 90th   percentile) [deg. C]. used detect_event   detection/calculation events (MHWs). var Daily varying variance (standard deviation) [deg. C].   column returned var = FALSE (default). clmOnly enabled, 365 366 day climatology returned.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a climatology from a daily time series. — ts2clm","text":"function assumes input time series consists continuous daily values missing values. Time ranges start end part-way calendar year supported. recommended period least 30 years specified order produce climatology smooths decadal thermal periodicities may present. calculated least 30 years data, climatology called 'climatological normal.' advised full start end dates climatology period result full years, e.g. \"1982-01-01\" \"2011-12-31\" \"1982-07-01\" \"2012-06-30\"; , may result unequal weighting data belonging certain months within time series. daily climatology created; , climatology comprised one mean temperature day year (365 366 days, depending leap years dealt ), mean based sample size function length time determined start end values given climatologyPeriod width sliding window specified windowHalfWidth. function supports leap years. done ignoring Feb 29s initial calculation climatology threshold. values Feb 29 linearly interpolated values Feb 28 Mar 1. Previous versions ts2clm() tested see rows duplicated, replicate temperature readings present per day, now disabled. user concerned repeated measurements, suggest necessary checks fixes implemented prior feeding time series ts2clm(). original Python algorithm written Eric Oliver, Institute Marine Antarctic Studies, University Tasmania, Feb 2015, documented Hobday et al. (2016).","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Make a climatology from a daily time series. — ts2clm","text":"Hobday, .J. et al. (2016). hierarchical approach defining marine heatwaves, Progress Oceanography, 141, pp. 227-238, doi:10.1016/j.pocean.2015.12.014","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a climatology from a daily time series. — ts2clm","text":"Albertus J. Smit, Robert W. Schlegel, Eric C. J. Oliver","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a climatology from a daily time series. — ts2clm","text":"","code":"res <- ts2clm(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\")) res[1:10, ] #>    doy          t  temp    seas  thresh #> 1    1 1982-01-01 20.94 21.6080 22.9605 #> 2    2 1982-01-02 21.25 21.6348 22.9987 #> 3    3 1982-01-03 21.38 21.6621 23.0376 #> 4    4 1982-01-04 21.16 21.6895 23.0771 #> 5    5 1982-01-05 21.26 21.7169 23.1130 #> 6    6 1982-01-06 21.61 21.7436 23.1460 #> 7    7 1982-01-07 21.74 21.7699 23.1775 #> 8    8 1982-01-08 21.50 21.7958 23.2080 #> 9    9 1982-01-09 21.40 21.8217 23.2366 #> 10  10 1982-01-10 21.36 21.8478 23.2649  # Or if one only wants the 366 day climatology res_clim <- ts2clm(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\"),                    clmOnly = TRUE) res_clim[1:10, ] #>    doy    seas  thresh #> 1    1 21.6080 22.9605 #> 2    2 21.6348 22.9987 #> 3    3 21.6621 23.0376 #> 4    4 21.6895 23.0771 #> 5    5 21.7169 23.1130 #> 6    6 21.7436 23.1460 #> 7    7 21.7699 23.1775 #> 8    8 21.7958 23.2080 #> 9    9 21.8217 23.2366 #> 10  10 21.8478 23.2649  # Or if one wants the variance column included in the results res_var <- ts2clm(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\"),                   var = TRUE) res_var[1:10, ] #>    doy          t  temp    seas  thresh    var #> 1    1 1982-01-01 20.94 21.6080 22.9605 0.9585 #> 2    2 1982-01-02 21.25 21.6348 22.9987 0.9636 #> 3    3 1982-01-03 21.38 21.6621 23.0376 0.9684 #> 4    4 1982-01-04 21.16 21.6895 23.0771 0.9728 #> 5    5 1982-01-05 21.26 21.7169 23.1130 0.9764 #> 6    6 1982-01-06 21.61 21.7436 23.1460 0.9797 #> 7    7 1982-01-07 21.74 21.7699 23.1775 0.9828 #> 8    8 1982-01-08 21.50 21.7958 23.2080 0.9860 #> 9    9 1982-01-09 21.40 21.8217 23.2366 0.9884 #> 10  10 1982-01-10 21.36 21.8478 23.2649 0.9906"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm3.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a climatology from a daily time series. — ts2clm3","title":"Make a climatology from a daily time series. — ts2clm3","text":"fully data.table-based version ts2clm. function creates daily climatology time series daily temperatures using user-specified sliding window mean threshold calculation, followed optional moving average smoother used Hobday et al. (2016).","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a climatology from a daily time series. — ts2clm3","text":"","code":"ts2clm3(   data,   x = t,   y = temp,   climatologyPeriod,   maxPadLength = FALSE,   windowHalfWidth = 5,   pctile = 90,   smoothPercentile = TRUE,   smoothPercentileWidth = 31,   clmOnly = FALSE,   var = FALSE,   roundClm = 4,   ... )"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a climatology from a daily time series. — ts2clm3","text":"data data frame least two columns. default setting (.e. omitting arguments x y; see immediately ), data set expected headers t temp. t column vector dates class Date, temp measured variable (default assumed temperature). additional columns used calculations correctly carried output climatology. additional columns may site names, longitudes, latitudes (etc.), note meant specify grouping structure time series. , grouping structures handled function current form, time series therefore assumed located discrete point space one 'pixel' longitude × latitude one might find gridded data products. x column expected contain vector dates. column headed t present data frame, argument may omitted; otherwise, specify name column dates . y column containing measurement variable. column name differs default (.e. temp), specify name . climatologyPeriod Required. argument passed two values (see example ). first value chosen date start climatology period, second value end date said period. chosen period (preferably 30 years length) used calculate seasonal cycle extreme value threshold. maxPadLength Specifies maximum length days apply linear interpolation (padding) across missing values (specified NA) measured variable; .e., consecutive blocks NAs length greater maxPadLength left NA. default FALSE. Set integer interpolate. Setting maxPadLength TRUE return error. windowHalfWidth Width sliding window day--year (one side center day--year) used pooling values calculation climatology threshold percentile. Default 5 days, gives window width 11 days centred 6th day series 11 days. pctile Threshold percentile (%) detection events (MHWs). Default 90th percentile. intent use threshold data MCSs, set pctile = 10 low value. smoothPercentile Boolean. Select whether smooth climatology threshold percentile time series moving average smoothPercentileWidth. default TRUE. smoothPercentileWidth Full width moving average window smoothing climatology threshold. default 31 days. clmOnly Boolean. Choose calculate return climatologies. default FALSE. var Boolean. argument introduced allow user choose variance seasonal signal per doy calculated. default FALSE prevent calculation. Setting TRUE might potentially increase speed calculations gridded data increase size output. variance initially introduced part standard output Hobday et al. (2016), researchers use generally regarded now unnecessary. roundClm argument allows user choose many decimal places seas thresh outputs rounded . Default 4. prevent rounding set roundClm = FALSE. argument may given numeric values FALSE. ... Allows unused arguments pass functions.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a climatology from a daily time series. — ts2clm3","text":"function return data.table (see data.table) input time series newly calculated climatology. climatology contains daily climatology threshold calculating MHWs. software designed creating climatologies daily temperatures, units specified reflect intended purpose. However, various kinds climatologies may created, case, appropriate units need determined user. doy Julian day (day--year) returned clmOnly = TRUE. non-leap   years runs 1...59 61...366, leap years run 1...366. t date vector original time series supplied data.   alternate column provided x argument, name rather   used column. temp measurement vector per original data supplied   function. different column given y argument   shown . seas Daily climatological cycle [deg. C]. thresh Daily varying threshold (e.g., 90th   percentile) [deg. C]. used detect_event3   detection/calculation events (MHWs). var Daily varying variance (standard deviation) [deg. C].   column returned var = FALSE (default). clmOnly enabled, 365 366 day climatology returned.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make a climatology from a daily time series. — ts2clm3","text":"function assumes input time series consists continuous daily values missing values. Time ranges start end part-way calendar year supported. recommended period least 30 years specified order produce climatology smooths decadal thermal periodicities may present. calculated least 30 years data, climatology called 'climatological normal.' advised full start end dates climatology period result full years, e.g. \"1982-01-01\" \"2011-12-31\" \"1982-07-01\" \"2012-06-30\"; , may result unequal weighting data belonging certain months within time series. daily climatology created; , climatology comprised one mean temperature day year (365 366 days, depending leap years dealt ), mean based sample size function length time determined start end values given climatologyPeriod width sliding window specified windowHalfWidth. function supports leap years. done ignoring Feb 29s initial calculation climatology threshold. values Feb 29 linearly interpolated values Feb 28 Mar 1. Previous versions ts2clm() tested see rows duplicated, replicate temperature readings present per day, now disabled. user concerned repeated measurements, suggest necessary checks fixes implemented prior feeding time series ts2clm(). original Python algorithm written Eric Oliver, Institute Marine Antarctic Studies, University Tasmania, Feb 2015, documented Hobday et al. (2016).","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm3.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Make a climatology from a daily time series. — ts2clm3","text":"Hobday, .J. et al. (2016). hierarchical approach defining marine heatwaves, Progress Oceanography, 141, pp. 227-238, doi:10.1016/j.pocean.2015.12.014","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm3.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a climatology from a daily time series. — ts2clm3","text":"Albertus J. Smit, Robert W. Schlegel, Eric C. J. Oliver","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/reference/ts2clm3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a climatology from a daily time series. — ts2clm3","text":"","code":"data.table::setDTthreads(threads = 1) # optimise for your code and local computer res <- ts2clm3(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\")) res[1:10, ] #>              t  temp    seas  thresh #>         <Date> <num>   <num>   <num> #>  1: 1982-01-01 20.94 21.6080 22.9605 #>  2: 1982-01-02 21.25 21.6348 22.9987 #>  3: 1982-01-03 21.38 21.6621 23.0376 #>  4: 1982-01-04 21.16 21.6895 23.0771 #>  5: 1982-01-05 21.26 21.7169 23.1130 #>  6: 1982-01-06 21.61 21.7436 23.1460 #>  7: 1982-01-07 21.74 21.7699 23.1775 #>  8: 1982-01-08 21.50 21.7958 23.2080 #>  9: 1982-01-09 21.40 21.8217 23.2366 #> 10: 1982-01-10 21.36 21.8478 23.2649  # Or if one only wants the 366 day climatology res_clim <- ts2clm3(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\"),                     clmOnly = TRUE) res_clim[1:10, ] #>       doy    seas  thresh #>     <num>   <num>   <num> #>  1:     1 21.6080 22.9605 #>  2:     2 21.6348 22.9987 #>  3:     3 21.6621 23.0376 #>  4:     4 21.6895 23.0771 #>  5:     5 21.7169 23.1130 #>  6:     6 21.7436 23.1460 #>  7:     7 21.7699 23.1775 #>  8:     8 21.7958 23.2080 #>  9:     9 21.8217 23.2366 #> 10:    10 21.8478 23.2649  # Or if one wants the variance column included in the results res_var <- ts2clm3(sst_WA, climatologyPeriod = c(\"1983-01-01\", \"2012-12-31\"),                    var = TRUE) res_var[1:10, ] #>              t  temp    seas  thresh    var #>         <Date> <num>   <num>   <num>  <num> #>  1: 1982-01-01 20.94 21.6080 22.9605 0.0772 #>  2: 1982-01-02 21.25 21.6348 22.9987 0.0779 #>  3: 1982-01-03 21.38 21.6621 23.0376 0.0763 #>  4: 1982-01-04 21.16 21.6895 23.0771 0.0780 #>  5: 1982-01-05 21.26 21.7169 23.1130 0.0817 #>  6: 1982-01-06 21.61 21.7436 23.1460 0.0869 #>  7: 1982-01-07 21.74 21.7699 23.1775 0.0914 #>  8: 1982-01-08 21.50 21.7958 23.2080 0.0947 #>  9: 1982-01-09 21.40 21.8217 23.2366 0.0977 #> 10: 1982-01-10 21.36 21.8478 23.2649 0.0989"},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0539005-2025-01-12","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.3.9005 (2025-01-12)","title":"heatwaveR 0.5.3.9005 (2025-01-12)","text":"Minor tweak ebent_line() keep changes ggplot2","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0539004-2024-09-25","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.3.9004 (2024-09-25)","title":"heatwaveR 0.5.3.9004 (2024-09-25)","text":"Updated OISST vignette account changes behaviour tidync functions","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0539003-2024-08-30","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.3.9003 (2024-08-30)","title":"heatwaveR 0.5.3.9003 (2024-08-30)","text":"Minor tweak event_line() match new ggplot2 syntax","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0539002-2024-07-07","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.3.9002 (2024-07-07)","title":"heatwaveR 0.5.3.9002 (2024-07-07)","text":"Changed moderate category calculation ‘>’ ‘>=’","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0539001-2024-04-22","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.3.9001 (2024-04-22)","title":"heatwaveR 0.5.3.9001 (2024-04-22)","text":"Addressing bugs calculation hourly values ending even hour steps","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0539000-2024-04-09","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.3.9000 (2024-04-09)","title":"heatwaveR 0.5.3.9000 (2024-04-09)","text":"Updated URL MHW tutorial","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0539000-2024-03-27","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.3.9000 (2024-03-27)","title":"heatwaveR 0.5.3.9000 (2024-03-27)","text":"Basic hourly functionality added ts2clm() Tests added detect_event() Minor tweak exceedance() work hourly data","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0529009-2024-01-23","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.2.9009 (2024-01-23)","title":"heatwaveR 0.5.2.9009 (2024-01-23)","text":"tweaks return behaviour exceedance()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0529008-2024-01-22","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.2.9008 (2024-01-22)","title":"heatwaveR 0.5.2.9008 (2024-01-22)","text":"Corrected return behaviour exceedance() keep backwards compatibility","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0529007-2024-01-20","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.2.9007 (2024-01-20)","title":"heatwaveR 0.5.2.9007 (2024-01-20)","text":"Fixed bug proto_event() event lasts entire time series exceedance() now correctly returns extra columns original data.frame Corrected rare edge case detect_event() exceedance() single MCS detected returned threshold columns negative values","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0529006-2023-12-11","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.2.9006 (2023-12-11)","title":"heatwaveR 0.5.2.9006 (2023-12-11)","text":"Updated NOAA OISST vignette account change made data query process","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0529006-2023-12-05","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.2.9006 (2023-12-05)","title":"heatwaveR 0.5.2.9006 (2023-12-05)","text":"Removed cpp function seqDates() package","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0529005-2023-11-11","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.2.9005 (2023-11-11)","title":"heatwaveR 0.5.2.9005 (2023-11-11)","text":"Removed category functionality detect_event3() keep streamlined","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0529004-2023-11-06","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.2.9004 (2023-11-06)","title":"heatwaveR 0.5.2.9004 (2023-11-06)","text":"Minor tweaks new functions CodeCov testing implemented","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0529003-2023-11-05","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.2.9003 (2023-11-05)","title":"heatwaveR 0.5.2.9003 (2023-11-05)","text":"Created detect_event3() proto_event3() new code base benefit speed gains due data.table internals Output results (climatologies metrics) data.table Updated improved documentation","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0529002-2023-10-31","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.2.9002 (2023-10-31)","title":"heatwaveR 0.5.2.9002 (2023-10-31)","text":"Rolled back overwrite ts2clm() ts2clm3() now Set default behaviour detect_event() return data.frame, rather data.table new argument introduced top level functions: returnDF default behaviour TRUE explicitly ensures functions return data.frames returnDF == FALSE functions return data.tables Removed plyr grid dependencies package Added package development script root directory","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0529001-2023-10-30","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.2.9001 (2023-10-30)","title":"heatwaveR 0.5.2.9001 (2023-10-30)","text":"Removed robust argument ts2clm() deprecated years ago Replaced ts2clm() ts2clm3() throughout package Removed tibble dependency","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0529000-2023-10-29","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.2.9000 (2023-10-29)","title":"heatwaveR 0.5.2.9000 (2023-10-29)","text":"Fully data.table compliant ts2clm3(), drop-replacement ts2clm() make_whole_fast(), na_interp(), clim_spread(), smooth_percentile() included within main function Significantly faster climatology calculation Correct error climatological variance calculation","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0519000-2023-10-25","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.1.9000 (2023-10-25)","title":"heatwaveR 0.5.1.9000 (2023-10-25)","text":"Removing dependencies speeding code Removed lubridate dplyr dependencies","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0509003-2023-08-31","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.0.9003 (2023-08-31)","title":"heatwaveR 0.5.0.9003 (2023-08-31)","text":"Added links heatwave3 package home page gridded detection vignette.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0509003-2023-07-31","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.0.9003 (2023-07-31)","title":"heatwaveR 0.5.0.9003 (2023-07-31)","text":"Addressed CodeCov created stable version CRAN","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0509003-2023-07-25","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.0.9003 (2023-07-25)","title":"heatwaveR 0.5.0.9003 (2023-07-25)","text":"Changed behaviour category() address edge case polar MCS Corrected bug category() change ‘V Ice’ category climatology output Also bug didn’t return users columns part normal category() output bug allowed users unintentionally assign ‘V Ice’ category MHWs","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0509002-2023-05-02","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.0.9002 (2023-05-02)","title":"heatwaveR 0.5.0.9002 (2023-05-02)","text":"Addressed extreme edge case category() Moderate MCS detected, just higher categories","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0509001-2023-04-17","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.0.9001 (2023-04-17)","title":"heatwaveR 0.5.0.9001 (2023-04-17)","text":"Improvements main pipeline ensure lat column passed forward correct category seasons","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0509000-2023-03-30","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.0.9000 (2023-03-30)","title":"heatwaveR 0.5.0.9000 (2023-03-30)","text":"Bug hunting build-v1.0.0 Addressed issue y column passing correctly detect_event() category() called internally Changed documentation category() accurately match output climatology = TRUE Looked behaviour protoEvents detect_event() Added lat_col argument category() detect time series N S hemisphere","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-050-2023-03-20","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.5.0 (2023-03-20)","title":"heatwaveR 0.5.0 (2023-03-20)","text":"Major update preparation removing dependencies releasing v1.0.0 Also necessary due cryptic CRAN error","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0469004-2023-03-13","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.6.9004 (2023-03-13)","title":"heatwaveR 0.4.6.9004 (2023-03-13)","text":"Removed dependencies event_line() block_average() except plyr Added line_colours argument event_line(), allowing users choose colours line geoms","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0469004-2023-03-11","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.6.9004 (2023-03-11)","title":"heatwaveR 0.4.6.9004 (2023-03-11)","text":"Removed dependencies category() exceedance() except plyr","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0469004-2023-03-07","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.6.9004 (2023-03-07)","title":"heatwaveR 0.4.6.9004 (2023-03-07)","text":"Starting remove many dependencies possible Started removing **plyr** dependency proto_event() detect_event()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0469003-2023-01-16","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.6.9003 (2023-01-16)","title":"heatwaveR 0.4.6.9003 (2023-01-16)","text":"Updated SST data end 2022 Changed behaviour lolli_plot() event_line() now use tidyeval Note backwards compatibility breaking change required due changes ggplot2 v3.0.0","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0469002-2023-01-09","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.6.9002 (2023-01-09)","title":"heatwaveR 0.4.6.9002 (2023-01-09)","text":"Updated citations page references heatwaveR 2022 Added package names functions used downloading OISST vignette Added MCSice argument category(), allows users directly classify MCS threshold -1.7°C category ‘V Ice’ event sensu Schlegel et al. (2021; Marine cold-spells)","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0469001-2022-06-23","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.6.9001 (2022-06-23)","title":"heatwaveR 0.4.6.9001 (2022-06-23)","text":"Alternatives downloading NOAA OISST data Trend break point analyses MHW metrics","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0469000-2022-01-17","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.6.9000 (2022-01-17)","title":"heatwaveR 0.4.6.9000 (2022-01-17)","text":"Updated SST time series 2021-12-31","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-046-2021-10-26","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.6 (2021-10-26)","title":"heatwaveR 0.4.6 (2021-10-26)","text":"CRAN release: 2021-10-27 Updated SST time series 2020-12-31","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-046-2021-10-25","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.6 (2021-10-25)","title":"heatwaveR 0.4.6 (2021-10-25)","text":"CRAN release: 2021-10-27 Explicitly loading Rcpp due change behaviour package causing ERRORs CRAN checks","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0459002-2021-09-21","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.5.9002 (2021-09-21)","title":"heatwaveR 0.4.5.9002 (2021-09-21)","text":"new colour palette similar, improved contrast Made minor important change category() categories based temperature greater (lesser) thresholds greater (lesser) equal ","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0459001-2021-08-25","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.5.9001 (2021-08-25)","title":"heatwaveR 0.4.5.9001 (2021-08-25)","text":"Updated visualisation vignette now include code necessary get geom_flame() work plotly now longer directly supported","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0459001-2021-03-17","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.5.9001 (2021-03-17)","title":"heatwaveR 0.4.5.9001 (2021-03-17)","text":"Improved error trapping ts2clm(), detect_event(), exceedance()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0459000-2021-02-10","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.5.9000 (2021-02-10)","title":"heatwaveR 0.4.5.9000 (2021-02-10)","text":"Added citations package","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0459000-2021-01-31","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.5.9000 (2021-01-31)","title":"heatwaveR 0.4.5.9000 (2021-01-31)","text":"allows one determine categories events directly, rather second step using category() function","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-045-2021-01-23","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.5 (2021-01-23)","title":"heatwaveR 0.4.5 (2021-01-23)","text":"CRAN release: 2021-01-07 Created new vignette shows save gridded MHW results NetCDF file","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-045-2021-01-07","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.5 (2021-01-07)","title":"heatwaveR 0.4.5 (2021-01-07)","text":"CRAN release: 2021-01-07 Pushed new major version CRAN","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0449006-2021-01-06","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.4.9006 (2021-01-06)","title":"heatwaveR 0.4.4.9006 (2021-01-06)","text":"minor tweaks satisfy CRAN","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0449005-2020-12-30","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.4.9005 (2020-12-30)","title":"heatwaveR 0.4.4.9005 (2020-12-30)","text":"Pushing GitHub actions now triggers codecov correctly","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0449005-2020-12-22","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.4.9005 (2020-12-22)","title":"heatwaveR 0.4.4.9005 (2020-12-22)","text":"exceedance now outputs one row NA data.frame events exceedance threshold previous version return error exceedances detected, making generally unusable gridded data code allow geom_flame work plotly may found : https://github.com/robwschlegel/MHWapp/blob/master/shiny/functions.R","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0449004-2020-12-16","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.4.9004 (2020-12-16)","title":"heatwaveR 0.4.4.9004 (2020-12-16)","text":"Moved away Travis CI GitHub actions","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0449004-2020-11-18","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.4.9004 (2020-11-18)","title":"heatwaveR 0.4.4.9004 (2020-11-18)","text":"Fixed bug proto_event caused joinAcrossGaps argument flag first n days time series part event","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0449003-2020-11-13","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.4.9003 (2020-11-13)","title":"heatwaveR 0.4.4.9003 (2020-11-13)","text":"Minor fixes passing build","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0449002-2020-11-06","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.4.9002 (2020-11-06)","title":"heatwaveR 0.4.4.9002 (2020-11-06)","text":"Remove last offending trace zoo make_whole. Fix miscellaneous typos formatting inconsistencies.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0449001-2020-10-31","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.4.9001 (2020-10-31)","title":"heatwaveR 0.4.4.9001 (2020-10-31)","text":"Added MCScorrect argument catgegory function allows user bound bottom threshold MCS categories -1.8C","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0449000-2020-07-30","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.4.9000 (2020-07-30)","title":"heatwaveR 0.4.4.9000 (2020-07-30)","text":"dplyr v1.0.0 longer handles empty data.frames now forces logical type, empty data.frames longer unnest normal results fixed detect_event category return single row NA data.frames instead Thinking phasing data.table","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-044-2020-06-27","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.4 (2020-06-27)","title":"heatwaveR 0.4.4 (2020-06-27)","text":"CRAN release: 2020-06-27 Released v0.4.4 CRAN","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0439001-2020-06-26","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.3.9001 (2020-06-26)","title":"heatwaveR 0.4.3.9001 (2020-06-26)","text":"Re-wrote OISST gridded detection vignettes finding ERDDAP server hosts NOAA OISST v2.1 data. Updated packaged time series now use v2.1 data 1982 2019","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0439000-2020-06-25","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.3.9000 (2020-06-25)","title":"heatwaveR 0.4.3.9000 (2020-06-25)","text":"Minor bug fix gridded detection vignette","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0439000-2020-06-15","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.3.9000 (2020-06-15)","title":"heatwaveR 0.4.3.9000 (2020-06-15)","text":"category() now works MCS generated detect_event() codecov pushed back 100%","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-043-2020-06-12","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.3 (2020-06-12)","title":"heatwaveR 0.4.3 (2020-06-12)","text":"Release pushed CRAN light changes data.table dplyr Waiting NOAA OISST data area available ERDDAP server updating ","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0429005-2020-06-06","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2.9005 (2020-06-06)","title":"heatwaveR 0.4.2.9005 (2020-06-06)","text":"Updated gridded data vignette work OISST v2.1","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0429005-2020-06-03","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2.9005 (2020-06-03)","title":"heatwaveR 0.4.2.9005 (2020-06-03)","text":"Ensured newly released dplyr v1.0.0 introduce bugs Updated vignettes now work v2.1 OISST data","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0429004-2020-05-15","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2.9004 (2020-05-15)","title":"heatwaveR 0.4.2.9004 (2020-05-15)","text":"Fixed bug detect_event() caused data.table data.table longer allows rounding NA values","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0429003-2020-05-08","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2.9003 (2020-05-08)","title":"heatwaveR 0.4.2.9003 (2020-05-08)","text":"Fixed bug event_line() caused data.table","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0429002-2020-05-05","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2.9002 (2020-05-05)","title":"heatwaveR 0.4.2.9002 (2020-05-05)","text":"Cleaned CITATION file","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0429002-2020-03-23","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2.9002 (2020-03-23)","title":"heatwaveR 0.4.2.9002 (2020-03-23)","text":"Improvement legend appearance event_line() Improvement plotting category vignette","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0429001-2020-02-24","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2.9001 (2020-02-24)","title":"heatwaveR 0.4.2.9001 (2020-02-24)","text":"Minor spelling error fixes Minor tweak make_whole_fast()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0429001-2020-02-13","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2.9001 (2020-02-13)","title":"heatwaveR 0.4.2.9001 (2020-02-13)","text":"Added new citation used heatwaveR package","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0429001-2020-02-05","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2.9001 (2020-02-05)","title":"heatwaveR 0.4.2.9001 (2020-02-05)","text":"Minor internal tweak exceedance function","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0429001-2020-01-13","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2.9001 (2020-01-13)","title":"heatwaveR 0.4.2.9001 (2020-01-13)","text":"Added one small test get codecov back 100%","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0429001-2020-01-08","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2.9001 (2020-01-08)","title":"heatwaveR 0.4.2.9001 (2020-01-08)","text":"Beginning phase dplyr tibble dependencies Replacing dplyr functions plyr appear slightly faster also don’t multicore issues recent dplyr developments created Added roundRes argument detect_event() allow users decide rounding precision returned results","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-042-2019-12-10","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2 (2019-12-10)","title":"heatwaveR 0.4.2 (2019-12-10)","text":"CRAN release: 2019-12-01 Minor change ts2clm() alter functionality","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-042-2019-11-29","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2 (2019-11-29)","title":"heatwaveR 0.4.2 (2019-11-29)","text":"CRAN release: 2019-12-01 Publishing new stable version CRAN due removal tidyverse list suggested packages important bug fixes category()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-042-2019-11-26","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.2 (2019-11-26)","title":"heatwaveR 0.4.2 (2019-11-26)","text":"CRAN release: 2019-12-01 Fixed bug category() incorrectly returned difference seas thresh daily intensity value, rather actual temperature anomaly seas Also fixed labelling days thresh Moderate, now NA category() now adds lower case letters ends event names multiple large events within year may cause backwards compatibility issues rare cases, necessary change Added roundVal argument category() allow users decide rounding precision returned results","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0419004-2019-11-23","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.1.9004 (2019-11-23)","title":"heatwaveR 0.4.1.9004 (2019-11-23)","text":"Tripled resolution logo anticipation creating hex stickers","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0419004-2019-11-19","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.1.9004 (2019-11-19)","title":"heatwaveR 0.4.1.9004 (2019-11-19)","text":"Removed tidyverse list suggested packages","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0419003-2019-11-03","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.1.9003 (2019-11-03)","title":"heatwaveR 0.4.1.9003 (2019-11-03)","text":"potentially backward compatibility breaking design change empty data.frames returned one row NA values rare problem first thought still respecting need use 1:n vector creation, detect_event() category() now produce empty data.frames one row NA dataframe ensure continued backwards compatibility","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0419002-2019-11-03","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.1.9002 (2019-11-03)","title":"heatwaveR 0.4.1.9002 (2019-11-03)","text":"bug discovered ts2clm() function first check time series fed correct chronological order fixed ordering data fed function beginning calculations","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0419001-2019-10-30","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.1.9001 (2019-10-30)","title":"heatwaveR 0.4.1.9001 (2019-10-30)","text":"update data.table sometime August, 2019 reduced packages tolerance code 1:n potential memory weakness, creates empty vector multicore calculations causes entire run fall Therefore, use 1:n replaced seq_len(n) changed list outputs MHWs detected one row NA values, rather empty list may cause backward compatibility issues, extremely unlikely","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0419000-2019-10-26","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.1.9000 (2019-10-26)","title":"heatwaveR 0.4.1.9000 (2019-10-26)","text":"update ggplot2 package time back August, 2019 changed slightly Geoms work internally allowed geom_lolli() fall rare circumstances issue addressed","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-041-2019-09-09","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.1 (2019-09-09)","title":"heatwaveR 0.4.1 (2019-09-09)","text":"CRAN release: 2019-09-09 Updated OISST Preparation vignette match improvements rerddap package Also updated vignette clear contact NOAA data retrieval issues Added season argument category(), allows user specify season MHWs interested : ‘range’ - beginning ending season MHW ‘start’ - season start MHW ‘peak’ - season peak MHW ‘end’ - season end MHW","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0409000-2019-07-22","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.0.9000 (2019-07-22)","title":"heatwaveR 0.4.0.9000 (2019-07-22)","text":"Updated NOAA OISST data downloading tutorial account minor changes NOAA ERDDAP servers","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-040-2019-07-10","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.0 (2019-07-10)","title":"heatwaveR 0.4.0 (2019-07-10)","text":"CRAN release: 2019-07-11 Introduced Algiers time series examples using multiple thresholds atmospheric data Fixed bug event_line()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-040-2019-07-09","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.4.0 (2019-07-09)","title":"heatwaveR 0.4.0 (2019-07-09)","text":"CRAN release: 2019-07-11 Changed data.table ggplot2 dependencies imports heatwaveR now dependency free","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0369004-2019-05-29","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.6.9004 (2019-05-29)","title":"heatwaveR 0.3.6.9004 (2019-05-29)","text":"Added ability choose number digits rounded output ts2clm()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0369003-2019-02-11","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.6.9003 (2019-02-11)","title":"heatwaveR 0.3.6.9003 (2019-02-11)","text":"Updated end date three time series packaged heatwaveR 2018-12-31","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0369002-2019-02-11","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.6.9002 (2019-02-11)","title":"heatwaveR 0.3.6.9002 (2019-02-11)","text":"Added n n_gap arguments geom_flame() allow proper screening heatspikes additions also propagate geom2trace.GeomFlame","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0369001-2019-01-28","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.6.9001 (2019-01-28)","title":"heatwaveR 0.3.6.9001 (2019-01-28)","text":"Added additional options event_line() allow users manipulate output without get source code.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0369000-2019-01-23","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.6.9000 (2019-01-23)","title":"heatwaveR 0.3.6.9000 (2019-01-23)","text":"Added S3 object geom2trace.GeomFlame now allows geom_flame() converted interactive plotly object via plotly::ggplotly()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-036-2019-01-16","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.6 (2019-01-16)","title":"heatwaveR 0.3.6 (2019-01-16)","text":"CRAN release: 2019-01-16 Updated Zenodo badge reflect upload v0.3.6","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-036-2019-01-16-1","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.6 (2019-01-16)","title":"heatwaveR 0.3.6 (2019-01-16)","text":"CRAN release: 2019-01-16 Finished Alternative Thresholds (Complex Climatologies) vignette Bumped code coverage back 100% important potential backwards compatibility breaking change default ts2clm() exceedance() longer produce var column argument var = TRUE may given produce column Submitted v0.3.6 CRAN","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0359006-2019-01-15","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5.9006 (2019-01-15)","title":"heatwaveR 0.3.5.9006 (2019-01-15)","text":"Began editing Alternative (Complex) Climatology vignette Changed default argument exceedance(maxPadLength) 3 FALSE match new default ts2clm() Changed default behaviour event_line() longer require user provide start_date end_date arguments","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0359005-2019-01-03","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5.9005 (2019-01-03)","title":"heatwaveR 0.3.5.9005 (2019-01-03)","text":"Corrected typos gridded event detection vignette","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0359004-2019-01-02","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5.9004 (2019-01-02)","title":"heatwaveR 0.3.5.9004 (2019-01-02)","text":"First update 2019 Added ‘protoEvents’ argument detect_events.R() returning proto events rather table event metrics","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0359003-2018-12-26","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5.9003 (2018-12-26)","title":"heatwaveR 0.3.5.9003 (2018-12-26)","text":"Boxing day update","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0359003-2018-12-21","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5.9003 (2018-12-21)","title":"heatwaveR 0.3.5.9003 (2018-12-21)","text":"Updated text OISST preparation vignette Updated text gridded event detection vignette","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0359003-2018-12-19","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5.9003 (2018-12-19)","title":"heatwaveR 0.3.5.9003 (2018-12-19)","text":"Updated text landing page better reflect updates made past months Fixed typo event_line() output Updated text detection visualisation vignette Updated text exceedance vignette Updated text categories vignette Updated text OISST preparation vignette","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0359003-2018-12-18","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5.9003 (2018-12-18)","title":"heatwaveR 0.3.5.9003 (2018-12-18)","text":"Changed time series checking behaviour exceedance() ts2clm()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0359002-2018-12-12","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5.9002 (2018-12-12)","title":"heatwaveR 0.3.5.9002 (2018-12-12)","text":"Fixed bug event_line() caused graph events outside spread range Expanded testing back 100%","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0359001-2018-12-06","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5.9001 (2018-12-06)","title":"heatwaveR 0.3.5.9001 (2018-12-06)","text":"Fixed bug caused R liking dates older 1970-01-01 Changed maxPadLength behaviour ts2clm() match Python default settings","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0359000-2018-12-05","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5.9000 (2018-12-05)","title":"heatwaveR 0.3.5.9000 (2018-12-05)","text":"Added ‘duration_max’ block_average() output Resumed correct version numbering","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-035-2018-12-03","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5 (2018-12-03)","title":"heatwaveR 0.3.5 (2018-12-03)","text":"Increased functionality block_average()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-035-2018-11-01","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5 (2018-11-01)","title":"heatwaveR 0.3.5 (2018-11-01)","text":"Updated one figure vignette","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-035-2018-10-26","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5 (2018-10-26)","title":"heatwaveR 0.3.5 (2018-10-26)","text":"clim_calc() reinstated allow calculation clims missing data var calculations reinstated documentation issues","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-035-2018-10-20","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.5 (2018-10-20)","title":"heatwaveR 0.3.5 (2018-10-20)","text":"ts2clm() longer calls clim_calc(), clim_calc_cpp() smooth_percentile() longer provides option create variance climatology (need longer create var seemed fully implemented 0.3.4)","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-034-2018-10-19","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.4 (2018-10-19)","title":"heatwaveR 0.3.4 (2018-10-19)","text":"ts2clm() longer calculates variance column default make_whole() deprecated favour make_whole_fast()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-034-2018-10-17","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.4 (2018-10-17)","title":"heatwaveR 0.3.4 (2018-10-17)","text":"major functions now produce results fourth decimal place","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-034-2018-10-16","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.4 (2018-10-16)","title":"heatwaveR 0.3.4 (2018-10-16)","text":"Clarified information basic detection vignette Corrected link went wrong page","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-034-2018-10-03","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.4 (2018-10-03)","title":"heatwaveR 0.3.4 (2018-10-03)","text":"Changed error handling proto_event() return events stop message error. change picked detect_event() without required changes category() required bit cajoling also output blank dataframe","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-034-2018-10-01","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.4 (2018-10-01)","title":"heatwaveR 0.3.4 (2018-10-01)","text":"Minor tweak make_whole_fast() provide cleaner internal output","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-034-2018-09-28","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.4 (2018-09-28)","title":"heatwaveR 0.3.4 (2018-09-28)","text":"Removed several unnecessary columns category climatology output","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-034-2018-09-27","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.4 (2018-09-27)","title":"heatwaveR 0.3.4 (2018-09-27)","text":"Fixed bug ts2clm() prevented calculation clims large contiguous missing periods data (e.g. ice coverage). Added argument category() allows one function also output day--day (long) category values, rather just summary (wide) output. Added lon/lat values documentation built-time series","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-033-2018-08-23","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.3 (2018-08-23)","title":"heatwaveR 0.3.3 (2018-08-23)","text":"CRAN release: 2018-08-02 Added CITATION file package citation now set JOSS article","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-033-2018-07-31","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.3 (2018-07-31)","title":"heatwaveR 0.3.3 (2018-07-31)","text":"CRAN release: 2018-08-02 Added Zenodo DOI badge JOSS review process complete Added JOSS DOI badge","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-033-2018-07-25","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.3 (2018-07-25)","title":"heatwaveR 0.3.3 (2018-07-25)","text":"CRAN release: 2018-08-02 BUG FIX: corrected issue clim_calc_cpp able calculate clims baselines beginning ending Julian year making clim_spread plug gaps beforehand row-wise means. Rebuilt pkgdown site reflect version increase v0.3.3 submitted CRAN","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-032-2018-07-23","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.2 (2018-07-23)","title":"heatwaveR 0.3.2 (2018-07-23)","text":"Edits suggested JOSS review","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-032-2018-07-12","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.2 (2018-07-12)","title":"heatwaveR 0.3.2 (2018-07-12)","text":"Remove unneeded copies data functions improve memory-use efficiency.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-031-2018-07-10","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.1 (2018-07-10)","title":"heatwaveR 0.3.1 (2018-07-10)","text":"BUG FIX: corrected issue make_whole_fast create whole, complete time series (.e. missing dates still present); missing dates caused clim_calc_cpp fail","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-030-2018-06-22","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.3.0 (2018-06-22)","title":"heatwaveR 0.3.0 (2018-06-22)","text":"CRAN release: 2018-06-22 Re-submitted CRAN anticipation ggplot2 changes proto_event now handles event calculations ‘house’ allows detect_event now given theoretically limitless number thresholds","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0279003-2018-06-08","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.7.9003 (2018-06-08)","title":"heatwaveR 0.2.7.9003 (2018-06-08)","text":"Logic catch lolli_plot asked highlight events present New vignette looks calculating complex climatologies","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0279002-2018-06-07","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.7.9002 (2018-06-07)","title":"heatwaveR 0.2.7.9002 (2018-06-07)","text":"Tweak ts2clm","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0279001-2018-06-05","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.7.9001 (2018-06-05)","title":"heatwaveR 0.2.7.9001 (2018-06-05)","text":"Tweaks detect_event exceedance","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0279000-2018-06-02","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.7.9000 (2018-06-02)","title":"heatwaveR 0.2.7.9000 (2018-06-02)","text":"Unused Rcpp code removed master branch Logo changed slightly Codecov back 100% Addressed one testthat issue causing OSX CRAN build fail Added CRAN link pkgdown site Added Bug Report link pkgdown site","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-027-2018-05-30","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.7 (2018-05-30)","title":"heatwaveR 0.2.7 (2018-05-30)","text":"CRAN release: 2018-05-30 Accepted CRAN","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-027-2018-05-28","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.7 (2018-05-28)","title":"heatwaveR 0.2.7 (2018-05-28)","text":"CRAN release: 2018-05-30 Submitted CRAN","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0269002-2018-05-25","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.6.9002 (2018-05-25)","title":"heatwaveR 0.2.6.9002 (2018-05-25)","text":"Fixes make_whole testing Fixes block_average longer exporting make_whole make_whole_fast longer uses zoo time series NA handling–made custom function replace Additional speed improvements Repair testthat tests","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0269001-2018-05-24","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.6.9001 (2018-05-24)","title":"heatwaveR 0.2.6.9001 (2018-05-24)","text":"Moved vignettes relating upcoming MHW_detection paper repo helps unclutter repo primarily kept package content","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0269000-2018-05-23","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.6.9000 (2018-05-23)","title":"heatwaveR 0.2.6.9000 (2018-05-23)","text":"Added vignette shows tweaking arguments detect changes outputs languages outputs may differ Changed output detect_event better match Python version Corrections testthat match changes detect_event output","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0259003-2018-05-22","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.5.9003 (2018-05-22)","title":"heatwaveR 0.2.5.9003 (2018-05-22)","text":"Added C++ function, clim_calc_ccp() faster climatology calculations; speed climatology calculation comes 50.6 ms R 3.4 ms C++ MacBook Pro (15-inch, 2017) 2.9 GHz Intel Core i7 16 GB RAM computer","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0249003-2018-05-21","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.4.9003 (2018-05-21)","title":"heatwaveR 0.2.4.9003 (2018-05-21)","text":"Updated testthat lolli_plot() event_line() Updated testthat ts2clm() Updated testthat detect_event()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0249002-2018-05-17","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.4.9002 (2018-05-17)","title":"heatwaveR 0.2.4.9002 (2018-05-17)","text":"Take advantage C++ speed enhancement smooth_percentile() using RcppRoll Update testthat accordingly","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0239002-2018-05-17","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.3.9002 (2018-05-17)","title":"heatwaveR 0.2.3.9002 (2018-05-17)","text":"Basic R vs Python vignette finished","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0239001-2018-05-16","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.3.9001 (2018-05-16)","title":"heatwaveR 0.2.3.9001 (2018-05-16)","text":"Minor fix testthat codecov 100% Fix geom_lolli() n argument Fix lolli_plot() y-axis range Minor fix make_whole() Skeleton R vs Python vignette added","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0239000-2018-05-16","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.3.9000 (2018-05-16)","title":"heatwaveR 0.2.3.9000 (2018-05-16)","text":"Major speed-climatology creation function. clim_spread() now returns matrix, data frame. makes loop clim_calc() much faster. testing sst_WA data, leads 3.7 fold speed improvement (520 ms 140 ms). Speed-make_whole() (60 ms 40 ms)","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0229000-2018-05-15","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.2.9000 (2018-05-15)","title":"heatwaveR 0.2.2.9000 (2018-05-15)","text":"Removed instances detect() favour new pipeline Updated exceedance() utilise internal functions Updated object names block_average()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0219001-2018-05-15","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.1.9001 (2018-05-15)","title":"heatwaveR 0.2.1.9001 (2018-05-15)","text":"Micro edits documentation Testing exported internal functions brought speed Ensuring new ts2clm() detect_event() pipeline returns results old make_whole() detect() pipeline","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0219000-2018-05-14","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.1.9000 (2018-05-14)","title":"heatwaveR 0.2.1.9000 (2018-05-14)","text":"Phasing identical names python version detect_event() now passing checks Must still test MCSs old detect() function unpacked simplified. Internal code now new functions, seen user. make_whole() proto_event(), clim_calc(), smooth_percentile(), clim_spread(), ts2clm() ts2clm() used instead detect_clim() Climatologies can now calculated independently detect functionality exceedance() function testthat checks updated account change variable naming","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0209000-2018-05-11","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.2.0.9000 (2018-05-11)","title":"heatwaveR 0.2.0.9000 (2018-05-11)","text":"detect() now broken detect_clim() detect_event() now also rely internal functions purpose create family functions provide different options New vignette making short climatologies.","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0109000-2018-05-10","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.1.0.9000 (2018-05-10)","title":"heatwaveR 0.1.0.9000 (2018-05-10)","text":"One may now provide alternative baselines climatologies detect()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0079001-2018-05-05","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.0.7.9001 (2018-05-05)","title":"heatwaveR 0.0.7.9001 (2018-05-05)","text":"Testing category() Testing block_average() Testing detect() Testing exceedance() Removed default threshold exceedance() Tweaks exceedance() error messages Testing event_line() Testing lolli_plot() Tweaks lolli_plot() error messages","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0079000-2018-05-04","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.0.7.9000 (2018-05-04)","title":"heatwaveR 0.0.7.9000 (2018-05-04)","text":"New category() function returns category results events Still requires testing improved event naming scheme","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0069000-2018-05-03","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.0.6.9000 (2018-05-03)","title":"heatwaveR 0.0.6.9000 (2018-05-03)","text":"Minor touch examples geoms.R First draft heatwaveR hex logo added site Added category option event_line() Simplifications consistency checks detect() writing Baselines climatology vignette","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0059001-2018-05-02","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.0.5.9001 (2018-05-02)","title":"heatwaveR 0.0.5.9001 (2018-05-02)","text":"Fix event_line() plotting MCSs correctly Fix error smooth_percentile smooth_percentile_width descriptions interchanged detect() Simplify initial lines leap year calculations (remove redundant code) change raster::quantile() stats::quantile()","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0059000-2018-04-29","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.0.5.9000 (2018-04-29)","title":"heatwaveR 0.0.5.9000 (2018-04-29)","text":"Add option use custom baseline detect() requested Maxime Marin (), University Tasmania (IMAS) – CSIRO (O&), present python version package","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0049000-2018-04-28","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.0.4.9000 (2018-04-28)","title":"heatwaveR 0.0.4.9000 (2018-04-28)","text":"Remove restriction require full years start/end points climatology calculations detect() Documentation updated accordingly Vignette OISST data processing added","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0039000-2018-04-26","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.0.3.9000 (2018-04-26)","title":"heatwaveR 0.0.3.9000 (2018-04-26)","text":"Removed rlang dependency Touch-block_average() Tested make_whole() Basic testing functions","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0029000-2018-04-25","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.0.2.9000 (2018-04-25)","title":"heatwaveR 0.0.2.9000 (2018-04-25)","text":"Established theme changelog Synced ganalytics Fixed event_line() acknowledge column names t temp Fixed lolli_plot() use underlying geom_lolli() Search bar now live Removed one use plyr code","code":""},{"path":"https://robwschlegel.github.io/heatwaveR/index.html/news/index.html","id":"heatwaver-0019000-2018-04-24","dir":"Changelog","previous_headings":"","what":"heatwaveR 0.0.1.9000 (2018-04-24)","title":"heatwaveR 0.0.1.9000 (2018-04-24)","text":"Added NEWS.md file track changes package. Cloned RmarineHeatWaves package repo First build pkgdown site live","code":""}]
